[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Zendesk
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Zendesk
[ Suggest Edits](/edit/zendesk)
![](https://files.readme.io/00252fb-image.png)
Turn Botpress chats into Zendesk tickets, with a handy link added to the conversation notes. A Zendesk agent can communicate directly with the user on the same conversation initially handled by the bot on any channels supported by Botpress (e.g. web chat, Whatsapp, Messenger, etc.)
Getting Started
[](#getting-started)
In this guide, we will demonstrate how to set up the Zendesk integration to facilitate live interactions through the bot.
Step 1: Add Zendesk Integration
[](#step-1-add-zendesk-integration)
Firstly, locate your bot's dashboard and click on the integrations tab. Use the search bar to find and select the Zendesk Integration. Once found, install this onto your bot.
Step 2: Setting up Zendesk Integration
[](#step-2-setting-up-zendesk-integration)
Switch to the Zendesk admin center, and find the Zendesk API menu. Ensure you have both password and token access enabled.
You will then need to create a distinct API token. Copy this for later use.
Return to your bot's dashboard. Here you will need to input your organizational subdomain, your consistent Zendesk account email, and the copied API token. Ensure to save this configuration and activate the newly installed integration.
Step 3: User Info Accumulation
[](#step-3-user-info-accumulation)
The bot will need the user's name and their email. This data will be saved to user variables.
Create a 'user.name' and a 'user.email' variable on the bottom-left variables panel. Make sure to select "User" as the scope. Confirmation of the information will be done using simple capture cards.
Step 4: Enabling HITL Agent
[](#step-4-enabling-hitl-agent)
From the "Agents" menu of the bot in Botpress Studio, click on the "HITL Agent" option, and then turn on the "Enable Agent" option.
This menu will allow you to configure options such as choosing Zendesk as the desired integration. Also, you have the capability to design an 'end\_conversation' intent that permits the user to opt out of speaking to a live agent. To do so, pick a global intent from the dropdown, for instance "Cancel".
Most settings are default, you may choose to modify them to your preference.
Step 5: Activating HITL
[](#step-5-activating-hitl)
Add a new node to your bot in Botpress Studio and then insert a "Start HITL" card, which will trigger the bot into initiating a live agent.
The card will automatically summarize the conversation and provide a transcript for the live agent in the Zendesk menu.
Step 6: Test the Configuration
[](#step-6-test-the-configuration)
Now that everything has been configured accordingly, publish your bot and open the Web Chat.
> ## 📘
>
> Note
>
> This integration does not work in the emulator. Try it in other channels such as Web Chat.
Cards
[](#cards)
Get Ticket
[](#get-ticket)
Retrieves details about a specific support ticket in Zendesk.
* **Input**:  
   * `Ticket ID`: The ID of the ticket from the ticket URL.
(e.g., `https://companyname.zendesk.com/agent/tickets/1` for `Ticket ID` `1`).
* **Returns**: Real-time updates on the status and details of the ticket.
JavaScript
`// Return object example
{
"ticket": {
"id": 4,
"subject": "Ticket Subject",
"description": "Ticket Description",
"priority": null,
"status": "open",
"tags": [],
"requesterId": 11183521570160,
"assigneeId": 11183526440284,
"createdAt": "2023-11-08T18:27:49Z",
"updatedAt": "2023-11-10T18:03:13Z"
}
}
`
Create Ticket
[](#create-ticket)
Creates a new support ticket in Zendesk.
* **Inputs**:  
   * `Ticket subject`: Title of the ticket.  
   * `Ticket comment`: Initial message for the support agent.  
   * `Requester name`: Name of the user needing support.  
   * `Requester email`: Email of the user needing support.
* **Returns**: Confirmation of ticket creation with details.
JavaScript
`// Return object example
{
"ticket": {
"id": 4,
"subject": "Ticket Subject",
"description": "Ticket Description",
"priority": null,
"status": "open",
"tags": [],
"requesterId": 11183511570160,
"assigneeId": 11183521440284,
"createdAt": "2023-11-08T18:27:49Z",
"updatedAt": "2023-11-10T18:03:13Z"
}
}
`
Close Ticket
[](#close-ticket)
Closes the ticket of the provided Ticket ID in Zendesk.
* **Input**:  
   * `Ticket ID`: The ID of the ticket from the ticket URL.
(e.g., `https://companyname.zendesk.com/agent/tickets/1` for `Ticket ID` `1`).
* **Optional**: `Closing Comment` for resolution summary or thanks.
* **Returns**: Confirmation that the ticket is closed with optional comment.
JavaScript
`// Return object example
{
"ticket": {
"id": 4,
"subject": "Ticket Subject",
"description": "Ticket Description",
"priority": null,
"status": "closed",
"tags": [],
"requesterId": 11183511570160,
"assigneeId": 11183521440284,
"createdAt": "2023-11-08T18:27:49Z",
"updatedAt": "2023-11-10T18:03:13Z"
}
}
`
Get Ticket Conversation
[](#get-ticket-conversation)
Fetches the conversation ID of the provided Ticket ID in Zendesk.
* **Input**:  
   * `Ticket ID`: The ID of the ticket from the ticket URL.
(e.g., `https://companyname.zendesk.com/agent/tickets/1` for `Ticket ID` `1`).
* **Returns**: Latest updates or responses from support agents on the ticket.
JavaScript
`// Return object example
{
"conversationId": "5c9ea21d-3ce3-43fa-bd33-3fb7312f88b5",
"tags": {"zendesk:id": "4", "zendesk:requesterId": "11232621609372"}
}
`
Find Customer (WIP)
[](#find-customer-wip)
Finds a customer in Zendesk based on the provided search query.
* **Input**:  
   * `Search Query`: You can search by name, email, or phone number of the customer.
* **Returns**: A list of matching customers and their details.
JavaScript
`// Return object example
{
"customers": [
{
"id": 11183521570160,
"name": "Customer Name",
"email": "Customer Email",
"phone": "Customer Phone",
"createdAt": "2023-11-08T18:27:49Z",
"updatedAt": "2023-11-10T18:03:13Z"
}
]
}
`
List Agents (WIP)
[](#list-agents-wip)
Provides a list of available support agents in Zendesk.
* **Input**:  
   * `Is Online`: Select this option to filter the list of agents by online status.
* **Returns**: List of agents, optionally filtered by online status.
JavaScript
`// Return object example
{
"agents": [
{
"id": 11183521570160,
"name": "Agent Name",
"email": "Agent Email",
"phone": "Agent Phone",
"createdAt": "2023-11-08T18:27:49Z",
"updatedAt": "2023-11-10T18:03:13Z"
}
]
}
`
Set Conversation Requester (WIP)
[](#set-conversation-requester-wip)
Changes the requester of a ticket conversation in Zendesk.
* **Inputs**:  
   * `Conversation ID`: Get this from the `Get Ticket Conversation` card.  
   * `Requester ID`: Get this from the requester's profile URL in Zendesk (e.g., `https://companyname.zendesk.com/agent/users/1` for `Requester ID` `1`).
* **Returns**: None. Does not return anything.
Trigger - Assigned Ticket
[](#trigger---assigned-ticket)
This trigger is fired when a ticket is assigned to an agent. This can be used to notify the agent that they have a new ticket to work on.
Trigger - Ticket Solved
[](#trigger---ticket-solved)
This trigger is fired when a ticket is marked as solved. This can be used to notify the user that their issue has been resolved.
> ## 📘
>
> Note
>
> You can add a message after these triggers to send a notification to the agent. For example, you can use the `Send Message`card to send a message to the agent.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Getting Started](#getting-started)  
         * [Step 1: Add Zendesk Integration](#step-1-add-zendesk-integration)  
         * [Step 2: Setting up Zendesk Integration](#step-2-setting-up-zendesk-integration)  
         * [Step 3: User Info Accumulation](#step-3-user-info-accumulation)  
         * [Step 4: Enabling HITL Agent](#step-4-enabling-hitl-agent)  
         * [Step 5: Activating HITL](#step-5-activating-hitl)  
         * [Step 6: Test the Configuration](#step-6-test-the-configuration)  
   * [Cards](#cards)  
         * [Get Ticket](#get-ticket)  
         * [Create Ticket](#create-ticket)  
         * [Close Ticket](#close-ticket)  
         * [Get Ticket Conversation](#get-ticket-conversation)  
         * [Find Customer (WIP)](#find-customer-wip)  
         * [List Agents (WIP)](#list-agents-wip)  
         * [Set Conversation Requester (WIP)](#set-conversation-requester-wip)  
         * [Trigger - Assigned Ticket](#trigger---assigned-ticket)  
         * [Trigger - Ticket Solved](#trigger---ticket-solved)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Zapier
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Zapier
[ Suggest Edits](/edit/zapier)
> The Botpress app for Zapier is currently in BETA. In order to use Botpress in your Zaps please [click here to obtain access](https://zapier.com/developer/public-invite/179950/2d89a44be6d7ddcae4ae23df0be19b3c/) to the private beta in Zapier.
---
![](https://files.readme.io/a1123bd-image.png)
Prerequisites
[](#prerequisites)
* A [Zapier](https://zapier.com/) account
* BETA access to the Botpress app in Zapier [request here](https://zapier.com/developer/public-invite/179950/2d89a44be6d7ddcae4ae23df0be19b3c/)
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](../docs/create-publish-your-chatbot)
Setting up the Zapier integration in Botpress
[](#setting-up-the-zapier-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Zapier integration then click on the "Install to Bot" button, now go back to your bot.
Setting up a Zapier workflow
[](#setting-up-a-zapier-workflow)
1. Create a new zap in your Zapier account and search for "Botpress" either in the Trigger or Action of your zap.
2. Zapier will guide you through the process of authenticating to your Botpress account, follow the steps provided there.
3. Once you have authenticated, when setting up the Trigger or Action of your zap to use Botpress you'll be asked for the "Webhook URL", which you can find in your Botpress Cloud dashboard inside the "Integrations" tab of your bot and then clicking on the Zapier integration.
Using Botpress to trigger a Zapier workflow
[](#using-botpress-to-trigger-a-zapier-workflow)
1. If you're setting up Botpress as a Trigger in Zapier there will be an option to test the trigger and see some sample data that could be received from your bot. Use this to create the rest of your Zap.
2. To make your bot send real data to Zapier, you'll find a "Send to Zapier" action card in Botpress Studio which you can use to send data from your bot to your Zap:
![](https://files.readme.io/25fdd4a-image.png)
3. It's recommended that you send your data in JSON format so you can send multiple value at once, as Zapier will automatically parse it. For example, you could use the following expression to send a JSON object with multiple values in the "Trigger Data" field of the "Send to Zapier" action:
`{{ JSON.stringify({ myVariable1: workflow.myVariable1, myVariable2: workflow.myVariable2 }) }}
`
Using Zapier to trigger an action in your Botpress chatbot
[](#using-zapier-to-trigger-an-action-in-your-botpress-chatbot)
1. If you're setting it up as an Action in Zapier, you can send custom Event Data to your bot and an optional Correlation ID which you can use to associate individual zap runs with a particular event in your bot.
2. Zapier only allows entering a single text value for the Event Data, but you can put a Code Step from Zapier before the Botpress action in your zap in order to construct an object with multiple values and then use `JSON.stringify()` in your Code Step to convert the object to a text field that you can use in the last part of your zap as the Event Data to send to Botpress.
3. To receive data from Zapier in your bot, you can use the "Event from Zapier" trigger in the Studio:
!["Event from Zapier" event in the Studio card tray](https://files.readme.io/c29313a-image.png)
"Event from Zapier" event in the Studio card tray
4. Then add an Execute Code card with the following code assuming you sent your data in JSON format:
JavaScript
`workflow.zapierData = JSON.parse(event.payload.body)
`
5. Now the rest of your trigger workflow can use the `{{ workflow.zapierData }}` variable to access the data you sent from Zapier.
Testing your Zapier integration
[](#testing-your-zapier-integration)
You can create an "echo" zap in Zapier to test if everything works well. For example, you can create a zap that triggers when you send a message to your bot and then sends the same message back to your bot.
Here's what a simple echo zap would look like:
![Screenshot of a sample "echo" zap](https://files.readme.io/a506cbb-image.png)
Screenshot of a sample "echo" zap
The first action receives an event from the bot, and the second one sends the same event back to the bot. You can see the events you receive on the "Discover Events" button on the node containing "Events from Zapier" card.
![Screenshot of what the "echo" looks like in the Studio](https://files.readme.io/7d2c325-image.png)
Screenshot of what the "echo" looks like in the Studio
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Zapier integration in Botpress](#setting-up-the-zapier-integration-in-botpress)  
   * [Setting up a Zapier workflow](#setting-up-a-zapier-workflow)  
         * [Using Botpress to trigger a Zapier workflow](#using-botpress-to-trigger-a-zapier-workflow)  
         * [Using Zapier to trigger an action in your Botpress chatbot](#using-zapier-to-trigger-an-action-in-your-botpress-chatbot)  
         * [Testing your Zapier integration](#testing-your-zapier-integration)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Wix
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Wix
Embedding the Web Chat in a Wix website
[ Suggest Edits](/edit/wix)
![](https://files.readme.io/5a373f6-image.png)
Prerequisites
[](#prerequisites)
1. A [**Wix**](https://www.wix.com) website with the ability to add custom scripts. This will require a paid plan. Checkout [**Wix Pricing**](https://www.wix.com/upgrade/website) for more information.
2. A [**Domain**](https://support.wix.com/en/article/connecting-a-domain-to-the-wix-name-servers) connected to your Wix website for the Custom Code to work.
3. A [**Botpress**](https://sso.botpress.cloud) account with an active bot.
Getting the Botpress Web Chat Script
[](#getting-the-botpress-web-chat-script)
1. Log in to your [**Botpress**](https://sso.botpress.cloud) account and navigate to your bot's **Integrations** tab.
2. Click on the **Webchat** Integration and copy the **Embedded** script from the **Pre-configured** tab.
Adding the Botpress Web Chat Script in Wix
[](#adding-the-botpress-web-chat-script-in-wix)
![](https://files.readme.io/f2494ca-image.png)
1. Log in to your [**Wix**](https://www.wix.com) dashboard and go to **Settings** from the left sidebar.
2. Scroll down to **Advanced Settings** and click on **Custom Code**.
3. Click on **\+ Add Code** in **Body - Start** and paste the **Embedded** script you copied in the previous step.
4. Ensure you apply the code to **All pages** and load the code **Once** at the **Body - end** tag and click **Apply**.
Testing the Integration
[](#testing-the-integration)
1. Publish your Wix website and navigate to your live Wix website.
2. You should see the Botpress Web Chat widget on the bottom right corner of your website.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Getting the Botpress Web Chat Script](#getting-the-botpress-web-chat-script)  
   * [Adding the Botpress Web Chat Script in Wix](#adding-the-botpress-web-chat-script-in-wix)  
         * [Testing the Integration](#testing-the-integration)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Your integrations
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Your integrations
Lists integrations this Workspace owns.
[ Suggest Edits](/edit/your-integrations)
This tab lists integrations your Workspace has contributed to the Botpress Hub.
> ## 🖥️
>
> About the Botpress Hub
>
> The Botpress Hub is a public repository of integrations you can use to extend your Botpress bot's functionalities and options for deployment.
>
> It is open to the public, so you can make contributions to it, share integrations with colleagues or bot builders across the world, and download integrations developed by Botpress and other builders.
>
> Learn more here.
From this tab, you can keep track of all integrations your Workspace currently owns and manages. You can manage the privacy of the integration, view detailed logs and settings, and keep track of previous versions.
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
WhatsApp
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# WhatsApp
Simply and easily connect your chatbot to WhatsApp with this integration.
[ Suggest Edits](/edit/whatsapp)
> ## ❗️
>
> Business Verification
>
> To deploy a chatbot on WhatsApp, your business must first undergo a verification process by Meta, the parent company of WhatsApp. This verification, typically conducted through the Facebook Business Manager, confirms the identity and eligibility of your business to use Meta's platforms. Checking the official Meta for Developers website or WhatsApp Business API documentation is advisable.
Setup
[](#setup)
Prerequisites
[](#prerequisites)
* A [WhatsApp Business Platform Account](https://business.whatsapp.com/products/business-platform) to be your bot's interface on WhatsApp
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Installing the integration
[](#installing-the-integration)
1. Navigate to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud
2. Install the WhatsApp integration
3. Click "Enable Integration" and then "Save Configuration"
4. Click "Sign in to link your account"
5. Follow the steps of the wizard to connect your bot to WhatsApp
Content Type Mapping
[](#content-type-mapping)
From Botpress to WhatsApp
[](#from-botpress-to-whatsapp)
* Text is mapped to [Text Object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#text-object)
* Text with Markdown is mapped to [Text Object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#text-object)
* Image is mapped to [Media Image Object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#media-object)
* Audio is mapped to [Media Audio Object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#media-object)
* Video is mapped to [Media Video Object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#media-object)
* File is mapped to [Media File Object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#media-object)
* Location is mapped to [Location Object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#location-object)
Special behaviors to consider
[](#special-behaviors-to-consider)
Choices (buttons), dropdowns, cards, and carousels are all mapped to [Interactive List Objects.](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#interactive-object)
This comes with a few restrictions and behaviors specific to WhatsApp:
Choices (buttons) and Dropdowns
[](#choices-buttons-and-dropdowns)
* When there are 3 or fewer choices as buttons or in a dropdown, they will be rendered as buttons.
* When there are more than 3 choices as buttons or in a dropdown, they will be rendered as a dropdown.
* If there are more than 10 choices in a dropdown, the multiple dropdown messages will be sent with up to 10 choices in each messsage.  
   * For example, if your bot has a dropdown with 10 choices, the user will receive two messages: the first message will have a dropdown with 10 choices, and the second messge will have a dropdown with two choices.
* Each dropdown requires a label but the Studio currently doesn’t support specifying one, so the label _“Choose…”_ is used for all dropdowns by default.
* Button labels are limited to 20 characters, and dropdown labels are limited to 24 characters.  
   * Labels exceeding these limits are automatically truncated. For example, the label "This button label is very long" would become "This button label i…" on a button and "This button label is ve…" on a dropdown.
Cards and Carousels
[](#cards-and-carousels)
* WhatsApp only supports one link (label and URL) on a card, so multiple links will be split into separate empty cards.
* WhatsApp imposes a limit of 3 "reply" action buttons on a card, so if a card has more than these, the buttons will be split into multiple cards.
* WhatsApp doesn't natively support carousels, so each card in a carousel will be sent individually.
Files
[](#files)
* When files are sent over Whatsapp, the Studio doesn't store the original filename (for security reasons) but only the file extension, so the file will be sent with a generic filename ("file") followed by the extension of the file. For example, if you send a PNG file, it will be sent as "file.png".
From WhatsApp to Botpress
[](#from-whatsapp-to-botpress)
Text
[](#text)
Text messages are directly mapped to Botpress text messages, and readable through `event.preview`.
Location
[](#location)
Use a “Wait for User Input” card on your bot, check that `event.type` equals `"location"`, and then read `event.payload` which will contain the following properties:
* `latitude`
* `longitude`
* `address` (not always provided)
* `title` (not always provided)
Media (images, audio, documents)
[](#media-images-audio-documents)
Use a “Wait for User Input” card on your bot, check that `event.type` equals `"image"`, `"audio"` or `"document"`, and then read `event.payload` which will have the following structure depending on the event type:
* For an image: `{"imageUrl": "https://lookaside.fbsbx.com/...."}`
* For audio: `{"audioUrl": "https://lookaside.fbsbx.com/...."}`
* For a document: `{"documentUrl": "https://lookaside.fbsbx.com/....", "filename": "the-filename.pdf"}`
Then, you can retrieve the raw file content from WhatsApp by making a `GET` HTTP request to the URL provided in the payload while passing your WhatsApp access token as a `Bearer` token in the `Authorization` HTTP header.
For example:
JavaScript
`` /* INSTRUCTIONS:
1. Create a Configuration Variable named "WHATSAPP_ACCESS_TOKEN" in the Bot Settings section of Botpress Studio.
2. Go to the "Configuration Variables" section of your bot in Botpress Cloud and set its value to your WhatsApp access token.
*/
const whatsappAccessToken = env.WHATSAPP_ACCESS_TOKEN
const res = await axios.get(event.payload.imageUrl, {
headers: {
Authorization: `Bearer ${whatsappAccessToken}`,
},
})
// This will be a JavaScript Buffer (https://nodejs.org/api/buffer.html) containing the raw binary content of the media file.
const rawFileContent = res.data
// This will indicate the file type, see:
// https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media/#supported-media-types
const mimeType = res.headers['content-type']
``
For further information, please check the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media/#download-media) on downloading media files and the [Botpress documentation](../docs/configuration-variables) on using Configuration Variables.
Other message types
[](#other-message-types)
* Buttons and interactive replies from a list or button are mapped to a plain text response from the user, so you can use `event.preview` to get the value.
* Botpress does not currently support other Whatsapp message types.
Tips
[](#tips)
* To get the phone number of the user you can read the following variable:
`{{ event.tags.conversation['whatsapp:userPhone'] }}`.
This number also contains the country code and has no spaces, dashes or signs.
* To get the Whatsapp Phone Number ID of your bot that the user is interacting with _(useful when pointing multiple Phone Number IDs to the same bot)_:
`{{ event.tags.conversation['whatsapp:phoneNumberId'] }}`
Example:
[](#example)
* \[Text card\]: `Where are you? Please use Whatsapp's "Send Location" feature.`
* \[Wait for Message card\]
* \[Text card\]: `Thank you! You are located at {{event.payload.title}}, {{event.payload.address}} with longitude {{event.payload.longitude}} and latitude {{event.payload.latitude}}.`
Starting a Conversation Proactively
[](#starting-a-conversation-proactively)
As required by WhatsApp, a conversation with a user can be proactively initiated only by using [Message Templates](https://developers.facebook.com/docs/whatsapp/message-templates/guidelines/), which need to be created in your [WhatsApp Manager](https://business.facebook.com/wa/manage/message-templates/) dashboard first and then reviewed and approved by WhatsApp in order to use them.
Once you have a message template approved by WhatsApp, it's very easy to have your bot start a conversation with a user by just using the Whatsapp "**Start Conversation**" card:
![](https://files.readme.io/f7109ed-image.png)
Then you just need to pass the following fields to proactively start a Whatsapp conversation with a user:
1. **User Phone**: The phone number of the user, including the country code (e.g. `+1 123 456 7890`).
2. **Template Name**: The name of your WhatsApp message template to use for the first message of the conversation. The template should be already approved by WhatsApp in order to use it.
3. **Template Language** _(optional)_: The language code of your WhatsApp message template ([see below](../docs/whatsapp#template-language) for more details).
4. **Template Variables JSON** _(optional)_: The values of the variables for your WhatsApp message template, specified as a JSON array representing the list of values ([see below](../docs/whatsapp#template-variables) for more details).
5. **Sender Phone Number ID** _(optional)_: The Whatsapp Phone Number ID you want to use as sender of the message if you have multiple phone numbers available in your Meta Developers dashboard. If you don't specify this field, the Default Phone Number ID specified in the Whatsapp configuration of your bot in your Botpress Cloud dashboard will be used by default.
![](https://files.readme.io/5f52ceb-image.png)
Once the conversation is created, if the user replies back it will be processed by your bot as a normal incoming message, so nothing else needs to be done.
Template Language
[](#template-language)
If the language you selected for your template in the Whatsapp Manager dashboard has a country qualifier, then the value for "Template Language" needs to be specified in the `language_COUNTRY` format where `language` is the 2-letter lowercase [ISO code for the language](https://en.wikipedia.org/wiki/List%5Fof%5FISO%5F639-1%5Fcodes), and `COUNTRY` is the 2-letter uppercase [ISO code for the country](https://en.wikipedia.org/wiki/ISO%5F3166-1%5Falpha-2). On the other hand, if the language in Whatsapp Manager doesn't specify a country then you can enter just the 2-letter lowercase ISO code for the language.
For example:
* If you selected the "English (US)" option for the language of your Message Template in Whatsapp Manager, then the value you need to enter for "Template Language" in Botpress is `en_US`.
* If you selected the "English (UK)" option, then the value you need to enter is `en_GB`.
* If you selected the "French" option, which doesn't have a country qualifier, then the value you need to enter is just `fr`.
Template Variables
[](#template-variables)
Template variables need to be passed as a JSON array of string or numeric values representing the list of variable values, as Whatsapp only allows referring to them by their position in your message template (e.g. `{{1}}` for the first variable, `{{2}}` for the second variable, and so on).
For example, if your Message Template expects a first variable (_referred to as `{{1}}` in the template_) with the person's first name and then a second variable (_`{{2}}` in the template_) with an account number, then you would pass the following JSON array as the value for the "Template Variables" field:
JSON
`["John", "12345"]
`
Accessing the Botpress Conversation ID
[](#accessing-the-botpress-conversation-id)
If you need to access the ID of the conversation created in Botpress Cloud by this action, you can choose to store the output value of this action in a variable. The output value of this action will be an object with the following structure:
JavaScript
`{
conversationId: 'ffa09762-6c37-4ebd-a82f-307048929c97'
}
`
So for example, if you choose to store the output value of this action in a variable named `bpWhatsappAction`, you can use `{{ workflow.bpWhatsappAction.conversationId }}` in input fields of the Studio (where supported) to insert the conversation ID, or use `workflow.bpWhatsappAction.conversationId` to access it in code.
Creating the conversation using the Botpress Client
[](#creating-the-conversation-using-the-botpress-client)
Note: This only works for bots created from code only.
If you're building a bot as code (instead of using Botpress Studio), you can use the Botpress Client instance provided to your bot's handlers to call this action programmatically as shown in the following example:
ts
`` const result = await client.callAction({
type: 'whatsapp:startConversation',
input: {
userPhone: '+1 123 456 7890', // The full phone number of the Whatsapp user you want to initiate the conversation with.
templateName: 'test_message', // This is the name (identifier) of your WhatsApp message template.
templateLanguage: 'en_US', // Optional (defaults to `en_US`)
templateVariablesJson: JSON.stringify(['John', '12345']), // Optional (only needed if your message template uses variables)
},
})
console.log('Botpress conversation ID: ' + result.conversationId)
``
Updated about 2 months ago
---
* [Table of Contents](#)
* * [Setup](#setup)  
         * [Prerequisites](#prerequisites)  
         * [Installing the integration](#installing-the-integration)  
   * [Content Type Mapping](#content-type-mapping)  
         * [From Botpress to WhatsApp](#from-botpress-to-whatsapp)  
         * [Special behaviors to consider](#special-behaviors-to-consider)  
         * [From WhatsApp to Botpress](#from-whatsapp-to-botpress)  
         * [Other message types](#other-message-types)  
   * [Tips](#tips)  
         * [Example:](#example)  
   * [Starting a Conversation Proactively](#starting-a-conversation-proactively)  
         * [Template Language](#template-language)  
         * [Template Variables](#template-variables)  
         * [Creating the conversation using the Botpress Client](#creating-the-conversation-using-the-botpress-client)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Webhook
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Webhook
[ Suggest Edits](/edit/webhook)
![](https://files.readme.io/b75503d-image.png)
Webhooks provide a powerful way to integrate Botpress with other services. This guide will walk you through how to set up a webhook in Botpress to allow your bot to receive external updates in real-time.
Prerequisites
[](#prerequisites)
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Setting up the Webhook integration in Botpress
[](#setting-up-the-webhook-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Webhook integration then click on the "Install to Bot" button, now go back to your bot.
The Webhook integration will have the following settings:
* **Enabled**: Whether Botpress will communicate with the Webhook.
* **Webhook URL**: The URL that you will use to send data to your bot.
* **Secret**: A secret password that you can use to secure your webhook. It can be any string you want, but make it random and hard to guess.
That's it! Now the Webhook integration is operational and ready for use within your bot.
Sending data to your Webhook from Javascript
[](#sending-data-to-your-webhook-from-javascript)
You can make requests to your webhook from any environment that supports HTTP requests, such as a Node.js app, a React app, a Javascript script running in the browser, a Zapier zap, a curl script, etc.
This code example uses the Axios library to make a POST request to the Webhook URL, in a simulated Node.js app.
JavaScript
`` import axios from 'axios'
const webhookUrl = 'https://your-webhook.url'
const data = {
article: {
id: '123',
content: 'Hello Webhooks!',
},
category: 'Business',
}
const headers = {
'Content-Type': 'application/json',
// this is optional
// `x-bp-secret`: 'your-secret'
}
await axios.post(webhookUrl, data, header)
// You should get a 200 OK response
// Webhooks don't return any data in the response body
``
Sending data to your Webhook from a HTTP client (for testing)
[](#sending-data-to-your-webhook-from-a-http-client-for-testing)
1. Open a HTTP client like Postman or Insomnia and create a new request
2. Set the request type to `POST`
3. Set the URL to the Webhook URL you got from the integration page in the Botpress Dashboard.
4. Set the `Content-Type` header to `application/json`
5. (Optional) Set the `x-bp-secret` header to the secret token you set in the Botpress Hub
6. \[Example\] Set the body to the following JSON:
JSON
`{
"article": {
"id": "123",
"content": "Hello Webhooks!"
},
"category": "Business"
}
`
1. Send the request and you should see a `200 OK` success response.
Using the Webhook Event data in your bot
[](#using-the-webhook-event-data-in-your-bot)
1. Go to the Botpress Studio and right-click the editor to add a Trigger node, that triggers on `Webhook Event`.
* This is where the conversation will start when the webhook received data, instead of following the regular path of beginning with the `Start` node.
2. Connect the Trigger node to the rest of you conversation.
3. Click on `Discover Events` button to see the events that were received. You can choose an event and save it as an example to trigger the conversation for testing.
4. You can access the data from the request using the `event.payload` variable.
Webhook Event Payload
[](#webhook-event-payload)
Webhook requests make available four properties that you can read in your bot:
* `event.payload.body`: The body of the request - it is usually a JSON object
* `event.payload.query`: A JSON object containing the URL params of the request  
   * For example if you make a request to `https://your-webhook.url/?param1=hello&param2=world` the query object will look like this: `{ param1: 'hello', param2: 'world' }`  
   * Then you can access the params using this notation: `event.payload.query.param1`
* `event.payload.method`: The HTTP method of the request - usually `POST`
* `event.payload.path`: The path of the request - usually `/`
Additional Information
[](#additional-information)
* You can create filters to manage when the trigger will be actually activated and also create alternative flows by using Expressions that consider the request data.
* For example, you can add a filter that checks if the request path is new-comment (`event.payload.path === '/new-comment'`), in which case the conversation will only start if the request is made to this url - `https://your-webhook.url/new-comment`
* You could also add Expression cards that transition to different nodes or workflows based on the data. For example, the `event.payload.body.category === 'Business'` condition could transition to a different flow that handles business articles.
> ## 📘
>
> Note
>
> Remember that the contents of the `event.payload` property received via Webhook will be replaced as soon as the bot or the user sends a new message. So you should save important information in workflow variables if you want to use it later in the conversation.
* You can also add `/user` or any other path to the WebhookURL to record events specific to this URL.
* You can then add a filter to the Webhook Event to only receive events from this URL.  
   * For example, if you want to receive only the events that have a `type` equal to `text` and a `user.id` equal to `user-id`, you can use the following filter:  
   * `event.payload.body.type === 'text' && event.payload.body.user.id === 'user-id'`
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Webhook integration in Botpress](#setting-up-the-webhook-integration-in-botpress)  
   * [Sending data to your Webhook from Javascript](#sending-data-to-your-webhook-from-javascript)  
   * [Sending data to your Webhook from a HTTP client (for testing)](#sending-data-to-your-webhook-from-a-http-client-for-testing)  
   * [Using the Webhook Event data in your bot](#using-the-webhook-event-data-in-your-bot)  
   * [Webhook Event Payload](#webhook-event-payload)  
   * [Additional Information](#additional-information)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Webchat
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Webchat
Cards that allow you to interact with the webchat widget.
[ Suggest Edits](/edit/webchat-2)
Webchat Cards
[](#webchat-cards)
Webchat Cards are specialized Cards available in Botpress that enable you to directly control and interact with the webchat widget embedded on your website. These Cards allow you to manage the behavior of the webchat widget, handle user interactions, and customize the chat experience for your users.
Below is an overview of each category of Webchat Interaction Cards available through the card tray:
Configure Webchat
[](#configure-webchat)
The **Configure Webchat** Card allows you to adjust the settings of the webchat widget dynamically. You can change visual and functional aspects of the webchat, such as modifying the color scheme, adjusting welcome messages, or toggling features like file uploads. This Card helps personalize the user experience based on the context of the conversation or user preferences.
Send Custom Event
[](#send-custom-event)
The **Send Custom Event** Card is used to trigger custom events in the webchat widget, allowing you to send data from your bot to the webchat or perform specific actions based on user interactions. This Card is particularly useful for tracking user behavior, integrating analytics, or triggering specific workflows within the webchat.
Get User Data
[](#get-user-data)
The **Get User Data** Card allows you to retrieve information about the user interacting with the webchat widget, such as their location, browser type, or other metadata. This data can be used to tailor the conversation, provide localized responses, or make decisions based on the user’s context.
Hide Webchat
[](#hide-webchat)
The **Hide Webchat** Card enables you to programmatically hide the webchat widget from the user’s view. This can be used to control when the chat is accessible, such as hiding the widget after a session ends or when a specific condition is met.
Show Webchat
[](#show-webchat)
The **Show Webchat** Card allows you to display the webchat widget to the user, ensuring the chat is visible when you want to prompt user interaction. This is useful for engaging users at specific moments in their journey, such as after a certain time on the page or following a specific action.
Toggle Webchat
[](#toggle-webchat)
The **Toggle Webchat** Card provides the ability to switch the webchat widget between visible and hidden states. This Card is useful when you want to allow the user to control the visibility of the chat or when creating interactive flows that respond to user actions dynamically.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Webchat Cards](#webchat-cards)  
         * [Configure Webchat](#configure-webchat)  
         * [Send Custom Event](#send-custom-event)  
         * [Get User Data](#get-user-data)  
         * [Hide Webchat](#hide-webchat)  
         * [Show Webchat](#show-webchat)  
         * [Toggle Webchat](#toggle-webchat)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Webflow
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Webflow
Embedding the Web Chat in a Webflow Website
[ Suggest Edits](/edit/webflow)
![](https://files.readme.io/543bc7b-image.png)
Prerequisites
[](#prerequisites)
You need to have a **paid** Webflow account to embed custom code in your Webflow site (see [Webflow pricing](https://webflow.com/pricing)).
Getting the Web Chat script
[](#getting-the-web-chat-script)
* Go to [Botpress Admin Dashboard](https://app.botpress.cloud) and select your bot.
* Then, go to the **Integrations** tab and select **Web Chat**.
* Copy the pre-configured script (Embedded) or configurable script.
Embedding the Web Chat
[](#embedding-the-web-chat)
* Go to [Webflow](https://webflow.com/) and select your site.
* Click on **Site Settings** and go to the **Custom Code** tab.
* Paste the Web Chat script in the **Head Code** section.
* Click on **Save Changes** and publish your site.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Getting the Web Chat script](#getting-the-web-chat-script)  
   * [Embedding the Web Chat](#embedding-the-web-chat)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Webchat Client
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Webchat Client
[ Suggest Edits](/edit/webchat-client)
The JavaScript client enables seamless interaction with the Webchat API directly from your web application. Specifically designed for browser environments, this client allows you to send and receive messages from the bot and subscribe to various events, such as incoming messages.
> ## 📘
>
> This is for advanced use cases where you want to build your own front-end or listen to particular events.
>
> We recommend most people start with the Embedded Webchat or React Components.
Quickstart
[](#quickstart)
1\. Install the package
[](#1-install-the-package)
Install the necessary package from the npm public registry.
npmpnpmyarn
`npm install @botpress/webchat
`
`pnpm add @botpress/webchat
`
`yarn add @botpress/webchat
`
2\. Obtain the Client ID
[](#2-obtain-the-client-id)
To integrate Botpress Webchat Client into your application, you need to obtain your bot's Client ID, which uniquely identifies your bot and enables communication with the Webchat service. Follow these steps to retrieve it:
1. Open your bot in the Botpress Workspace
2. Navigate to the **Webchat** tab
3. Access **Advanced Settings**
4. Copy the **Client ID**
![Botpress interface](https://files.readme.io/c4b8059-Screenshot_2024-08-15_at_9.05.51_AM.png)
3\. Add the code
[](#3-add-the-code)
index.js
`import { getClient } from '@botpress/webchat'
//Add your Client ID here ⬇️
const clientId = "YOUR_CLIENT_ID";
const client = getClient({ clientId })
client.on("message", (message) => {
console.log("Received message", message); // Messages from the bot
});
await client.connect(); // Initialize the client
await client.sendMessage("Hello, Botpress!"); // Send a message to the bot
`
---
API Reference
[](#api-reference)
The Webchat Client provides a set of properties and methods that allow you to manage conversations, send messages, and handle user sessions.
These are the available properties and methods:
| Name               | Description                                                                                                                 |
| ------------------ | --------------------------------------------------------------------------------------------------------------------------- |
| mode               | Defines the mode of the webchat client. 'messaging' for standard chat, and 'pushpin' for pinning messages or conversations. |
| clientId           | A unique identifier for the client, used to associate the client with a specific bot or session.                            |
| apiUrl             | The URL of the API that the webchat client will connect to.                                                                 |
| userId             | The unique identifier of the user, if available.                                                                            |
| conversationId     | The unique identifier of the current conversation, if available.                                                            |
| on                 | A method to listen for specific events emitted by the webchat client.                                                       |
| connect            | Connects the client to the server with optional user credentials and data.                                                  |
| disconnect         | Disconnects the client from the server.                                                                                     |
| getUser            | Retrieves the current user's information.                                                                                   |
| updateUser         | Updates the current user's information.                                                                                     |
| sendMessage        | Sends a text message to the current conversation.                                                                           |
| sendFile           | Sends a file to the current conversation and returns its details.                                                           |
| sendEvent          | Sends a custom event to the current conversation.                                                                           |
| switchConversation | Switches to a different conversation by its ID.                                                                             |
| conversationExists | Checks if a conversation with the specified ID exists.                                                                      |
| newConversation    | Starts a new conversation.                                                                                                  |
| listMessages       | Retrieves a list of messages from the current conversation.                                                                 |
---
Live Demo
[](#live-demo)
[iframe](https://stackblitz.com/github/botpress/documentation-examples/tree/master/examples/webchat-client?embed=1&hideNavigation=1&view=both&file=src%2Fmain.ts "stackblitz.com")
Updated about 2 months ago
---
* [Table of Contents](#)
* * [Quickstart](#quickstart)  
         * [1\. Install the package](#1-install-the-package)  
         * [2\. Obtain the Client ID](#2-obtain-the-client-id)  
         * [3\. Add the code](#3-add-the-code)  
   * [API Reference](#api-reference)  
   * [Live Demo](#live-demo)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Webchat
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Webchat
Manage and configure your webchat deployment settings.
[ Suggest Edits](/edit/webchat-1)
Webchat is the native integration that allows you to deploy your bot on a website.
From this menu, you can test your webchat, make adjustments to its appearance and settings, and generate the code needed to embedded it on your website.
For a more detailed guide on using the webchat, [refer to its official documentation](/docs/webchat-v2).
Updated about 1 month ago
---
What’s Next
* [Webchat v2](/docs/webchat-v2)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Wordpress
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Wordpress
Embedding the Web Chat in a Wordpress website
[ Suggest Edits](/edit/wordpress)
![](https://files.readme.io/f13d67d-image.png)
Prerequisites
[](#prerequisites)
1. A [**Wordpress**](https://wordpress.com) website with a **Business Plan** upgrade for accessing [**WPCode**](https://wordpress.com/plugins/insert-headers-and-footers) plugin to add custom scripts.
2. A [**Botpress**](https://sso.botpress.cloud) account with an active bot.
Installing WPCode Plugin in Wordpress
[](#installing-wpcode-plugin-in-wordpress)
![](https://files.readme.io/08e2904-image.png)
1. Log in to your [**Wordpress**](https://wordpress.com) dashboard.
2. Go to [**WPCode**](https://wordpress.com/plugins/insert-headers-and-footers) and click **Install and activate**.
3. Once activated, you'll notice a new menu item labeled **Code Snippets** on your WordPress dashboard's left-hand sidebar.
Adding the Botpress Web Chat Script
[](#adding-the-botpress-web-chat-script)
![](https://files.readme.io/e94ad0e-image.png)
1. Log in to your [**Botpress**](https://sso.botpress.cloud) account and navigate to your bot's **Integrations** tab.
2. Click on the **Webchat** tile and copy the **Embedded** script from the **Pre-configured** tab.
3. In the WPCode dashboard, navigate to the **Code Snippets** menu item and click **Headers and Footers**.
4. Paste the **Embedded** script in the **Body** section and click **Save Changes**.
Testing the Integration
[](#testing-the-integration)
![](https://files.readme.io/8f740e9-image.png)
1. Navigate to your Wordpress website and refresh the page.
2. You should see the Botpress Web Chat widget on the bottom right corner of your website.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Installing WPCode Plugin in Wordpress](#installing-wpcode-plugin-in-wordpress)  
         * [Adding the Botpress Web Chat Script](#adding-the-botpress-web-chat-script)  
         * [Testing the Integration](#testing-the-integration)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Workspace
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Workspace
Environment to manage and organize bot projects.
[ Suggest Edits](/edit/workspace)
In Botpress, a Workspace is an environment where you can organize, manage, and collaborate on multiple bot projects. It allows teams to collaborate effectively by sharing access to these resources in a defined space.
Each Workspace can contain multiple bots, so you can keep them organized by client, department, or other specific use case. Within a Workspace, you can manage permissions, track integrations, and monitor analytics.
> ## 📘
>
> Workspaces are the billing unit on Botpress
>
> Add-ons purchased by PAYG and Team plan users are distributed at the Workspace level, meaning that they only apply to the bots living in the Workspace in which those add-ons are purchased.
>
> Various Workspaces in a single account can subscribe to different plans and add-ons.
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Utilities
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Utilities
Cards that provide utility in the Studio, and are not part of your bot's workflow.
[ Suggest Edits](/edit/utilities)
Comment
[](#comment)
The Comment card allows you to add a comment to the flow. It is useful to explain the flow to other people or to add notes to yourself.
Pick the Comment Card from the Utility Cards section in the Toolbox and drop it on the flow, or right-click the editor to see the Comment option. Click on the card to edit the content.
You can change the text size, color and style. You can add links, preformatted code and bullet point lists.
Image
[](#image)
The Image card allows you to add an image window to the flow. It prompts you to select a file from your local machine. The image can't be changed later.
Video
[](#video)
The Video card allows you to add a video window to the flow. It accepts YouTube URLs and it's useful for adding relevant content that don't fit in notes or images. The video can't be changed later.
Log
[](#log)
Logs a message to the Logs console and the Emulator for debugging purposes (similar to a console.log inside an execute code card), You can use it to print variables, messages or any other information you need to debug your flow.
Log Message
[](#log-message)
The message you want to log. You can use variables and expressions.
The log message can be a simple text or a JSON object. If you use a JSON object, it will be displayed in a more readable way.
Logging Levels
[](#logging-levels)
Debug
[](#debug)
Use this level to log detailed information about the flow execution. It's useful to debug the flow and understand how it works.
Info
[](#info)
Use this level to log general information about the flow execution. It's useful to understand the flow behavior and the data it's processing.
Warning
[](#warning)
Use this level to log warnings about the flow execution. It's useful to alert about potential issues or unexpected behavior.
Error
[](#error)
Use this level to log errors about the flow execution. It's useful to alert about critical issues that need to be fixed.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Comment](#comment)  
   * [Image](#image)  
   * [Video](#video)  
   * [Log](#log)  
         * [Log Message](#log-message)  
         * [Logging Levels](#logging-levels)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Webchat
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Webchat
[ Suggest Edits](/edit/webchat)
![](https://files.readme.io/1538ac2-image.png)
The Webchat is a widget that you can add to your website to allow your users to interact with your chatbot. It's a great way to provide support to your users and answer their questions.
Prerequisites
[](#prerequisites)
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
* Make sure you've [published your Botpress bot](../docs/create-publish-your-chatbot#publishing-your-bot).
Setting up the Webchat integration in Botpress
[](#setting-up-the-webchat-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Webchat integration then click on the "Install to Bot" button, now go back to your bot.
Setting up the Webchat
[](#setting-up-the-webchat)
Pre-configured Script
[](#pre-configured-script)
**Shareable URL**
You can share your chatbot with people that would like to quickly test your chatbot using the **Shareable Link**.
**Embedded Script**
This script will add the webchat to your website. You can copy the script and paste it in the `<body></body>` tag of your HTML page.
This is the **recommended** way of adding the webchat to your website.
Configurable Script
[](#configurable-script)
The configurable webchat code must be updated manually every time there is a change. We highly recommend using the **Pre-configured** version.
Copy the code from the **Configurable** tab and paste it in the `<body></body>` tag of your HTML page.
Configurable Script Parameters
[](#configurable-script-parameters)
You can customize the webchat by changing/adding the values of the parameters in the script.
| **Parameter**              | **Description**                                                                                                                                                            | **Default value**    | **parameter type** |
| -------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------- | ------------------ |
| stylesheet                 | Provide a path to a stylesheet to customize the webchat                                                                                                                    | \-                   | string             |
| showConversationsButton    | If false, will hide the conversation list pane                                                                                                                             | true                 | boolean            |
| showTimestamp              | If true, will display a timestamp under each messages                                                                                                                      | false                | boolean            |
| enableTranscriptDownload   | Allows the user to download the conversation history                                                                                                                       | true                 | boolean            |
| enableConversationDeletion | Allows the user to delete its conversation history                                                                                                                         | false                | boolean            |
| closeOnEscape              | Close the webchat when pressing the Esc key                                                                                                                                | true                 | boolean            |
| botName                    | Displays the bot name to the right of its avatar                                                                                                                           | \-                   | string             |
| composerPlaceholder        | Allows to set a custom composer placeholder                                                                                                                                | 'Reply to {botname}' | string             |
| avatarUrl                  | Allow to specify a custom URL for the bot's avatar                                                                                                                         | \-                   | string             |
| locale                     | Force the display language of the webchat (en, fr, ar, ru, etc..)  Defaults to the user's browser language if not set Set to 'browser' to force use the browser's language | 'browser'            | string             |
| botConversationDescription | Small description written under the bot's name                                                                                                                             | \-                   | string             |
| hideWidget                 | When true, the widget button to open the chat is hidden                                                                                                                    | false                | boolean            |
| disableAnimations          | Disable the slide in / out animations of the webchat                                                                                                                       | false                | boolean            |
| useSessionStorage          | Use sessionStorage instead of localStorage, which means the session expires when tab is closed                                                                             | false                | boolean            |
| containerWidth             | Sends an event to the parent container with the width provided                                                                                                             | 360                  | string OR number   |
| layoutWidth                | Sets the width of the webchat                                                                                                                                              | 360                  | string OR number   |
| enablePersistHistory       | When enabled, sent messages are persisted to local storage (recall previous messages)                                                                                      | true                 | boolean            |
| className                  | CSS class to be applied to iframe                                                                                                                                          | \-                   | string             |
| disableNotificationSound   | If true, chat will no longer play the notification sound for new messages.                                                                                                 | false                | boolean            |
| googleMapsAPIKey           | Google Maps API Key required to display the map. It will display a link to Google Maps otherwise.                                                                          | \-                   | string             |
| website                    | Displays the bot's website in the conversation page                                                                                                                        | \-                   | string             |
| phoneNumber                | Displays the bot's contact phone number in the conversation page                                                                                                           | \-                   | string             |
| termsConditions            | Displays the bot's terms of service in the conversation page                                                                                                               | \-                   | string             |
| privacyPolicy              | Displays the bot's privacy policy in the conversation page                                                                                                                 | \-                   | string             |
| emailAddress               | Displays the bot's email address in the conversation page.                                                                                                                 | \-                   | string             |
| coverPictureUrl            | Displays the bot's cover picture in the conversation page                                                                                                                  | \-                   | string             |
| showBotInfoPage            | Enables the bot's information page in the webchat                                                                                                                          | false                | boolean            |
| showCloseButton            | Display's the webchat close button when the webchat is opened                                                                                                              | true                 | boolean            |
| userData                   | Passes the user data to the bot                                                                                                                                            | \-                   | object             |
| customUser                 | Passes the custom user data to the bot                                                                                                                                     | \-                   | object             |
Domain Whitelisting
[](#domain-whitelisting)
> ## 💼
>
> Team Plan
>
> This feature is only available to Team plan subscribers.
The domain whitelisting feature ensures that only approved domains can host and utilize the chatbot. This enhances security and control, ensuring that your chatbot is only available on trusted websites.
Configuring Allowed Origins
[](#configuring-allowed-origins)
1. Navigate to the Webchat integration settings on your Dashboard
2. Expand the 'Advanced Settings' menu
3. To add a domain (or an allowed origin), type the domain name in the provided field. You can provide multiple allowed origins or whitelisted domains.
Make sure to save the configuration after you've indicated which domains you want to whitelist.
Customizing/Controlling the Webchat
[](#customizingcontrolling-the-webchat)
For more information on customizing the webchat, please refer to the [Webchat developer documentation](../docs/controlling-web-chat-using-javascript).
Updated 3 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Webchat integration in Botpress](#setting-up-the-webchat-integration-in-botpress)  
   * [Setting up the Webchat](#setting-up-the-webchat)  
         * [Pre-configured Script](#pre-configured-script)  
         * [Configurable Script](#configurable-script)  
         * [Configurable Script Parameters](#configurable-script-parameters)  
         * [Domain Whitelisting](#domain-whitelisting)  
         * [Customizing/Controlling the Webchat](#customizingcontrolling-the-webchat)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Usage
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Usage
See your monthly Workspace limits.
[ Suggest Edits](/edit/usage-2)
The Usage tab provides a view of the computational resources used by all of the bots in your Workspace. Having this information is useful to understand the performance of each chatbot in your Workspace and to plan for future growth. The resources are grouped by the following categories:
AI Spend
[](#ai-spend)
The AI Spend resource shows the amount that service providers charge for the consumption of tokens used to perform actions powered by AI models like generate text and retrieve answers from knowledge bases. AI Spend cost is charged at cost, meaning you pay for the exact amount of tokens used by your bot without any additional markup. You can find additional information about the token consumption of each action taken by your bot in the logs available through the emulator.
AI Spend includes a free monthly credit of 5 USD per month. You can increase this limit by following these steps:
1. Navigate to your Dashboard
2. Navigate to the Usage tab
3. Click on 'Manage spending limit'
4. Change the amount of your 'AI Spend Limit'. You will be prompted to input a credit card.
AI Spend is capped at 100 USD per month. If you plan to exceed 100 USD of AI Spend in a given calendar month, please [contact us](https://botpress.com/contact-us) to increase this limit. You can estimate your AI Spend using our [AI Spend Calculator](https://botpress.com/ai-spend-calculator).
File Storage
[](#file-storage)
The File Storage section shows the amount of storage in Megabytes (MB) used across your Workspace, as well as the maximum storage limit. Files included in this storage include photos, videos, and audio files that you've uploaded to be sent by your chatbot.
Table Rows
[](#table-rows)
The Table Row section shows the number of rows in the bot's tables and the limit. It accounts for total the number of rows in all of your [chatbot Tables](https://botpress.com/docs/cloud/studio/tables).
Vector DB Storage
[](#vector-db-storage)
The Vector Database Storage section shows the maximum storage available for Knowledge Base documents. It accounts for the total number of vectors (condensed pieces of your content) in all of your [Knowledgebase](https://botpress.com/docs/cloud/studio/knowledge-base) documents as well as searchable columns in your tables.
This value is expressed in MB for convenience, but the actual billing unit is a measure of vectorized storage, used for performing RAG (Retrieval Augmented Generation) functions on your Knowledge Base(s).
Incoming Messages & Events
[](#incoming-messages--events)
The Incoming Messages & Events section shows the number of times the chatbot has been invoked in any channel and the maximum amount of times it can be invoked before it will stop responding. It counts new conversations, conversations resumed after a [Timeout](https://botpress.com/docs/cloud/studio/chatbot-settings/#inactivity-timeout-minutes), and conversations started by [Triggers](https://botpress.com/docs/cloud/toolbox/events-triggers).
Collaborators
[](#collaborators)
Collaborators indicates the maximum amount of users that can collaborate in this Workspace. Adding or removing collaborators will increase or decrease this number in real time.
Bot Count
[](#bot-count)
Bot Count indicates the maximum number of bots this Workspace can hold. Once you reach the maximum number of bots, you can purchase additional slots, or delete any unused bots to make room for new ones.
Always Alive
[](#always-alive)
The Always Alive usage limit indicates how many remaining bots you can allocate the Always Alive status to.
What is Always Alive?
[](#what-is-always-alive)
Botpress bots are powered by remote, virtual compute instances. Every time your bot begins a conversation, for example when a Trigger is activated or a new user sends a message, Botpress spins up a new instance for that bot. This is known as a 'cold start', which refers to the initial startup process when a virtual machine (VM) or a serverless function is launched for the first time, or after it has been idle and terminated. During a cold start, the system must allocate resources, initialize the environment, load necessary code, and perform any required configuration before the instance is ready to handle requests or tasks.
Always Alive reserves an instance for your bot so that it can bypass this cold start and maintains a ready-to-use instance. The end result is that the first message sent and received from your bot are processed much faster.
Always Alive can be purchased and allocated on a per-bot basis.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [AI Spend](#ai-spend)  
   * [File Storage](#file-storage)  
   * [Table Rows](#table-rows)  
   * [Vector DB Storage](#vector-db-storage)  
   * [Incoming Messages & Events](#incoming-messages--events)  
   * [Collaborators](#collaborators)  
   * [Bot Count](#bot-count)  
   * [Always Alive](#always-alive)  
         * [What is Always Alive?](#what-is-always-alive)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Webchat v1 (deprecated)
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Webchat v1 (deprecated)
[ Suggest Edits](/edit/web-chat-v1old)
Webchat v1 is still available for use on your bots but will not be receiving updates as we transition to webchat v2 for all bots.
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Profile Setting
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Profile Setting
[ Suggest Edits](/edit/user-profile)
Update Profile
[](#update-profile)
1. Click on the profile icon in the top right corner of your botpress dashboard and click on the `Update Profile` button.
2. To change the profile image, click on the `Upload Image` button and select the image you want to upload.
3. To change the profile name, enter the new name in the `Full Name` field.
4. Click on the `Confirm` button to save the changes.
Link/Unlink Social Accounts
[](#linkunlink-social-accounts)
1. Click on the profile icon in the top right corner of your botpress dashboard and click on the `Link Social Accounts` button.
2. Click on the social media platform you want to link/unlink. (Github, Google, Microsoft, LinkedIn)
3. Enter the credentials for the social media platform.
Change Profile Password
[](#change-profile-password)
1. Click on the profile icon in the top right corner of your botpress dashboard and click on the `Change Password` button.
2. Enter the new password in the `Password` field.
3. Re-enter the new password in the `Confirm Password` field.
4. Click on the `Confirm` button.
Personal Access Tokens
[](#personal-access-tokens)
1. Click on the profile icon in the top right corner of your botpress dashboard and click on the `Personal Access Tokens` button.
2. Click on the `Generate New Token` button.
3. Enter the note for the token (Optional) and click on the `Generate Token` button.
4. Copy the token and store it in a safe place.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Update Profile](#update-profile)  
   * [Link/Unlink Social Accounts](#linkunlink-social-accounts)  
   * [Change Profile Password](#change-profile-password)  
   * [Personal Access Tokens](#personal-access-tokens)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Versions
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Versions
View, compare, and revert to previous versions of your bot.
[ Suggest Edits](/edit/versions-1)
Versions in Botpress help you track, manage, and control changes made to your bots.
They provide a detailed log of updates, allowing you to view past versions, compare changes, and revert to previous states if necessary. This feature is essential for collaborative bot development, ensuring transparency, accountability, and easy recovery from unintended changes.
Accessing Versions
[](#accessing-versions)
The Versions menu can be found on the left-hand menu by clicking on the icon that looks like a clock.
Creating a new Version
[](#creating-a-new-version)
Versions are created in two ways:
1. By clicking on the '+' in the Versions menu and manually creating a new Version
2. Automatically, every time you publish your bot
It's a good idea to annotate every saved Version you have and indicate any of the major changes or updates made.
Reverting to a previous Version
[](#reverting-to-a-previous-version)
From the Versions menu, you can revert to a previous version by clicking into it and restoring to a previous Version. Note that reverting to a previous version will completely overwrite your current bot, including any unsaved changes you may have made.
Botpress cannot restore lost or overwritten bot Versions.
> ## 📘
>
> Note
>
> Pay-as-you-go users have access to 3 saved Versions.
>
> Team Plan subscribers have access to 15 saved Versions.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Accessing Versions](#accessing-versions)  
   * [Creating a new Version](#creating-a-new-version)  
   * [Reverting to a previous Version](#reverting-to-a-previous-version)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Variables
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Variables
[ Suggest Edits](/edit/variables)
Botpress uses variables to store information from one place and use it in other parts of a flow. Variables help make conversations more personalized and help track information about users. They can also help connect with third-party APIs and data sources.
Variable Scopes
[](#variable-scopes)
Botpress also includes different types of variables. These Variable types differ in scope or where they can be accessed in your bot's flows.
Creating Variables in Botpress
[](#creating-variables-in-botpress)
1. Open up the Variables tab from the sidebar and click the **+** icon in the Variables section.
2. A new window will appear, allowing you to formulate a new Variable.
3. Assign a suitable scope (Workflow, Bot or User) to your Variable, select the Data Type (see below table), give it a name, and click **Add** to create the Variable.
4. (Optional) From the Additional Settings, you can also initialize your Variable with a default value.
Using Variables in Botpress
[](#using-variables-in-botpress)
Once the Variable is established, employ `{{workflow.variablename}}` or `@workflow.variablename` to render it in a send message card.
Data Types for Variables
[](#data-types-for-variables)
Botpress variables are typed, meaning they are limited in what data they can hold. Not only are these data types important to ensure the code behind Botpress runs smoothly, but these types also help AI tasks generate better results. Here are the different data types available for Botpress variables:
| Type    | Description                                                                                                                                                                                                                                                     |
| ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| String  | Values that are treated as text. Strings can contain any amount of letters, numbers, or special characters.  Example uses: Storing a user's name, storing an AI task's generated message.                                                                       |
| Boolean | Variables can be true or false, with a lowercase 't' or 'f'. Example uses: Storing if a user is a returning customer, storing whether the bot has greeted the user or not                                                                                       |
| Number  | Variables that are numeric, either with or without decimal places. Example uses: Storing a user's phone number, storing an address's area code                                                                                                                  |
| Date    | Variables that are a single date or date and time. Botpress uses ISO 8601 date/time format, such as 20220921T10:34:14 for 21 September 2023 at 10:34 AM (with 14 seconds). Example uses: Storing when the user starts a chat, storing a user's appointment date |
| Object  | Variable that is a collection of key-value pairs. Useful when dealing with code and written like {key: value}. Example uses: Storing a user's profile, storing the results of an API call                                                                       |
| Array   | Variable that is a collection of other, similar variables. Arrays can contain strings, like \[“a”, “b”, “c”\], or Objects like \[{key:value},{key:value}\]. Example uses: Storing a user's past messages, storing options for the user to choose from           |
| Enum    | Variable that can be one of a set number of choices. Example uses: Storing days of the week, storing items available from a food menu                                                                                                                           |
| Pattern | Variable that uses Regular Expressions/Regex to store a special pattern. This pattern can match certain words or numbers. Example uses: Storing account numbers, storing flight numbers                                                                         |
Workflow Variables
[](#workflow-variables)
Workflow Variables are created and used only within a single workflow. These variables are great for single-use or in standalone flows, such as:
1. Storing an AI Task's output
2. Saving the user's answer to a question
3. Organizing data returned from an API call
4. Saving flags or tags that track the conversation
> ## 📘
>
> Info
>
> Workflow variables are not accessible in any workflow other than the one they were created in. For example, a workflow Variable created in a separate workflow will not be accessible in **Main**.
Creating a Workflow Variable
[](#creating-a-workflow-variable)
To create a Variable in your bot's workflow, you can follow these steps:
1. Select the appropriate workflow from the Flows section in the Side Panel.
2. Click on the **+** icon in the Variables section, at the bottom of the Side Panel.
3. Give your Variable a name, pick a type and click **Add** to create the Variable. (Default scope is Workflow)
4. Once the Variable is created, you can use `{{workflow.variablename}}` or `@workflow.variablename` to display it in a send message card.
Input and Output Workflow Variables
[](#input-and-output-workflow-variables)
Workflows can have inputs and outputs to help pass information throughout the bot. This can be useful if your workflow returns information like a verified phone number, or requires information like a user id.
To mark an Input Variable
[](#to-mark-an-input-variable)
1. Go into your new workflow(not Main) and create a Variable and Click it's **Entry** node.
2. In the inspector panel, click on the Variable you want to make an input. It should get a blue border and appear in the **Entry** node.
3. When you call this workflow from another flow, there should be an input box for that Variable in the workflow's card. This will let you pass information or another Variable into that workflow.
To mark an Output Variable
[](#to-mark-an-output-variable)
1. Go into your new workflow(not Main) and create a Variable and click on the **Exit** node.
2. In the inspector panel, click on the Variable you want to make an output. It should get a blue border and appear in the **Exit** node.
3. When you call this workflow from another flow, the output Variable will be accessible by typing `{{workflow.<workflow-cardName>.<variablename>}}`, replacing `<workflow-cardName>` and `<variablename>` with the name of the card that represents your workflow and Variable respectively.
User Variables
[](#user-variables)
User Variables are variables that follow a user between conversations. For example, if a user speaks with your bot on Monday and Wednesday, any user variables set on Monday will still be accessible on Wednesday. User variables are great for storing data that doesn't change very often, such as:
Storing users' personal details or id numbers
1. Collecting tags or notes from past conversations
2. Storing extra flags like **VIP customer**
3. Saving language preferences
Creating a User Variable
[](#creating-a-user-variable)
1. Open up the Variables tab and navigate to the **+** icon in the Variables section.
2. Change the scope to **User**, select the Data Type, give it a name, and click **Add** to create the Variable.
Using User Variables
[](#using-user-variables)
Once the User Variable is established, employ `{{user.variablename}}` or `@user.variablename` to render it in a send message card.
Bot Variables
[](#bot-variables)
Bot Variables can be accessed by all users of the chatbot across all conversations. They are typically used for configuration and developer information, such as:
1. Storing the endpoint for the bot's API calls
2. Saving bot's version number
3. Storing the bot's name
4. Metadata about the bot/services
Bot variables are not encrypted or stored securely. Do not save secrets like API keys or passwords in bot variables - use **configuration variables** instead!
Creating a Bot Variable
[](#creating-a-bot-variable)
1. Open up the Variables tab and navigate to the **+** icon in the Variables section.
2. Change the scope to **Bot**, select the Data Type, give it a name, and click **Add** to create the Variable.
Using Bot Variables
[](#using-bot-variables)
Bot variables can be used in text and other cards just like user variables - with either `@bot.variablename` or `{{bot.variablename}}`.
Session Variables
[](#session-variables)
Session variables are available in all flows, but only for one conversation. These variables are great for data used throughout a conversation, such as:
1. Collecting items in a virtual shopping cart for the user to order
2. Saving raw data from an API call for further processing
3. Storing chat history for that conversation
4. Saving an order number or policy number
Creating a Session Variable
[](#creating-a-session-variable)
Session variables can only be created inside of an **Execute Code** card.
To create one, simply write: `event.state.session.variablename = "Hello World"` or for short `session.variablename = "Hello World"`
To use a Session Variable in a text or other card, enclose it in double curly brackets like `{{event.state.session.variablename}}` or for short `{{session.variablename}}`
Configuration Variables
[](#configuration-variables)
Configuration variables are a special kind of secure bot Variable. They can also be managed from the Cloud Dashboard without opening the bot. Configuration variables can store secrets like:
* API Tokens
* Private IP Addresses
* Database usernames and passwords
Creating a Configuration Variable (or Environment Variable)
[](#creating-a-configuration-variable-or-environment-variable)
1. Click the Botpress icon in the upper-left corner and select **Chatbot Settings**
2. Scroll down and click on the button to add a Configuration Variable. Fill in the Variable's name and value and click **Done**.
You can use **env.key** in your code to get the value of the Configuration Variable. To use it in an Execute Code Card, you can write env.key to access its value.
Once a configuration Variable is created, you can access and manage it from the cloud admin dashboard. Just select your bot and then click on the tab for **Configuration Variables.**
Passing Variables between Flows
[](#passing-variables-between-flows)
1. In your target workflow, define an input Variable from the workflow properties window.
2. Toggle it `ON` on the `Entry node` of the target workflow.
3. Now, on the `exit` node of the parent workflow, the one that brings the user to the target workflow, match the parent workflow Variable with the target workflow input Variable.
4. Now, when you call the target workflow from the parent workflow, you will see the input Variable in the card. You can pass a value or a Variable to it.
Using Variables in Code Card
[](#using-variables-in-code-card)
Variables in code follow the pattern `variabletype.variablename`. Here's a breakdown and examples of how to use these:
1\. Assigning a Value to a Variable
[](#1-assigning-a-value-to-a-variable)
This is typically how you'd initialize a variable or change its value.
JavaScript
`workflow.orderNumber = 12345
session.cartTotal = 59.99
user.lastName = 'Smith'
bot.version = '1.2.3'
env.databaseURL = 'https://example.com/db'
`
2\. Using Variables in Conditional Statements
[](#2-using-variables-in-conditional-statements)
This checks the value of a variable and executes code accordingly.
JavaScript
`if (user.firstName === 'John') {
console.log('Hello John!')
} else {
console.log('Welcome, user!')
}
`
3\. Using Variables in Functions
[](#3-using-variables-in-functions)
Here, you might pass a variable as a function argument or use it inside a function.
JavaScript
`function greetUser(firstName) {
console.log('Hello, ' + firstName + '!')
}
greetUser(user.firstName)
`
4\. Combining Variables
[](#4-combining-variables)
You might want to combine or concatenate variables.
JavaScript
`var fullName = user.firstName + ' ' + user.lastName
//or
var welcomeMessage = 'Hello, ' + user.firstName + ' ' + user.lastName + '!'
`
5\. Checking Variable Type
[](#5-checking-variable-type)
Botpress might throw an error if types don't match, you can use type checking before assigning values.
JavaScript
`if (typeof workflow.userAcctId === 'number') {
workflow.userAcctId = 67890 // This is okay.
} else {
console.error('Invalid type for userAcctId!')
}
`
6\. Using Variables with External APIs
[](#6-using-variables-with-external-apis)
If your bot interacts with external services, you might use an environment variable like env.apiKey.
JavaScript
`` const apiKey = env.API_KEY
const apiUrl = env.API_URL
const config = {
headers: {
Authorization: `Bearer ${apiKey}`,
},
}
const response = await axios.get(apiUrl, config)
const data = response.data
// Process the data as needed
// ...
// Example: Log the response data
console.log(data)
``
Special Variables
[](#special-variables)
Botpress makes available several different variables that can be used in your bot's code. These variables are useful for debugging and for accessing information about the user and conversation.
| Path                                                                             | Type        | Description                                                                                                                                                                                                                                |
| -------------------------------------------------------------------------------- | ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| event.preview                                                                    | Event       | The last message sent by the user. It will be replaced every time there is a new message.                                                                                                                                                  |
| conversation.SummaryAgent.summary                                                | Agent       | Summary of the conversation created by the [Summary Agent](../docs/agents#summary-agent). It's an explanation of what happened.                                                                                                            |
| conversation.SummaryAgent.transcript                                             | Agent       | Transcript of the conversation going back a certain amount of turns.                                                                                                                                                                       |
| turn.KnowledgeAgent.answer                                                       | Agent       | The answer provided by the [Knowledge Agent](../docs/agents#knowledge-agent)                                                                                                                                                               |
| turn.KnowledgeAgent.responded                                                    | Agent       | Wether the Knowledge Agent has responded automatically to a user question. Its value will be true or false                                                                                                                                 |
| turn.KnowledgeAgent?.answer?.length                                              | Agent       | The amount of characters in the Knowledge answer. Use this in an [Expression](../docs/transition#expression) to check if there is an answer in the KB. Optionally add ! to start of the code in order to check if there was NOT an answer. |
| turn.KnowledgeAgent.citations                                                    | Agent       | A list of citations for the Knowledge answer.                                                                                                                                                                                              |
| user.TranslatorAgent.language                                                    | Agent       | The current user language code in ISO 639-1 format. [More about the Translator Agent](../docs/agents#translator-agen)                                                                                                                      |
| user.TranslatorAgent.language = 'en'                                             | Agent       | This code snippet set's the user language to English. Replace with any language code in the ISO 639-1 format                                                                                                                               |
| event.kb.results.map((a) => a.dsFriendlyName + '\\n' + a.content).join('\\n\\n') | Event       | This code snippet returns the raw content that generated the final Knowledge answer.                                                                                                                                                       |
| event.tags.conversation\['whatsapp:userPhone'\]                                  | Integration | The user's phone number on WhatsApp. Includes the international code.                                                                                                                                                                      |
| event.tags.conversation\['whatsapp:phoneNumberId'\]                              | Integration | The phone number Id of the bot on WhatsApp.                                                                                                                                                                                                |
Updated 4 months ago
---
* [Table of Contents](#)
* * [Variable Scopes](#variable-scopes)  
         * [Creating Variables in Botpress](#creating-variables-in-botpress)  
         * [Using Variables in Botpress](#using-variables-in-botpress)  
   * [Data Types for Variables](#data-types-for-variables)  
   * [Workflow Variables](#workflow-variables)  
         * [Creating a Workflow Variable](#creating-a-workflow-variable)  
         * [Input and Output Workflow Variables](#input-and-output-workflow-variables)  
   * [User Variables](#user-variables)  
         * [Creating a User Variable](#creating-a-user-variable)  
         * [Using User Variables](#using-user-variables)  
   * [Bot Variables](#bot-variables)  
         * [Creating a Bot Variable](#creating-a-bot-variable)  
         * [Using Bot Variables](#using-bot-variables)  
   * [Session Variables](#session-variables)  
         * [Creating a Session Variable](#creating-a-session-variable)  
   * [Configuration Variables](#configuration-variables)  
         * [Creating a Configuration Variable (or Environment Variable)](#creating-a-configuration-variable-or-environment-variable)  
   * [Passing Variables between Flows](#passing-variables-between-flows)  
   * [Using Variables in Code Card](#using-variables-in-code-card)  
         * [1\. Assigning a Value to a Variable](#1-assigning-a-value-to-a-variable)  
         * [2\. Using Variables in Conditional Statements](#2-using-variables-in-conditional-statements)  
         * [3\. Using Varia
Conditional Statements](#2-using-variables-in-conditional-statements)  
         * [3\. Using Variables in Functions](#3-using-variables-in-functions)  
         * [4\. Combining Variables](#4-combining-variables)  
         * [5\. Checking Variable Type](#5-checking-variable-type)  
         * [6\. Using Variables with External APIs](#6-using-variables-with-external-apis)  
   * [Special Variables](#special-variables)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Vonage
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Vonage
[ Suggest Edits](/edit/vonage)
![](https://files.readme.io/df1acbf-image.png)
Prerequisites
[](#prerequisites)
* A [Vonage Account](https://dashboard.nexmo.com/sign-up)
* A [Vonage Application](https://dashboard.nexmo.com/applications/new)
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Setting up the Vonage integration in Botpress
[](#setting-up-the-vonage-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Vonage integration then click on the "Install to Bot" button, now go back to your bot.
Setting up Vonage
[](#setting-up-vonage)
API credentials
[](#api-credentials)
1. Go to your [API Settings](https://dashboard.nexmo.com/settings).
2. Copy paste the API key to the **API Key** channel configuration
3. Copy paste the API secret from the **Account credentials** section to the **API Secret** channel configuration
4. Copy paste the signature secret from the **Signed webhooks** section to the **Signature Secret** channel configuration
Save Configuration
[](#save-configuration)
Channel configuration is complete, you can now click **Save**
Webhook Configuration
[](#webhook-configuration)
Sandbox
[](#sandbox)
You can use the Vonage sandbox to test you channel with WhatsApp
1. Check the **Use Testing API** box in your channel configuration
2. Go to your [Sandbox Settings](https://dashboard.nexmo.com/messages/sandbox)
3. Copy paste the webhook url provided in the channel configuration UI to the **Inbound** and **Status** fields in the **Webhooks** section
That's it, you may now start chatting with your bot on Vonage!
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Vonage integration in Botpress](#setting-up-the-vonage-integration-in-botpress)  
   * [Setting up Vonage](#setting-up-vonage)  
         * [API credentials](#api-credentials)  
         * [Save Configuration](#save-configuration)  
   * [Webhook Configuration](#webhook-configuration)  
         * [Sandbox](#sandbox)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Usage
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Usage
Documentation and resources for available integrations.
[ Suggest Edits](/edit/using-integrations)
This section lists resources and documentation for the available integrations in the Botpress Studio.
Navigate to the integration you'd like to learn more about using the navigation in the sidebar.
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Viber
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Viber
[ Suggest Edits](/edit/viber)
![](https://files.readme.io/7a8b822-image.png)
Prerequisites
[](#prerequisites)
* A [Viber account](https://www.viber.com/)
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Setting up the Viber integration in Botpress
[](#setting-up-the-viber-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Viber integration then click on the "Install to Bot" button, now go back to your bot.
The Viber integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Viber.
* **Webhook URL**: The URL for receiving data in Botpress. (You shall not be using it)
* **Auth Token**: The authentication token of your Viber bot.
* **Bot Name**: The name of your Viber bot.
* **Bot Avatar URL**: The URL of the avatar of your Viber bot.
Setting up Viber
[](#setting-up-viber)
1. Visit the [Viber Admin panel](https://partners.viber.com/login/) and click on **Create a Bot Account**.
2. Fill in the required details. Bot Avatar, Account Name, URI, Category, Subcategory, Language, Account Description, Email Address and Location.
3. Copy the Authentication Token and paste it in the integration settings page in Botpress.
4. Add a Bot Name (required) and a Bot Avatar URL (optional).
5. Click **Save**.
That's it, you may now start chatting with your bot on Viber!
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Viber integration in Botpress](#setting-up-the-viber-integration-in-botpress)  
   * [Setting up Viber](#setting-up-viber)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Tables
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Tables
[ Suggest Edits](/edit/tables)
Tables are an essential feature in the explorer, functioning as a local database within your chatbot's environment. They provide structured storage for various types of data that can be accessed and manipulated as required within your workflows.
They are particularly useful for storing information that needs to be persisted across multiple sessions, such as user profiles, transaction histories, and other types of data that need to be retrieved and updated over time.
> ## 📘
>
> Note
>
> You can create up to **10 tables** with **20 columns** and **10,000 rows** in the **Free Plan**. [Get in touch](https://botpress.com/contact-us) if you want to increase the limits. However, the 20 columns per table is a hard limit that can't be increased.
Creating a Table
[](#creating-a-table)
To add a new table, go to the explorer menu and select `Add Table`. You can then give your table a name and add fields to it. Each field has a name and a type. The type determines the kind of data that can be stored in the field. For example, a field with the type `String` can store any text value, while a field with the type `Number` can only store numeric values.
Making Fields Searchable
[](#making-fields-searchable)
You can make a field searchable by checking the `Searchable` checkbox. This will allow you to search for records based on the values in the field. For example, if you have a field called `Name` and you make it searchable, you can search for records based on the name of the person. This is only available for fields with the type `String`.
Types of Fields (Columns)
[](#types-of-fields-columns)
There are several types of fields you can add to a table. Each field type has a specific purpose and can only store certain types of data. These are the field types you can choose from: `String`, `Number`, `Boolean`, `Date`, and `Object`.
> ## 🚧
>
> Warning
>
> The number of columns has a hard limit of **20 columns** per table.
Filtering Records
[](#filtering-records)
Table filters are a powerful feature that allows you to refine and display only the records that meet certain criteria. Filters can be based on specific conditions, such as date ranges, text matches, and numerical comparisons.
Logical Operators
[](#logical-operators)
* **AND**: Use the AND operator when you want all conditions to be true for a record to be displayed. For example, filtering by `createdAt` AND `status` will only show records that match both conditions.
* **OR**: Use the OR operator to display records that match any one of multiple conditions. For example, filtering by `createdAt` OR `updatedAt` will show records that match either one of the conditions.
Types of Rules
[](#types-of-rules)
Rules define the individual conditions applied to each column of data.
* `is equal to`: Shows records where the field is equal to the specified value.
* `is not equal to`: Shows records where the field is not equal to the specified value.
* `less than`: Shows records where the field is less than the specified value.
* `less than or equal to`: Shows records where the field is less than or equal to the specified value.
* `greater than`: Shows records where the field is greater than the specified value.
* `greater than or equal to`: Shows records where the field is greater than or equal to the specified value.
* `in`: Shows records where the field matches any of the specified values.
* `not in`: Shows records where the field does not match any of the specified values.
* `is null`: Shows records where the field is empty.
* `is not null`: Shows records where the field is not empty.
Rule Groups
[](#rule-groups)
* **Group**: A group is a collection of rules combined by a logical operator (AND/OR). You can nest groups to create complex filters.
Creating a Filter
[](#creating-a-filter)
1. Click on the `Filter` button to expand the filter menu.
2. Select a logical operator (AND/OR) from the dropdown.
3. Choose a field to filter by (e.g., `createdAt`).
4. Select a rule (e.g., `is equal to`).
5. Enter the required value or select from a calendar if it's a date field.
6. To add another rule within the same logical condition, click the `+ Rule` button.
7. To create a nested group of conditions, click the `+ Group` button.
8. Apply the filter by clicking the `Apply filter` button.
Manually Editing Filters
[](#manually-editing-filters)
Click on **Edit Manually** to view and edit the filter in JSON format. You can then copy this JSON filter and use it in your table operations via code.
Operations on Tables - via the Interface
[](#operations-on-tables---via-the-interface)
Add records to a table
[](#add-records-to-a-table)
Once you've created a table, you can add records to it. To do this, click on the table in the explorer menu. You'll then see a list of all the records in the table. Click on the `Add Record` button to add a new record. You can then enter the values for each field in the record.
Update records in a table
[](#update-records-in-a-table)
Double click on a a table cell or press click it and press `Enter` to see an input that allows you to change the cell value. Once you are done, press `Enter` again or click away to save the new value.
Delete records from a table
[](#delete-records-from-a-table)
`Right Click` on the Record and select `Delete Record` to delete a record from a table.
Operations on Tables - via Cards
[](#operations-on-tables---via-cards)
Check out the [Table Cards documentation](../docs/table-cards) to learn more about operations with cards.
Operations on Tables - via Botpress Client
[](#operations-on-tables---via-botpress-client)
You can also interact with tables using the Botpress Client. Here are some of the functions you can use to interact with tables:
listTables
[](#listtables)
To list all the tables in the bot, use the `listTables` function. This function will return an array of all the tables in the bot.
JavaScript
`try {
const tables = await client.listTables({})
console.log('Tables:', tables)
} catch (err) {
console.error('Error fetching tables', err)
}
`
Create Table Rows
[](#create-table-rows)
Execute the following query to create one or multiple rows. The response will include the inserted rows, along with any encountered errors or warnings during the operation (e.g., unrecognized fields)
JavaScript
`const { rows, errors, warnings } = await client.createTableRows({
table: 'Data1Table',
rows: [
{
name: 'test'
}
]
})
`
Find & Filter Table Rows
[](#find--filter-table-rows)
To find and filter rows in a table, use the `findTableRows` function. You can specify the limit (number of records to return) and the offset (number of rows to start from).
JavaScript
`const { rows, limit, offset, count } = await client.findTableRows({
table: 'Data1Table',
limit: 50,
offset: 0,
filter: {},
orderBy: 'row_id',
orderDirection: 'asc'
})
`
Utilize filters to conduct more refined queries for specific rows, employing a MongoDB-like syntax. The query builder aids in understanding available operations and constructing the filter.
JavaScript
`const { rows, limit, offset, count } = await client.findTableRows({
table: 'Data1Table',
filter: {
// Retrieve rows where date is greater than a specific date
updatedAt: { gte: '2024-01-01' },
// Or more complex conditions, such as name starting with 'a' or 'b', or 'isActive' being true
$or: [{ name: { $regex: '^a' } }, { name: { $regex: '^b' } }, { isActive: true }]
}
})
`
The "search" property allows for a partial text search across the table. The query returns multiple results, each accompanied by a similarity score to indicate relevance.
JavaScript
`const { rows, limit, offset, count } = await client.findTableRows({
table: 'Data1Table',
search: 'John Doe'
})
`
Projection & Aggregation
[](#projection--aggregation)
Employ the group property for projections and aggregations. The following example demonstrates returning a single row with requested data.
JavaScript
`const { rows } = await client.findTableRows({
table: 'Data1Table',
group: {
id: 'count',
name: ['unique', 'count'], // will return a list of unique values & the total count
updatedAt: ['min', 'max'] // Retrieves the earliest and latest date
}
})
// Output variables are named after the field, suffixed with the operation
const oldestChange = rows[0].updatedAtMin
const mostRecentChange = rows[0].updatedAtMax
const count = rows[0]['nameCount']
const uniqueValues = rows[0]['nameUnique']
`
| Column    | Type   | Key | Count | Sum | Avg | Max | Min | Unique |
| --------- | ------ | --- | ----- | --- | --- | --- | --- | ------ |
| id        | number | ✔️  | ✔️    | ✔️  | ✔️  | ✔️  | ✔️  | ✔️     |
| createdAt | date   | ✔️  | ✔️    | ✔️  | ✔️  |     |     |        |
| updatedAt | date   | ✔️  | ✔️    | ✔️  | ✔️  |     |     |        |
| name      | string | ✔️  | ✔️    | ✔️  | ✔️  |     |     |        |
**Key**: Projections are grouped by keys (ex: date)
**Count**: Returns the total number of non-null values
**sum**: Returns the sum of all values
**Avg**: Returns the average of all values
**Max**: Returns the maximum value
**Min**: Returns the minimum value
**Unique**: Returns a list of unique values
Providing one or multiple keys yields more specific results.
JavaScript
`const { rows } = await client.findTableRows({
table: 'Data1Table',
group: {
someField: 'key', // Either provide a single operation
someNumber: ['avg', 'sum'] // Or multiple operations
}
})
// Returns multiple rows for each unique combination of keys
const result = rows.map((row) => {
const { someFieldKey, someNumberAvg, someNumberSum } = row
})
`
Update Table Rows
[](#update-table-rows)
This operation updates rows based solely on their numeric IDs.
JavaScript
`const { rows, errors, warnings } = await client.updateTableRows({
table: 'Data1Table',
rows: [
{
id: 1,
name: 'test'
}
]
})
`
Delete Table Rows
[](#delete-table-rows)
Rows can be deleted from a table in three distinct manners, each mutually exclusive.
By specifying row IDs
By applying a filter
By removing all rows
JavaScript
`const { deletedRows } = await client.deleteTableRows({
table: 'Data1Table',
// Specify a list of IDs
ids: [1, 2, 3],
// Or use a filter (caution: all rows matching the filter will be deleted. It's advisable to first test with the findTableRows query)
filter: { name: 'John Doe' },
// Deletes every row within this table, irreversible action
deleteAllRows: true
})
`
Upsert Table Rows
[](#upsert-table-rows)
The upsert operation is a combination of insert and update, allowing you to insert new rows or update existing ones. The operation is based on the row's ID.
**keyColumn**: The column used to identify the row. This column must be unique. Failure occurs if more than one row is found for the same key.
JavaScript
`const { rows, inserted, updated, errors, warnings } = await client.upsertTableRows({
table: 'Data1Table',
keyColumn: 'id',
rows: [
{
name: 'test'
}
]
})
`
Create Table
[](#create-table)
To create a table, simply provide a name and a schema. The naming convention follows the same rules as those applied within the studio. Initially, the schema can be empty and populated or modified later. The schema accepts either an example object, from which it will infer the structure, or a directly provided JSON schema.
JavaScript
`const { table } = await client.createTable({
name: 'Data1Table',
schema: {
name: 'test'
}
})
`
Example using a JSON schema. A field marked as 'searchable' will be indexed, enhancing its availability for search queries. Note, 'index' is a system-managed, read-only attribute.
JavaScript
`const { table } = await client.createTable({
name: 'Data1Table',
schema: {
type: 'object',
'x-zui': {},
properties: {
name: {
type: 'string',
'x-zui': {
index: 0,
searchable: true
},
nullable: true
}
},
additionalProperties: true
}
})
`
Update Table
[](#update-table)
You can update a table's name, schema, or both. Providing only one of these attributes is also permissible. Should you alter the type of an existing column, be advised that all its entries will default to NULL.
Adding a new field
[](#adding-a-new-field)
JavaScript
`const { table } = await client.updateTable({
table: 'Data1Table',
schema: {
myNewField: 'abc', // Direct value assignment
// Or specify with a JSON schema
myNewField: { type: 'string' }
}
})
`
Removing an existing field:
[](#removing-an-existing-field)
JavaScript
`const { table } = await client.updateTable({
table: 'Data1Table',
schema: {
myOldField: null // Field removal
}
})
`
Renaming the table:
[](#renaming-the-table)
JavaScript
`await client.updateTable({ table: 'Data1Table', name: 'myNewTable' })
`
Rename Table Column:
[](#rename-table-column)
To rename a table column, specify both the current and new names. The column's data type and attributes will remain unchanged.
JavaScript
`const { table } = await client.renameTableColumn({
table: 'Data1Table',
name: 'My Old Column Name',
newName: 'New Column Name'
})
`
Get Table
[](#get-table)
To retrieve a table's schema, use the `getTable` function. This will return the table's name and schema.
JavaScript
`const { table } = await client.getTable({ table: 'Data1Table' })
`
Delete Table
[](#delete-table)
To delete a table, use the `deleteTable` function. This will permanently remove the table and all its records.
JavaScript
`const { table } = await client.deleteTable({ table: 'Data1Table' })
`
Operations on Tables - via Code
[](#operations-on-tables---via-code)
![](https://files.readme.io/4d2b9a4-image.png)
createRecord
[](#createrecord)
To create a new record in a table, use the `createRecord` function. You can specify the values for each field in the record. This function can be particularly useful when you need to store new information, such as a new user's details or a newly completed transaction.
JavaScript
`// Create a record in the table
await Data1Table.createRecord({ Age: 25, Name: 'Tom', Occupation: 'Student' })
`
createRecords
[](#createrecords)
To create multiple records in a table, use the `createRecords` function. You can specify the values for each field in the record. Useful for creating multiple records at once.
Javascript
`// Creating two records in the table
await Data1Table.createRecords([
{ Name: 'Tom', Age: 25, Occupation: 'Student', 'Is Friendly': true },
{ Name: 'Didier', Age: 54, Occupation: 'Pilot', 'Is Friendly': true },
])
`
deleteRecord
[](#deleterecord)
To delete a record in a table, use the `deleteRecord` function. You need to specify the record ID of the record you want to delete.
JavaScript
`// Delete a record in the table at record ID 7
await Data1Table.deleteRecord(7)
`
deleteRecords
[](#deleterecords)
To delete multiple records in a table, use the `deleteRecords` function. You need to specify the record IDs of the records you want to delete in an array.
Javascript
` // Delete records in the table at record IDs 7, 8, 9
await Data1Table.deleteRecords([7, 8, 9])
`
findRecords
[](#findrecords)
To find records in a table, use the `findRecords` function. You can add filters, just query everything or search using semantic search (like a Google Search!).
Basic usage and pagination
[](#basic-usage-and-pagination)
To retrieve data from a table in Botpress, you can use the `findRecords` function. This function allows you to specify the limit (number of records to return) and the offset (number of rows to start from).
For instance, if you want the first 10 records, you can set the limit to 10 and the offset to 0\. To fetch the next 10 records, you can set the limit to 10 and the offset to 10.
To determine if there are more records available, you can check the length of the array returned. If the length is greater than 0, it indicates the presence of additional records.
Here's an example:
JavaScript
`` const limit = 10
const startRow = 0
workflow.records = await DataTable1.findRecords({
limit,
offset: startRow,
})
// Checking the second page
const secondPage = await Data1Table.findRecords({
limit,
filter: AI`everything`,
offset: startRow + limit,
})
workflow.hasNextPage = secondPage.length > 0 // This flag can be consumed in your bot flow to handle pagination
``
You can apply a similar approach to determine if there are previous pages as well.
Searching fields with natural language
[](#searching-fields-with-natural-language)
To perform a traditional search, use the search parameter when calling the DataTable1.findRecords() function in Botpress. Here is an example:
JavaScript
`workflow.records = await DataTable1.findRecords({ search: 'red velvet chairs' })
`
You can pass variables like event.preview to the search parameter to search for user input or any other variable. This allows you to preprocess the user's input before performing the search.
Filtering results
[](#filtering-results)
You can filter results using filters. Similar to MongoDB, this code provides methods to filter results. The filtering mechanism can be divided into two main categories: Primitive and Logical.
Don't want to deal with code? Skip to the [next section](#using-ai-to-generate-filters) for AI generated filters.
**Primitive Filter**
[](#primitive-filter)
Primitive filters are easy and simple to use, allowing you to match the exact values you are looking for. Here are some of the primitives you can use:
* `$eq`: Matches values that are equal to a specified value.
`{ "name": { "$eq": "John" } }
`
* `$gt`: Matches values that are greater than a specified value.
`{ "age": { "$gt": 20 } }
`
* `$gte`: Matches values that are greater than or equal to a specified value.
`{ "age": { "$gte": 20 } }
`
* `$lt`: Matches values that are less than a specified value.
`{ "age": { "$lt": 20 } }
`
* `$lte`: Matches values that are less than or equal to a specified value.
`{ "age": { "$lte": 20 } }
`
* `$ne`: Matches all values that are not equal to a specified value.
`{ "name": { "$ne": "John" } }
`
* `$in`: Matches any of the values specified in an array.
`{ "name": { "$in": ["Alice", "Bob", "John"] } }
`
* `$nin`: Matches none of the values specified in an array.
`{ "name": { "$nin": ["Alice", "Bob", "John"] } }
`
* `$exists`: Matches documents that have the specified field.
`{ "name": { "$exists": true } }
`
* `$mod`: Performs modulo operation on the value of field and matches documents where field % divisor equals the specified remainder.
`{ "qty": { "$mod": [4, 0] } }
`
* `$size`: Matches any document where an array field contains a specified number of elements.
`{ "tags": { "$size": 3 } }
`
* `$regex`: Provides regular expression capabilities for pattern matching strings in queries. It uses a placeholder to prevent SQL injections.
`{ "name": { "$regex": "[a-z]" } }
`
* `$options`: Modifies the `$regex` operator to enable options. Currently, there are two options, 'i' for case insensitive and 'c' for case sensitive.
`{ "name": { "$regex": "[a-z]", "$options": 'i' } } // case insensitive
{ "name": { "$regex": "[a-z]", "$options": 'c' } } // case sensitive
`
**Logical Filter**
[](#logical-filter)
Logical operators allow you to connect more filtering clauses.
* `$and`: Joins query clauses with a logical AND. Returns all documents that match the conditions of both clauses.
`{ "$and": [{ "price": { "$ne": 1.99 } }, { "price": { "$exists": true } }] }
`
* `$or`: Joins query clauses with a logical OR. Returns all documents that match the conditions of either clause.
`{ "$or": [{ "price": { "$eq": 1.99 } }, { "price": { "$exists": false } }] }
`
* `$not`: Inverts the effect of a query expression and returns documents that do not match the query expression.
`{ "$not": { "price": { "$eq": 1.99 } } }
`
Please note that these filters and operators can be used together to create complex queries to exactly fit your needs. You can also nest filters like so :
JavaScript
`{
"$and": [
{ "price": { "$lte": 19.99 }},
{ "$or":  [
{"category": { "$eq": "Shoes" }},
{"category": { "$eq": "Hats"}}
]
}
]
}
`
Using AI to generate filters
[](#using-ai-to-generate-filters)
Thankfully, Botpress comes with artificial intelligence (AI) capabilities when it comes to filtering records. This means you can provide a human-like query, and the AI will intelligently decipher it and create the right filters for your query.
This can significantly simplify the construction of complex queries and reduce the likelihood of human errors in the process.
JavaScript
`` const leads = await LeadsTable.findRecords({
filter: AI`works either at ${workflow.company} OR is not in IT`,
limit: 10,
offset: 0,
})
``
The query is written inside the backticks (\`) that come after \`filter: AI\`. The AI expects a query string, and that's why backticks are used.
Re-using filters (selectors)
[](#re-using-filters-selectors)
Selectors are filters that you can re-use. They don't have to be written again and again.
For example, you might use the query selector "People with age greater than 18" to find all users who are above 18.
1. Create a query selector in the table and give it a name. (e.g. adults)
2. Add query as `People with age greater than 18`
3. use below code to find records and save it in a variable called `adults`
JavaScript
`// Find records in the table
const data = await Data1Table.findRecords({ selectorName: 'adults' })
workflow.adults = data
`
Difference between search and AI filters
[](#difference-between-search-and-ai-filters)
A standard `Search` in Botpress is employed to identify specific strings like a user's name. It gives precision-based results by matching specific sets of characters.
On the other hand, an `AI Filter` broadens the scope and is used primarily for filtering results rather than explicitly searching them. It helps you track down users based on certain criteria, such as age above 25.
Although the AI Filter is not primarily designed for exact string hunting, it's flexible enough to allow it. For instance, you could use it to filter results for `Canada` as a country.
getRecord
[](#getrecord)
You can use the `getRecord` function to retrieve a specific record from a table based on a unique identifier. For example, you might use the `getRecord` function to retrieve a user's profile information based on their unique user ID.
Javascript
`// 1 is the record ID and User is the variable name
workflow.User = data
`
updateRecord
[](#updaterecord)
You can use the `updateRecord` function to modify a specific record in a table. This will be useful when you need to update a specific field in the record. For example, you might use this function to update a user's profile information or to update the status of a transaction.
JavaScript
`// Update at record ID 8's Age to 45
await Data1Table.updateRecord(8, { Age: 45 })
`
upsertRecords
[](#upsertrecords)
The `upsertRecords` function allows you to update or create records in a table in a single operation. It is useful for any situation where you need to update or insert data into a table without having to worry about whether the rows already exist.
**Example:**
JavaScript
`// Update the name and address of the records with IDs 1 and 2.
await CustomersTable.upsertRecords('id', [
{ id: 1, name: 'John Doe', address: '123 Main Street' },
{ id: 2, name: 'Jane Doe', address: '456 Elm Street' },
])
`
This code will upsert the records into the CustomersTable. If the records with IDs 1 and 2 already exist in the table, the function will update the existing rows with the new name and address values. If the records with IDs 1 and 2 don't already exist in the table, the function will insert new rows into the table with the new name and address values.
Computed Columns
[](#computed-columns)
Columns can be marked as "Computed" which allows the bot builder to observe changes in tables and generate computed values. This includes leveraging AI, as well as running code. This can be useful for a wide variety of use cases such as CRM enrichment, sentiment analysis, classification.
To use computed columns, simply create a column and toggle the **Computed** field as shown below.
![](https://files.readme.io/9e0fcf39902935effd54aada7fbd08541413a97524fd4bfddbfba14767682abc-image.png)
Selecting the basis of computation
[](#selecting-the-basis-of-computation)
To compute columns, you must select what information you will base your computed columns on. To do so, click the **Dependencies** field and select all column names that you will use.
![](https://files.readme.io/d12ec2ef7bca25fcf93d352f21a6c04367cdcc698e94c1ef075e312a7d44b250-image.png)
In the above example, we selected a column called **number**.
AI-based computed columns
[](#ai-based-computed-columns)
You can perform AI text generation tasks by filling the prompt and including rows like this {{propertyName}}.
`Come up with the title for a story like the three little pigs for the number {{number}}
`
In the above example, for the number 3, you might get "The Three Clever Squirrels" as a value in the cell.
Code-based computed columns
[](#code-based-computed-columns)
To run arbitrary code, select the **Execute code** tab. Then, click **Edit Code**.
![](https://files.readme.io/b242c110986b59376f21e75c4599101299641fd90e353e75a1e6bff1b1e06681-image.png)
You will see a window with a code editor.
![](https://files.readme.io/24d2a3f6ef6fed42ddce8db549e1f5c59c9f74a18659f9cc59b3e4473ce2384c-image.png)
Simply add your code above. The proper syntax for accessing columns you've identified as dependencies is row\[propertyName\], and what is displayed as the cell value is what is returned by this function. You can call asynchronous functions within the function, and have the **axios** library available to perform HTTP requests.
For instance, the following code will return the fibonacci number of the row value for the column **number**.
js
`function fibonacci(n) {
if (n <= 1) {
return n
}
return fibonacci(n - 1) + fibonacci(n - 2)
}
if (!row.number) {
return 0;
}
return fibonacci(row.number)
`
There is currently an execution timeout of 2 minutes these.
Updating computed values
[](#updating-computed-values)
To ensure computed values are always kept up to date, we recommend **Auto-compute** be toggled on.
![](https://files.readme.io/9706d5aa10d2d152d1292bc92b1ef9c2c46a8ba6083b71290da5d8cacf487ec7-image.png)
If you do not have **Auto-compute** enabled, a grey icon will appear next to stale table cells.
![](https://files.readme.io/916133b27eee9a61ee3ffda42e0cc26cb14e193706e12c36e078d6b4e800fff1-image.png)
To update the stale data, simply re-activate **Auto-compute**.
Importing and Exporting
[](#importing-and-exporting)
Import a Table
[](#import-a-table)
You can import a table from a CSV file. Click on the `Import Table` button above the table and select the CSV file you want to import. Botpress will automatically detect the column names and types from the CSV file and create the table structure for you.
Export a Table
[](#export-a-table)
Click on the `Export Table` button to export the table. This will download the table as a CSV file to your computer.
> ## 🚧
>
> Reminder
>
> Don't edit the CSV file directly to avoid data loss and import errors. Instead, make the changes in Botpress Studio and then export the updated table again.
> ## 📘
>
> Note
>
> When you export a bot the tables are exported as well so there is no need to export them separately unless you want to use them in another bot.
Updated 26 days ago
---
* [Table of Contents](#)
* * [Creating a Table](#creating-a-table)  
         * [Making Fields Searchable](#making-fields-searchable)  
   * [Types of Fields (Columns)](#types-of-fields-columns)  
   * [Filtering Records](#filtering-records)  
         * [Logical Operators](#logical-operators)  
         * [Types of Rules](#types-of-rules)  
         * [Rule Groups](#rule-groups)  
         * [Creating a Filter](#creating-a-filter)  
         * [Manually Editing Filters](#manually-editing-filters)  
   * [Operations on Tables - via the Interface](#operations-on-tables---via-the-interface)  
         * [Add records to a table](#add-records-to-a-table)  
         * [Update records in a table](#update-records-in-a-table)  
         * [Delete records from a table](#delete-records-from-a-table)  
   * [Operations on Tables - via Cards](#operations-on-tables---via-cards)  
   * [Operations on Tables - via Botpress Client](#operations-on-tables---via-botpress-client)  
         * [listTables](#listtables)  
         * [Create Table Rows](#create-table-rows)  
         * [Find & Filter Table Rows](#find--filter-table-rows)  
         * [Projection & Aggregation](#projection--aggregation)  
         * [Update Table Rows](#update-table-rows)  
         * [Delete Table Rows](#delete-table-rows)  
         * [Upsert Table Rows](#upsert-table-rows)  
         * [Create Table](#create-table)  
         * [Update Table](#update-table)  
         * [Get Table](#get-table)  
         * [Delet
* [Update Table](#update-table)  
         * [Get Table](#get-table)  
         * [Delete Table](#delete-table)  
   * [Operations on Tables - via Code](#operations-on-tables---via-code)  
         * [createRecord](#createrecord)  
         * [createRecords](#createrecords)  
         * [deleteRecord](#deleterecord)  
         * [deleteRecords](#deleterecords)  
         * [findRecords](#findrecords)  
         * [getRecord](#getrecord)  
         * [updateRecord](#updaterecord)  
         * [upsertRecords](#upsertrecords)  
   * [Computed Columns](#computed-columns)  
         * [Selecting the basis of computation](#selecting-the-basis-of-computation)  
         * [AI-based computed columns](#ai-based-computed-columns)  
         * [Code-based computed columns](#code-based-computed-columns)  
         * [Updating computed values](#updating-computed-values)  
   * [Importing and Exporting](#importing-and-exporting)  
         * [Import a Table](#import-a-table)  
         * [Export a Table](#export-a-table)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Studio Preferences
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Studio Preferences
[ Suggest Edits](/edit/studio-preferences)
![](https://files.readme.io/998d475-image.png)
Workflow - Snap to Grid
[](#workflow---snap-to-grid)
The Snap to Grid feature in Botpress allows you to align nodes and connectors on the grid(flow-editor/canvas), making it easier to organize and visualize the flow of your chatbot.
Enabled
[](#enabled)
To enable Snap to Grid, follow these steps:
1. Open the Botpress Studio and navigate to the Botpress Icon (top-left)
2. Go to **Studio Preferences** \-> Check the box -> **Workflow - Snap to Grid**.
Once Snap to Grid is enabled, the nodes and connectors will automatically align to the nearest grid lines when they are moved.
Note that the Snap to Grid feature is optional and can be disabled at any time by unchecking the **Snap to Grid** box in the settings menu.
Disabled
[](#disabled)
When the **Snap to Grid** feature is turned off, the workflow editor allows for more free-form movement of nodes and connections. Nodes and connections can be dragged and placed anywhere on the canvas, without being automatically aligned to the grid.
This can be useful for creating more complex and visually dynamic workflows that don't conform to a strict grid layout.
However, it can also make it more difficult to align nodes and connections precisely, which may be necessary for ensuring the logical flow of the conversation.
Studio Theme
[](#studio-theme)
The Studio Theme feature allows you to change the color scheme of the Botpress Studio interface. This can be useful for customizing the look and feel of your chatbot, or for making it easier to distinguish between different bots in your workspace.
Available themes include:
1. System (default)
2. Light
3. Dark
Updated 4 months ago
---
* [Table of Contents](#)
* * [Workflow - Snap to Grid](#workflow---snap-to-grid)  
         * [Enabled](#enabled)  
         * [Disabled](#disabled)  
   * [Studio Theme](#studio-theme)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Streaming Analytics
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Streaming Analytics
[ Suggest Edits](/edit/streaming-analytics-from-within-your-bot-with-hooks)
The Botpress Cloud dashboard provides you with an Analytics page with counters for the total number of users, new users, returning users, sessions and messages. It also shows a chart with the data and allows you to filter by date range.
While this interface is great for understanding reach and engagement in a glance, you may need more in-depth data about user behavior and the paths they take when interacting with the bot, and you may need to have this data streamed to a third-party service like Hotjar, Segment or Amplitude. Luckily, you can use the Hooks feature to do just that!.
In this tutorial we are going to use Mixpanel as an example, but you can use any service that has a REST API and an endpoint to receive events.
Setting up Mixpanel
[](#setting-up-mixpanel)
1. Create an account and a project in [Mixpanel](https://mixpanel.com/).
2. Go to your project settings and copy the Project Token.
Setting up the Hooks
[](#setting-up-the-hooks)
1. Open Botpress Studio, go to the Hooks tab and click on the `+` button next to **Before Incoming Message** to create a new hook.
2. Name it `send-user-analytics` for example
3. Add the following Javascript code:
JavaScript
`` const userAnalyticsData = {
time: event.createdOn.getTime(), // Mixpanel event datetime
$insert_id: event.id, // Mixpanel unique event
distinct_id: event.userId, // Mixpanel preventing duplicates
bot_id: event.botId,
conversation_id: event.conversationId,
payload: event.payload,
text: event.preview,
current_flow: event.state.context.currentFlow,
current_node: event.state.context.currentNode,
current_card: event.state.context.currentCard,
}
const projectToken = '<your token>'
await axios.post(
'https://api.mixpanel.com/import',
[
{
event: 'Inbound Message',
properties: userAnalyticsData,
},
],
{
headers: {
Authorization: `Basic ${btoa(projectToken + ':')}`,
},
}
)
``
1. Click on the `+` button next to **Before Outgoing Message** to create a new hook.
2. Name it `send-bot-analytics` for example
3. Add the following Javascript code:
JavaScript
`` const botAnalyticsData = {
time: outgoingEvent.createdOn.getTime(), // Mixpanel event datetime
$insert_id: outgoingEvent.id, // Mixpanel unique event
distinct_id: outgoingEvent.userId, // Mixpanel preventing duplicates
bot_id: outgoingEvent.botId,
conversation_id: outgoingEvent.conversationId,
payload: outgoingEvent.payload,
text: outgoingEvent.preview,
current_flow: outgoingEvent.state.context.currentFlow,
current_node: outgoingEvent.state.context.currentNode,
current_card: outgoingEvent.state.context.currentCard,
}
const projectToken = '<your token>'
await axios.post(
'https://api.mixpanel.com/import',
[
{
event: 'Outbound Message',
properties: botAnalyticsData,
},
],
{
headers: {
Authorization: `Basic ${btoa(projectToken + ':')}`,
},
}
)
``
> ## 📘
>
> Note
>
> Now every time a user or the bot sends a message, Mixpanel will be notified with the event data. You can use this data to create funnels, analyze user behavior and understand the paths they take when interacting with the bot.
Updated 24 days ago
---
* [Table of Contents](#)
* * [Setting up Mixpanel](#setting-up-mixpanel)  
   * [Setting up the Hooks](#setting-up-the-hooks)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Trello
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Trello
Trello Integration
[ Suggest Edits](/edit/trello)
![](https://files.readme.io/0a91107-image.png)
This integration allows you to connect your Botpress chatbot with Trello, a leading project management platform. With this integration, you can easily manage your boards, lists and cards directly from your chatbot.
Prerequisites
[](#prerequisites)
* A [Trello account](https://trello.com/)
* A board in Trello, with at least one list
* The ID of the list where cards will be created. Refer to [this article](https://community.atlassian.com/t5/Trello-questions/How-do-I-find-the-LIST-ID/qaq-p/2272862) to locate it.
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Setting up the Trello integration in Botpress
[](#setting-up-the-trello-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Trello integration then click on the "Install to Bot" button, now go back to your bot settings.
The Trello integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Trello
* **Webhook URL**: The URL for receiving data in Botpress
* **API Key**: The API key for the Trello Power-Up
* **Token**: The token for the Trello Power-Up
Setting up Trello
[](#setting-up-trello)
1. Visit the [Power-Ups Admin Page](https://trello.com/power-ups/admin) and click the **New** button to obtain the API key. Name the Power-Up as "Botpress Connector", fill in the email and author fields, then click **Create**.
2. Once the Power-Up is created, you will be redirected to API Key settings page, displayed below. Generate a new API key, then copy and paste this key into the **API Key** field in Botpress.
![](https://files.readme.io/5243a12-image.png)
3. Click on the "Token" link (marked in the image below) and authorize the Power-Up access to your Trello account by selecting **Allow**.
![](https://files.readme.io/25fec25-image.png)
4. After authorization, copy the displayed token and paste it into the **Token** field in Botpress.
5. Make sure the integration is enabled then press the button "Save configuration".
That's it! Now the Trello integration is operational and ready for use within your bot.
Functionality
[](#functionality)
Cards
[](#cards)
Create Card
[](#create-card)
This operation allows you to create cards programmatically in Trello. For example, this can be useful to register user feedback, add support tickets or create tasks.
* **Card Name**: The title of the card (e.g., "My Test Card").
* **List ID**: The ID of the list to which the card will be added.
* **Description** (Optional): Details or description of the card.
* **Due Date** (Optional): The due date of the card in ISO format.
* **Member IDs** (Optional): The IDs of the members, represented as strings separated by commas.
* **Label IDs** (Optional): The IDs of the labels, represented as strings separated by commas.
You can save the new card information by selecting a variable to store the output in. The output will be an object with the following keys: `id` and `url`.
Update Card
[](#update-card)
This operation allows you to update cards programmatically in Trello. For example, this can be useful to update the status of a support ticket or a task.
* **Card ID**: The ID of the card to be updated.
* **Card Name** (Optional): The updated name of the card.
* **List ID** (Optional): The ID of the list to which the card is added.
* **Closed** (Optional): Specify "true" to close the card and "false" to keep it open.
* **Due Complete** (Optional): Specify "true" if the card is due complete and "false" if not.
Get Member
[](#get-member)
* **Username or ID**: The Trello username or Trello ID to retrieve member data
You can save the member information by selecting a variable to store the output in. The output will be an object with several keys like: `avatarUrl`, `bioData`, `fullName`, `email` and more. Check out this [documentation page](https://developer.atlassian.com/cloud/trello/rest/api-group-members/) to learn more about the Member object.
Get Board Members
[](#get-board-members)
This operation allows you to get all the members of a board. For example, this can be useful to get the list of members of a project.
* **Board ID**: The ID of the board to retrieve all its members.
You can save the members information by selecting a variable to store the output in. The output will be an object with the key: `members`. The members property is an array of objects with the keys: `id`, `fullName`, and `username`.
Add Comment
[](#add-comment)
This operation allows you to add a comment to an existing card. For example, this can be useful to add a comment to a support ticket or a task.
* **Card ID**: The ID of the card to which the comment will be added.
* **Comment**: The content of the comment to be added.
You can save the new comment information by selecting a variable to store the output in. The output will be an object with the key: `text`.
> ## 📘
>
> Note
>
> This Trello Integration aims to extend the capabilities of your Botpress chatbot by aligning it with Trello's functionalities, providing a harmonized and interactive user experience. Explore, interact, and get creative with how you utilize this amalgamation to optimize task and project management.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Trello integration in Botpress](#setting-up-the-trello-integration-in-botpress)  
   * [Setting up Trello](#setting-up-trello)  
   * [Functionality](#functionality)  
         * [Cards](#cards)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Slack
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Slack
[ Suggest Edits](/edit/slack)
![](https://files.readme.io/94da470-image.png)
Prerequisites
[](#prerequisites)
* A [Slack App](https://api.slack.com/apps) to connect your bot to Slack.
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Create a Slack App
[](#create-a-slack-app)
If you don't have a Slack app already, follow the steps below to create one:
1. Go to [this link](https://api.slack.com/apps?new%5Fapp=1).
2. Select **from scratch**.
3. Enter a name for your app.
4. Select the workspace you want to connect your bot to.
5. Click **Create App**.
Et voilà! You have created a Slack app.
Setting up the Slack integration in Botpress
[](#setting-up-the-slack-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Slack integration then click on the "Install to Bot" button, now go back to your bot.
The Slack integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Slack
* **Webhook URL**: The URL for receiving data in Botpress
* **Bot Token**: The token used to authenticate requests made to Slack
* **Signing Secret**: The secret used to verify the requests
* **Bot Name**: The name of the bot that will be displayed in Slack
* **Bot Avatar URL**: The URL to the bot's avatar that will be displayed in Slack
Setting up Slack
[](#setting-up-slack)
Bot Token
[](#bot-token)
1. In the left sidebar, click on **Features** \> **OAuth & Permissions**
2. Scroll down to the **Scope** \> **Bot Token Scopes** section, click **Add an OAuth Scope**. Select both `chat:write` and `chat:write.customize` options from the list.
3. Scroll up and click the **Install to Workspace** button in the **OAuth Tokens for Your Workspace** section
4. In the next screen, your app will request access to your Slack workspace. Click **Allow**.
5. In the **OAuth & Permissions > OAuth Tokens for Your Workspace** section, copy the **Bot User OAuth Token**.
6. Copy the token and paste it in the **Bot Token** input in Botpress.
Signing Secret
[](#signing-secret)
The signing secret is used to verify webhook requests
1. In the left sidebar of the app details page, click on **Settings** \> **Basic Information**
2. Scroll down to **App Credentials** section. Next to **Signing Secret**, click **Show** to reveal the secret.
3. Copy the secret to the **Signing Secret** input in Botpress.
Save Configuration
[](#save-configuration)
Channel configuration is complete, you can now click **Save**. It is important you save your configuration before configuring the webhooks, otherwise Slack will be unable to validate the webhook url
Important: Do not activate the toggle or authorize Slack before saving. After saving, the toggle can be activated, but do not synchronize yet.
Webhook Configuration
[](#webhook-configuration)
Events Webhook
[](#events-webhook)
Slack sends regular events such as messages to the event webhook
1. In the left sidebar, click on **Features** \> **Event Subscriptions**
2. Turn on events by click the On/Off button
3. Copy paste the webhook url provided in the channel configuration UI to the **Request URL** field
4. Under **Subscribe to bot event**, add `message.im` and `message.channels`
5. Click the **Save Changes** button. Make sure your Slack channel configuration is saved before doing this step, otherwise webhook validation will fail
6. A yellow banner will be displayed at the top of the screen. Click the **reinstall your app** link
7. In the next screen, your app will request access to your Slack workspace. Click **Allow**.
Interactivity Webhook
[](#interactivity-webhook)
Slack sends "interactive" events such as reactions to message to the interactivity webhook
1. In the left sidebar, click on **Features** \> **Interactivity & Shortcuts**
2. Turn on interactivity by click the On/Off button
3. Copy paste the webhook url provided in the channel configuration UI to the **Request URL** field
4. Click the **Save Changes** button
Install App
[](#install-app)
Add App to Workspace
[](#add-app-to-workspace)
Your Slack app needs to be added to your workspace to allow Slack users to communicate with it:
1. In the left sidebar, click on **Features** \> **App Home**
2. Scroll down and in the **Show Tabs > Messages Tab** section, tick **Allow users to send Slash commands and messages from the messages tab**
3. In Slack, under the **Apps** section of the sidebar, click the **\+ Add apps** button. In the search bar, type the name of your Slack app. Click on your Slack app in the search results.
That's it, you may now start chatting with your bot on Slack!
Tips
[](#tips)
* To get the Slack conversation ID, you can read the following variable:
`{{ event.tags.conversation["slack:id"] }}`.
* To get the Slack conversation thread ID (if it is a thread), you can read the following variable:
`{{ event.tags.conversation["slack:thread"] }}`.
* To get the Slack user ID, you can read the following variable:
`{{ event.tags.user["slack:id"] }}`.
* To get the Slack message ID, you can read the following variable:
`{{ event.tags.message["slack:id"] }}`.
Slack actions in Botpress Studio
[](#slack-actions-in-botpress-studio)
Starting a Conversation Proactively
[](#starting-a-conversation-proactively)
To start a conversation with a user proactively, you need to know the user's Slack ID.
1. In Studio, add the **Start DM Conversation** card to your flow.
2. Pass the user's Slack ID in the `Slack User Id` input.
3. You can store the result of the action in a variable.
Retrieve a Message
[](#retrieve-a-message)
To retrieve a message from Slack, you need to know the `timestamp` and the `channel` of the message.
1. In Studio, add the **Retrieve Message** card to your flow.
2. Pass the timestamp of the message in the `Timestamp` input.
3. Pass the channel of the message in the `Channel` input.
4. You can store the result of the action in a variable.
Add Reaction to message
[](#add-reaction-to-message)
To add a reaction on a Slack message, you need to know the `message Id` and the `reaction name`.
1. In Studio, add the **Add Reaction** card to your flow.
2. Pass the message Id in the `Message Id` input.
3. Pass the reaction name in the `Reaction Name` input. (see [Slack documentation](https://slack.com/help/articles/202931348-Use-emoji-and-reactions) for more informations on emojis/reactions)
Synchronize Members
[](#synchronize-members)
This action will synchronize the members of a Slack workspace with Botpress users.
In Studio, add the **Sync Members** card to your flow.
Reaction Added trigger
[](#reaction-added-trigger)
You can use the **Reaction Added** trigger to make actions when a reaction is added to a Slack message.
Get Slack Profile
[](#get-slack-profile)
You can add the below code in an Execute Code card to allow the bot to retrieve the sender's Display Name or E-mail. You can add other properties as per your needs, all you need is to pass your bot's token in the first line. This can add more personalization and customization to your bot.
JavaScript
`` const botToken = ''
const userInfoUrl = 'https://slack.com/api/users.profile.get?user=' + event.tags.user['slack:id']
// Query Slack API
await axios({ method: 'get', url: userInfoUrl, headers: { Authorization: 'Bearer ' + botToken } })
.then((response) => {
console.log(response.data)
user.userFullName = response.data.profile.display_name
user.email = response.data.profile.email
})
.catch(function (error) {
if (error.response) {
// The request was made and the server responded with a status code
// that falls out of the range of 2xx
console.log(error.response.data)
console.log(error.response.status)
console.log(error.response.headers)
} else if (error.request) {
// The request was made but no response was received
// `error.request` is an instance of XMLHttpRequest in the browser and an instance of
// http.ClientRequest in node.js
console.log(error.request)
} else {
// Something happened in setting up the request that triggered an Error
console.log('Error', error.message)
}
console.log(error.config)
})
``
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Create a Slack App](#create-a-slack-app)  
   * [Setting up the Slack integration in Botpress](#setting-up-the-slack-integration-in-botpress)  
   * [Setting up Slack](#setting-up-slack)  
         * [Bot Token](#bot-token)  
         * [Signing Secret](#signing-secret)  
         * [Save Configuration](#save-configuration)  
   * [Webhook Configuration](#webhook-configuration)  
         * [Events Webhook](#events-webhook)  
         * [Interactivity Webhook](#interactivity-webhook)  
   * [Install App](#install-app)  
         * [Add App to Workspace](#add-app-to-workspace)  
   * [Tips](#tips)  
   * [Slack actions in Botpress Studio](#slack-actions-in-botpress-studio)  
         * [Starting a Conversation Proactively](#starting-a-conversation-proactively)  
         * [Retrieve a Message](#retrieve-a-message)  
         * [Add Reaction to message](#add-reaction-to-message)  
         * [Synchronize Members](#synchronize-members)  
         * [Reaction Added trigger](#reaction-added-trigger)  
         * [Get Slack Profile](#get-slack-profile)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Flows
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Flows
Menu to manage different conversational flows that dictate how your bot interacts with users.
[ Suggest Edits](/edit/studio-interface-flows)
In the Flows panel, each flow represents a specific part of the conversation logic or interaction path the bot will follow when handling a conversation or performing a task. Each flow represents a unique interaction pathway, determining how the bot responds to specific user inputs and scenarios. By configuring these flows, you can control the bot's behaviour, ensuring it provides a consistent and user-friendly experience across various situations.
Flows in the menu
[](#flows-in-the-menu)
Main
[](#main)
The "Main" flow is the primary conversation flow that your bot follows during standard interactions. It is the default pathway that guides the user through the core functionalities of the bot. This flow should be configured to handle general queries, initial greetings, intent recognition, and primary navigation through the bot's features. Set up the main flow to start when the bot is initiated and guide the user through typical use cases or services provided by the bot.
Error
[](#error)
The "Error" flow is triggered when the bot encounters a problem, such as an unrecognized command, invalid input, or a processing failure. Configure this flow to manage unexpected situations gracefully. The bot should inform the user of the error and offer options for recovery, such as retrying the action or redirecting to the main flow. Include helpful error messages and potential solutions to guide the user back to a valid conversation path.
Timeout
[](#timeout)
The "Timeout" flow is activated when there is a prolonged period of inactivity from the user. This flow handles idle sessions by either prompting the user or ending the conversation. Use this flow to re-engage the user after a period of silence or to gracefully conclude the conversation if the user is unresponsive. Set a timeout duration and specify actions such as sending a reminder message, asking if the user needs more help, or automatically closing the session.
Conversation End
[](#conversation-end)
The "Conversation End" flow manages how the bot concludes interactions. This includes wrapping up the conversation, providing summaries, or offering follow-up actions. Configure this flow to ensure the conversation ends positively. The bot might thank the user, provide a summary of the conversation, or suggest next steps. Include a polite closing message, potential follow-up options like a survey or re-engagement link, and any necessary final actions.
---
Managing flows
[](#managing-flows)
You can manage your bot's flows from this menu. Here's a breakdown of the configuration and management options available to you.
Add Workflow
[](#add-workflow)
This adds a new workflow to your bot.
Add Folder
[](#add-folder)
This creates a new folder in this menu. You can store flows, tables, and knowledge bases in a folder.
Add Knowledge Base
[](#add-knowledge-base)
This creates a new Knowledge Base.
Add Table
[](#add-table)
This creates a new Table.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Flows in the menu](#flows-in-the-menu)  
         * [Main](#main)  
         * [Error](#error)  
         * [Timeout](#timeout)  
         * [Conversation End](#conversation-end)  
   * [Managing flows](#managing-flows)  
         * [Add Workflow](#add-workflow)  
         * [Add Folder](#add-folder)  
         * [Add Knowledge Base](#add-knowledge-base)  
         * [Add Table](#add-table)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Telegram
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Telegram
[ Suggest Edits](/edit/telegram)
![](https://files.readme.io/f0b7533-image.png)
Prerequisites
[](#prerequisites)
* A Telegram account and a Telegram bot
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Create a Bot
[](#create-a-bot)
To create a bot on Telegram, use Telegram's BotFather. The BotFather will ask you for a name and username, then generate an authorization token for your new bot
The name of your bot is displayed in contact details and elsewhere
The Username is a short name to be used in mentions and t.me links. Usernames are 5-32 characters long and are case insensitive but may only include Latin characters, numbers, and underscores. Your bot's username must end in `bot`, such as `tetris_bot` or `TetrisBot`
Setting up the Telegram integration in Botpress
[](#setting-up-the-telegram-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Telegram integration then click on the "Install to Bot" button, now go back to your bot settings.
The Telegram integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Telegram
* **Webhook URL**: The URL for receiving data in Botpress
* **Bot Token**: The token of your Telegram bot
Setting up Telegram
[](#setting-up-telegram)
Generate an Authorization Token
[](#generate-an-authorization-token)
When you create a Telegram bot, BotFather will automatically generate a token. The token is a string that is required to authorize the bot and send requests to the Bot API. Keep your token secure and store it safely; anyone can use it to control your bot
If your existing token is compromised or you lost it for some reason, use the `/token` command to generate a new one
Bot Token
[](#bot-token)
Copy your Telegram bot token and paste it into the **Bot Token** channel configuration and click **Save**.
That's it, you may now start chatting with your bot on Telegram!
Tips
[](#tips)
* To get the Telegram conversation ID, you can read the following variable:
`{{ event.tags.conversation["telegram:id"] }}`.
* To get the Telegram user ID, you can read the following variable:
`{{ event.tags.user["telegram:id"] }}`.
* To get the Telegram message ID, you can read the following variable:
`{{ event.tags.message["telegram:id"] }}`.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
         * [Create a Bot](#create-a-bot)  
   * [Setting up the Telegram integration in Botpress](#setting-up-the-telegram-integration-in-botpress)  
   * [Setting up Telegram](#setting-up-telegram)  
         * [Generate an Authorization Token](#generate-an-authorization-token)  
         * [Bot Token](#bot-token)  
   * [Tips](#tips)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Twilio
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Twilio
[ Suggest Edits](/edit/twilio)
![](https://files.readme.io/44272e9-image.png)
Prerequisites
[](#prerequisites)
* A [Twilio](https://www.twilio.com/) account
* A Twilio phone number. Check out [this article](https://support.twilio.com/hc/en-us/articles/223135247-How-to-Search-for-and-Buy-a-Twilio-Phone-Number-from-Console) to learn how to get one.
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Setting up the Twilio integration in Botpress
[](#setting-up-the-twilio-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Twilio integration then click on the "Install to Bot" button, now go back to your bot.
The Twilio integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Twilio
* **Webhook URL**: The URL for receiving data in Botpress
* **Account SID**: Your Twilio Account SID
* **Auth Token**: Your Twilio Auth Token
Setting up Twilio
[](#setting-up-twilio)
Account SID and Auth Token
[](#account-sid-and-auth-token)
1. Go to you Twilio [console dashboard](https://console.twilio.com/?frameUrl=/console)
2. Scroll down and copy your Account SID and Auth Token from the **Project Info** section and paste them in the **Account SID** and **Auth Token** channel configurations
Save Configuration
[](#save-configuration)
Channel configuration is complete, you can now click **Save**
Webhook Configuration
[](#webhook-configuration)
To receive messages from Twilio, you will need to setup a webhook
1. Click on **Explore Products** in the left pannel
2. Click on **Messaging**
3. Click on **Services** in the left pannel
4. Click on your service (if you haven't already created your service, create a messaging service and add your phone as a sender)
5. Click on **Sender Pool** in the left pannel
6. Click on your phone number
7. Scroll down the phone number settings page
8. Copy paste the webhook url provided in the channel configuration UI to the **A Message Comes In** field
That's it! Now the Twilio integration is operational and ready for use within your bot.
Updated 3 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Twilio integration in Botpress](#setting-up-the-twilio-integration-in-botpress)  
   * [Setting up Twilio](#setting-up-twilio)  
         * [Account SID and Auth Token](#account-sid-and-auth-token)  
         * [Save Configuration](#save-configuration)  
   * [Webhook Configuration](#webhook-configuration)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Sunshine Conversations
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Sunshine Conversations
Sunco
[ Suggest Edits](/edit/sunshine-conversations)
![](https://files.readme.io/6c03467-image.png)
Prerequisites
[](#prerequisites)
* A [Smooch app](https://app.smooch.io) with a channel configured
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Setting up the Sunshine Conversations integration in Botpress
[](#setting-up-the-sunshine-conversations-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Sunshine Conversations integration then click on the "Install to Bot" button, now go back to your bot settings.
The Sunshine Conversations integration has the following settings:
* **Enabled**: Whether Botpress will communicate with this channel
* **Webhook URL**: The URL for receiving data in Botpress
* **App Id**: The App Id of your bot in Azure
* **Key Id**: The Key Id of your bot in Azure
* **Key Secret**: The Key Secret of your bot in Azure
* **Webhook Secret**: The Webhook Secret of your bot in Azure
Setting up Sunshine Conversations
[](#setting-up-sunshine-conversations)
Smooch App
[](#smooch-app)
1. On the Smooch [home page](https://app.smooch.io/), click on **Create new app.**
2. Enter a name for your app and click **Create App**
3. Connect a channel to your app (Telegram, WhatsApp, or any other listed channel)
4. You should see a channel in the **Overview** section of your app
Configuration
[](#configuration)
App Id
[](#app-id)
The smooch channel needs the app id to identify the smooch app when making API calls
1. Go to the **Settings** section of your app
2. You should see an **App Id** section if you scroll down. Copy paste this value to the **App Id** channel configuration
Key Id and Key Secret
[](#key-id-and-key-secret)
The key id and secret are needed to authenticate API calls to Smooch
1. At the bottom of to the **Settings** section of your app, click **Generate API key**
2. Copy paste the id (the one that starts with `app_`) in the **Key Id** channel configuration
3. Copy paste the secret in the **Key Secret** configuration
Webhook Secret
[](#webhook-secret)
The webhook secret is needed to validate webhooks requests. You get a webhook secret for each webhook integration you create
1. Go to the **Integration** section of your app
2. In the **API & Webhooks** section, click on **Webhooks**
3. Click **Connect**, then **Create a webhook**
4. Paste the Webhook URL provided in Botpress
5. Select `v2` as your webhook version
6. Select **Conversation message** and **Postbacks** in the basic triggers
7. Click **Create Webhook**. You will see the webhook you created in the table, and the secret in the last column
8. Copy paste the webhook secret in the **Webhook Secret** channel configuration
Save Configuration
[](#save-configuration)
Channel configuration is complete, you can now click **Save**
That's it, you may now start chatting with your bot on Sunshine Conversations!
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Sunshine Conversations integration in Botpress](#setting-up-the-sunshine-conversations-integration-in-botpress)  
   * [Setting up Sunshine Conversations](#setting-up-sunshine-conversations)  
         * [Smooch App](#smooch-app)  
   * [Configuration](#configuration)  
         * [App Id](#app-id)  
         * [Key Id and Key Secret](#key-id-and-key-secret)  
         * [Webhook Secret](#webhook-secret)  
         * [Save Configuration](#save-configuration)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Commands
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Commands
[ Suggest Edits](/edit/studio-commands)
Botpress makes available some commands that you can use throughout your development process. These work in production as well, to troubleshoot issues and restart conversations.
| Command       | Where to Input                                                  | When to use                                                                                                                                                         |
| ------------- | --------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| //state/reset | In the [Emulator](../docs/emulator) or in a Channel integration | You should run this command where there's a problem with the state of your bot which could be caused by deleting nodes, workflows or variables and other situations |
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Send Messages
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Send Messages
Send a message or piece of rich content to your user.
[ Suggest Edits](/edit/send-messages)
Botpress lets you send multiple types of messages to your users.
The various chat clients support rich message types, and content types like text, images, and audio may look different depending on which channel you're using.
Your bot's messages can be as straightforward or as complex as you want. For instance, a content type could be simple piece text or an image or carousel.
Sending Messages
[](#sending-messages)
To instruct your bot to send a message, drag a message type from the Card Tray into a Node.
Message Types
[](#message-types)
Text
[](#text)
This sends a piece of text to your user. This field supports standard markdown and variable expression.
Image
[](#image)
This sends an uploaded image to your user. The title field is mandatory in this card.
Audio
[](#audio)
This sends an uploaded audio file to your user. The title field is mandatory in this card.
Video
[](#video)
This sends an uploaded video file to your user. The title field is mandatory in this card.
File
[](#file)
This sends a file to your user. The title field is mandatory in this card.
Card
[](#card)
The 'Card' message type pairs an uploaded image with a title, subtitle, and action button, like a link to your website. The title and subtitle are both mandatory.
Carousel
[](#carousel)
The 'Carousel' message type groups together multiple cards in a scrollable carousel.
Location
[](#location)
This card sends an address to your user based on a specified latitude and longitude.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Sending Messages](#sending-messages)  
         * [Message Types](#message-types)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Preventing Abuse
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Preventing Abuse
[ Suggest Edits](/edit/preventing-abuse)
At Botpress, we prioritize the security and integrity of your chatbots by implementing a range of robust measures to counteract fraud and malicious usage. Our strategy includes:
Rate Limits
[](#rate-limits)
Rate limits serve as a fundamental safeguard for your bot's resources. Each bot is assigned a maximum rate of messages it can process per second. For users on the "Team" plan, a higher rate limit is applied. Enterprise customers can further customize these limits to align with their specific requirements.
Rate limiting prevents the excessive influx of messages, ensuring that your bot operates efficiently and consistently. This is an essential component of our abuse prevention strategy.
Web Application Firewall (WAF)
[](#web-application-firewall-waf)
Our Web Application Firewall, often referred to as WAF, is a powerful layer of defense against various cyber threats. WAF can protect your bot from Distributed Denial of Service (DDoS) attacks, SQL injection, cross-site scripting, and many other malicious activities.
By using WAF, Botpress takes advantage of AWS's robust security mechanisms, which are detailed in [AWS WAF Documentation](https://docs.aws.amazon.com/waf/latest/developerguide/ddos-responding.html). This means that your bot is shielded from a wide range of web-based threats, allowing it to perform at its best without disruption.
Billing Limits
[](#billing-limits)
To provide an additional layer of protection, you have the ability to set monthly spending limits. This feature ensures that even if an abuse attempt were to circumvent the rate limits and WAF, your financial exposure remains under control. By defining a spending limit, you can prevent unexpectedly high bills resulting from excessive bot usage.
In summary, our abuse prevention strategy combines rate limits, WAF protection, and billing limits to keep your chatbots safe and efficient. This multi-faceted approach is designed to mitigate potential abuse scenarios and maintain the integrity of your bot's operation.
> ## 📘
>
> Info
>
> You can watch the [Usage tab](https://botpress.com/docs/cloud/admin-dashboard/usage/) in the Admin Dashboard to continuously verify the usage of Botpress computational resources by your bot, ensuring that it is operating within the expected limits.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Rate Limits](#rate-limits)  
   * [Web Application Firewall (WAF)](#web-application-firewall-waf)  
   * [Billing Limits](#billing-limits)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
React Components
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# React Components
[ Suggest Edits](/edit/react-js)
Botpress React components provide a flexible way to build and customize chatbot interfaces in React applications. They enable conversation management, user input handling, and event subscriptions for a seamless chat experience.
Quickstart
[](#quickstart)
Install the packages
[](#install-the-packages)
Install the necessary packages from the npm public registry.
npmpnpmyarn
`npm install @botpress/webchat @botpress/webchat-generator
`
`pnpm add @botpress/webchat @botpress/webchat-generator
`
`yarn add @botpress/webchat @botpress/webchat-generator
`
Obtain the Client ID
[](#obtain-the-client-id)
To integrate Botpress Webchat into your application, you need to obtain your bot's Client ID, which uniquely identifies your bot and enables communication with the Webchat service. Follow these steps to retrieve it:
1. Open Your Bot in Botpress Workspace
2. Navigate to the Webchat tab
3. Access Advanced Settings
4. Copy the Client ID
![](https://files.readme.io/c4b8059-Screenshot_2024-08-15_at_9.05.51_AM.png)
Add the code
[](#add-the-code)
Here’s a basic implementation example to get you started:
App.tsx
`import { Webchat, WebchatProvider, Fab, getClient } from "@botpress/webchat";
import { buildTheme } from "@botpress/webchat-generator";
import { useState } from "react";
const { theme, style } = buildTheme({
themeName: "prism",
themeColor: "#634433",
});
//Add your Client ID here ⬇️
const clientId = "YOUR_CLIENT_ID";
export default function App() {
const client = getClient({ clientId });
const [isWebchatOpen, setIsWebchatOpen] = useState(false);
const toggleWebchat = () => {
setIsWebchatOpen((prevState) => !prevState);
};
return (
<div style={{ width: "100vw", height: "100vh" }}>
<style>{style}</style>
<WebchatProvider
theme={theme}
client={client}
>
<Fab onClick={toggleWebchat} />
<div
style={{
display: isWebchatOpen ? "block" : "none",
}}
>
<Webchat />
</div>
</WebchatProvider>
</div>
);
}
`
Optional: Configuration
[](#optional-configuration)
You can enhance your Webchat experience by incorporating additional configuration options. Here's an example:
App.tsx
`// ...
const config = {
composerPlaceholder: "What would you like to know?",
botName: "Customer service",
botAvatar: "https://picsum.photos/200/300",
botDescription:
"Hi! 👋  Welcome to webchat this is some description talking about what it is. This might be a bit longer when expanded.",
email: {
title: "[[email protected]](/cdn-cgi/l/email-protection)",
link: "mailto:[[email protected]](/cdn-cgi/l/email-protection)",
},
phone: {
title: "555-555-5555",
link: "tel:555-555-5555",
},
website: {
title: "https://botpress.com",
link: "https://botpress.com",
},
termsOfService: {
title: "Terms of service",
link: "https://botpress.com/terms",
},
privacyPolicy: {
title: "Privacy policy",
link: "https://botpress.com/privacy",
},
};
export default function App() {
// ...
return (
<div style={{ width: "100vw", height: "100vh" }}>
<style>{style}</style>
<WebchatProvider
key={JSON.stringify(config)}
theme={theme}
//Add the configuration to the Webchat Provider ⬇️
configuration={config}
client={client}
>
<Fab onClick={toggleWebchat} />
<div
style={{
display: isWebchatOpen ? "block" : "none",
}}
>
<Webchat />
</div>
</WebchatProvider>
</div>
);
}
`
---
Component References
[](#component-references)
WebchatProvider
[](#webchatprovider)
`WebchatProvider` is a necessary component in the Botpress Webchat SDK. It ensures that all webchat components function correctly by providing the essential context. All webchat components, such as , , and others, must be placed inside the WebchatProvider to work properly.
App.tsx
`// ...
<WebchatProvider client={client} theme={theme}>
// All Webchat components go here
</WebchatProvider>
// ...
`
FAB (Floating Action Button)
[](#fab-floating-action-button)
![](https://files.readme.io/61cf345-38b71ad-image.png)
`FAB` component is a UI element designed to to open or toggle the visibility of the webchat interface.
App.tsx
`import { Fab } from "@botpress/webchat";
// ...
<WebchatProvider client={client}>
<Fab onClick={toggleWebchat} />
{/* Other Webchat components */}
</WebchatProvider>
// ...
`
WebChat
[](#webchat)
![](https://files.readme.io/628a9b7-Screenshot_2024-08-19_at_3.28.07_PM.png)
`WebChat` component serves as the main container for the chat interface. It provides a complete chat experience by rendering a header, a list of messages, and an input area where users can compose and send messages.
Under the hood, the `Webchat` component is composed of several modular components that can be used separately for more customized layouts.
App.tsx
`import { Container, Header, MessageList, Composer, ComposerInput, ComposerButton, UploadButton, WebchatProvider } from '@botpress/webchat';
// Using Webchat directly:
<WebchatProvider client={client} theme={theme}>
<Webchat />
</WebchatProvider>
// is equivalent to:
<WebchatProvider client={client} theme={theme}>
<Container>
<Header />
<MessageList />
<Composer>
<ComposerInput />
<ComposerButton />
</Composer>
</Container>
</WebchatProvider>
`
Header
[](#header)
![](https://files.readme.io/e0b68c4-Screenshot_2024-08-19_at_4.22.41_PM.png)
`Header` component sits at the top of the Webchat, providing clear bot identification and quick access to functions like refreshing or closing the chat.
MessageList
[](#messagelist)
![](https://files.readme.io/d9e5473-Screenshot_2024-08-19_at_4.33.19_PM.png)
`MessageList` component displays the ongoing conversation between the user and the bot within the Botpress Webchat.
Composer
[](#composer)
`Composer` component functions as a container for the text input field and the send message button.
App.tsx
`import {Composer, ComposerInput, ComposerButton } from '@botpress/webchat';
// ...
<Composer>
<ComposerInput />
<ComposerButton />
</Composer>
// ...
`
Updated about 2 months ago
---
* [Table of Contents](#)
* * [Quickstart](#quickstart)  
         * [Install the packages](#install-the-packages)  
         * [Obtain the Client ID](#obtain-the-client-id)  
         * [Add the code](#add-the-code)  
         * [Optional: Configuration](#optional-configuration)  
   * [Component References](#component-references)  
         * [WebchatProvider](#webchatprovider)  
         * [FAB (Floating Action Button)](#fab-floating-action-button)  
         * [WebChat](#webchat)  
         * [Header](#header)  
         * [MessageList](#messagelist)  
         * [Composer](#composer)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Settings
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Settings
General administration and management settings for your Workspace.
[ Suggest Edits](/edit/settings)
Details
[](#details)
From the Details menu in this tab, you can adjust the Workspace name and handle.
You can also adjust the public profile of your Workspace and add social media profiles that link to your business or agency. From this menu, you also have the option to delete a Workspace.
> ## 🚧
>
> Deleting a Workspace is irreversible
>
> Note that deleting a Workspace is an irreversible process, and we are unable to restore the contents of any Workspace that has been deleted.
Billing
[](#billing)
From the Billing menu, you can see an overview of your next upcoming payment, your current AI Spend limit, and retrieve any invoices or details about your payment information.
You will also see an overview of your current plan, and can compare or make changes to this plan.
PAYG and Team plan customers can also make amendments to their subscription, including purchasing or removing add-ons.
Billing FAQs
[](#billing-faqs)
I've changed my subscription but the changes do not appear reflected in my dashboard?
[](#ive-changed-my-subscription-but-the-changes-do-not-appear-reflected-in-my-dashboard)
Because subscriptions are active throughout an entire month (or billing cycle), changes made to your subscription will appear when the next billing cycle begins.
The Billing page in your dashboard displays next month's subscription, so you can see when your changes will take effect.
If I purchase a plan or subscription upgrade in the middle of the month, when will I get charged?
[](#if-i-purchase-a-plan-or-subscription-upgrade-in-the-middle-of-the-month-when-will-i-get-charged)
Upgrades to your subscription are immediately pro-rated. If you purchase a Team plan in the middle of the month, you will pay half the value of the Team plan (for the remainder of that month), and then you will be billed as normal starting the 1st of the following month.
Where can I find Botpress invoices?
[](#where-can-i-find-botpress-invoices)
You can access invoices by clicking on the 'View invoices and payment information' link in the Billing menu.
Where can I add my Tax ID?
[](#where-can-i-add-my-tax-id)
You can add your Tax ID by clicking on the 'View invoices and payment information' link in the Billing menu.
Where can I change which email receives receipts and invoices?
[](#where-can-i-change-which-email-receives-receipts-and-invoices)
You can adjust billing email preferences by clicking on the 'View invoices and payment information' link in the Billing menu.
When does AI Spend get charged?
[](#when-does-ai-spend-get-charged)
All usage-based billing, like AI Spend, is charged at the end of the billing period.
Can I make purchases on Botpress even though my payment has failed?
[](#can-i-make-purchases-on-botpress-even-though-my-payment-has-failed)
No, you can cannot upgrade a plan or subscription if your payment fails.
Updated 7 days ago
---
* [Table of Contents](#)
* * [Details](#details)  
   * [Billing](#billing)  
         * [Billing FAQs](#billing-faqs)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Nodes
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Nodes
[ Suggest Edits](/edit/nodes)
Nodes are the primary units of conversational logic of your chatbot. A node generally transitions to another node or flow. You can think of a node as a step in a conversation.
A single node can have multiple content types, instructions, and transitions. When there aren't any more transitions, the conversation ends.
Node types: Start, Entry, Standard, Exit and End
Types of Nodes
[](#types-of-nodes)
Standard Node
[](#standard-node)
The Standard node is a versatile building block in your bot's workflow. It allows you to add both instructions and transitions to your flow, and it can be used to represent a variety of steps in the conversation with the user.
You can add instructions to the Standard node to define what the bot should do at that point in the conversation, such as sending a message or asking the user for input. You can also add transitions to the Standard node to specify the conditions under which the conversation should proceed to the next node.
Standard nodes can be connected to other nodes within the same workflow using transitions, allowing you to create complex conversation flows that adapt to the user's input and actions. They are essential building blocks for creating conversational AI experiences that are engaging and useful for your users.
Autonomous Node
[](#autonomous-node)
The Autonomous node uses an LLM to determine when, and in what order, to execute the cards it contains. Based on the context of the conversation, as well as a set of instructions provided by the builder, Autonomous nodes manage conversation flows and decide what actions to perform.
Autonomous Nodes can be created by right-clicking in the studio and selecting "Autonomous Node" from the dropdown menu.
Start Node
[](#start-node)
The Start Node is a specialized Entry Node that is only available in the main flow of a Botpress bot. It serves as the starting point for the conversation and can only execute transitions to other standard nodes.
Entry Node
[](#entry-node)
Every workflow in your bot, except the main flow, starts with an Entry node. The Entry node is the starting point for each individual workflow and can only execute transitions to other standard nodes within that workflow. It is used to define the entry point for the workflow and the initial conditions that must be met for the workflow to start executing.
Exit Node
[](#exit-node)
Similar to the Entry node, every workflow in your bot, except the main flow, should end with an Exit node. The Exit node is the final node in a workflow and can only receive transitions from other standard nodes within that workflow. It is used to define the exit point for the workflow and specify the conditions that must be met for the workflow to end. The Exit node typically contains cleanup or finalization logic, such as sending a message to the user or updating a database, before the workflow is completed.
End Node
[](#end-node)
The End Node is a unique node in your bot's Main Flow. Its purpose is to clear the conversation session and reset the bot to its initial state once it is reached. When the End Node is executed, it will erase all variables and user data associated with the conversation and set the cursor back to the beginning of the Main Flow.
The End Node is typically used when you want to reset the conversation with the user and start a new session from scratch. It is particularly useful for bots that handle sensitive or personal information, where it is important to ensure that previous session data is not accessible to subsequent users.
Note that the End Node is only available in the Main Flow of your bot and cannot be used in other workflows.
Updated 3 months ago
---
* [Table of Contents](#)
* * [Types of Nodes](#types-of-nodes)  
         * [Standard Node](#standard-node)  
         * [Autonomous Node](#autonomous-node)  
         * [Start Node](#start-node)  
         * [Entry Node](#entry-node)  
         * [Exit Node](#exit-node)  
         * [End Node](#end-node)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Overview
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Overview
A general overview of relevant information at a glance for your bot.
[ Suggest Edits](/edit/overview-1)
This tab covers basic information and provides a general overview of your bot's performance and configurations.
About your bot
[](#about-your-bot)
This window shows basic statistics about your bot so you can quickly grasp any changes over time in the number of messages, sessions, or new users interacting with your bot. You can use the information found in this chart to make decisions about your bot's behaviour and quickly monitor its performance.
More detailed analytics can be found in the Analytics tab.
Recent issues
[](#recent-issues)
This window flags any recent issues your bot has run into while deployed in a production environment. You can use the information here to quickly diagnose and troubleshoot any usability blockers in your bot, or understand where end users are unable to move forward with conversations.
Installed integrations
[](#installed-integrations)
This menu shows which integrations your bot has installed. You can use this to quickly navigate to those integrations to manage them.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [About your bot](#about-your-bot)  
   * [Recent issues](#recent-issues)  
   * [Installed integrations](#installed-integrations)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
SDK
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# SDK
[ Suggest Edits](/edit/sdk)
Installation
[](#installation)
The SDK is an npm package that can be installed with the following command:
`npm install @botpress/sdk # for npm
yarn add @botpress/sdk # for yarn
pnpm add @botpress/sdk # for pnpm
`
Chatbot Development
[](#chatbot-development)
The first step in developing a Bot with the SDK is to instantiate the Bot class as follows:
ts
`import { Bot } from "@botpress/sdk";
const bot = new Bot();
export default bot;
`
This is the minimal functional code that can be executed by Botpress as a Bot. It does absolutely nothing.
To add behavior to the Bot, you can register a message handler as follows:
ts
`` bot.message("", async ({ message, client, ctx }) => {
console.info("Received message", message);
let responseText: string;
if (message.payload.text === "/ping") {
responseText = "Pong !";
} else if (message.payload.text === "/order_pizza") {
await orderPizza();
responseText = "Pizza successfully ordered";
} else {
responseText = `Unknown command: ${message.payload.text} ...`;
}
await client.createMessage({
conversationId: message.conversationId,
userId: ctx.botId,
tags: {},
type: "text",
payload: {
text: responseText,
},
} satisfies CreateMessageBody<"text">);
console.info("text message sent");
});
``
This handler will be called every time the Bot receives a message. It will then check the content of the message and send a response accordingly.
The Bot's constructor is what we call its definition. It contains information such as the Bot's configuration or the type of events the Bot can receive. The message handler, on the other hand, is part of the Bot's implementation. The Bot's definition restricts its implementation and influences intellisense during development.
The Bot's definition is described by the following fields:
* `tags`
This field is used to specify the Tags used by the **Bot**.
**Tags** are strings that allow to filter messages, conversations or users when querying the API.
* `states`
This field is used to specify the **States** used by the **Bot**.
**States** are used to persist data in between a **Bot**'s invocations.
A **State** can be attached to a conversation, a user or can be global to the **Bot**.
**States** have a schema, meaning that only the data that matches the schema can be persisted and retrieved.
* `integrations`
This field is used to specify the **Integrations** installed in the **Bot**.
**Integrations** are used to connect a **Bot** to external services.
Disabled **Integrations** are not used by the **_Bot_**. They can however be enabled later in the [CDM](https://app.Botpress.cloud) or through the [API](https://botpress.com/docs/api/).
Setting an **Integration** in the **Bot**'s definition does two things:
* it allows the **Integration** to call your **Bot** with events and messages.  
   * it allows your **Bot** to call the **Integration** with actions.
* `configuration`
This field is used to specify the schema of the **Configuration** provided to the **Bot** when it's called.
The actual **Configuration** is provided by the user when deploying the **Bot**.
* `events`
This field is used to specify the schema of the **Events** that can be sent to the **Bot** by **Integrations**.
**Events** are just like messages, only they have a more general purpose, a custom schema and a wider use case.
* `recurringEvents`
This field is used to specify **Recurring Events**.
**Recurring Events** are events that are sent to the **Bot** following a certain cron schedule.
Here's an example of a more complete Bot's definition:
ts
`` const bot = new Bot({
integrations: [
{
enabled: true,
id: `${YOUR_INTEGRATION_ID}`,
configuration: YOUR_INTEGRATION_CONFIGURATION,
},
],
configuration: {
schema: {
botName: z.string(),
},
},
states: {
profile: {
type: "user",
schema: {
userName: z.string(),
},
expiry: 1000 * 60 * 60, // 1 hour
},
},
tags: {
users: ["inventoryAdmin"], // will allow to target users with the tag "inventoryAdmin"
},
events: {
scheduledEvent: {
schema: {},
},
},
recurringEvents: {
crawlInventory: {
type: "scheduledEvent",
payload: {},
schedule: {
cron: "*/5 * * * *", // crawl and sync inventory every 5 minutes
},
},
},
});
``
In addition to the message handler, a Bot can also implement an event handler and an expired state handler as follows:
ts
`bot.event("scheduledEvent", async ({ event, client, ctx }) => {
log.info("Received event", event);
});
bot.stateExpired("profile", async ({ state, client, ctx }) => {
log.info("State expired", state);
});
`
Integration Development
[](#integration-development)
Integrations are developped in a similar fashion to Bots. The only difference is that there is 2 classes to instantiate: `IntegrationDefinition` and `Integration` wich stands for the Integration's implementation.
This means that a typical Integration's code would require at least 2 files. Here's an example:
ts
`` // integration.definition.ts
import { IntegrationDefinition } from "@botpress/sdk";
export default new IntegrationDefinition({
name: "myintegration",
version: "0.1.0",
});
// integration.ts
import { Integration } from "@botpress/sdk";
export default new Integration({
channels: {},
actions: {},
register: async ({ ctx }) => {
console.info(`integration installed in bot ${ctx.botId}`);
},
unregister: async ({ ctx }) => {
console.info(`integration uninstalled from bot ${ctx.botId}`);
},
handler: async ({ req }) => {
console.info("received request from external service", req);
},
});
``
The implementation code is actually the one that must be transpiled and bundled to run in Botpress Cloud, but the definition contains fields that are required when creating the Integration with the API. The reason why the definition and the implementation are separated might be obscure for now, but it will become clearer when introducing the CLI and the `generate` command.
Here's an example of a more complete Integration's definition with a proper implementation:
ts
`` // integration.definition.ts
import * as sdk from "@botpress/sdk";
import { z } from "zod";
export default new sdk.IntegrationDefinition({
name: "myintegration",
version: "0.1.0",
public: true,
configuration: {
schema: z.object({
appId: z.string(),
appSecret: z.string(),
}),
},
channels: {
channel: {
messages: {
text: sdk.messages.defaults.text,
image: sdk.messages.defaults.image,
},
tags: {
messages: ["id"],
conversations: ["id"],
},
},
},
tags: {
users: ["id"],
},
actions: {
fetchInventory: {
input: {
schema: z.object({
itemId: z.string(),
}),
},
output: {
schema: z.object({
name: z.string(),
price: z.number(),
}),
},
},
},
events: {},
states: {},
});
// integration.ts
import * as sdk from "@botpress/sdk";
import { ExternalService } from "@externalservice/client";
export default new sdk.Integration({
register: async () => {},
unregister: async () => {},
actions: {
fetchInventory: async (props) => {
const { appId; appSecret } = props.ctx.configuration;
const client = new ExternalService(appId, appSecret);
const inventory = await client.fetchInventory(props.input.itemId);
return {
name: inventory.name,
price: inventory.price,
};
},
},
channels: {
channel: {
messages: {
text: async (props) => {
const { appId; appSecret } = props.ctx.configuration;
const client = new ExternalService(appId, appSecret);
const convId = props.conversation.tags["myintegration:id"]
await client.sendMessage(convId, { text: props.payload.text });
},
image: async (props) => {
const { appId; appSecret } = props.ctx.configuration;
const client = new ExternalService(appId, appSecret);
const convId = props.conversation.tags["myintegration:id"]
await client.sendImage(convId, { imageUrl: props.payload.imageUrl });
},
},
},
},
handler: async ({ req, client }) => {
if (!req.body) {
log.warn("Handler received an empty body");
return;
}
const activity: Activity = JSON.parse(req.body);
log.info(`Handler received event of type ${activity.type}`);
if (!activity.id) {
return;
}
const convRef: Partial<ConversationReference> =
TurnContext.getConversationReference(activity);
switch (activity.type) {
case "message":
const { conversation } = await client.getOrCreateConversation({
channel: "channel",
tags: {
[`${name}:id`]: activity.conversation.id,
},
});
const { user } = await client.getOrCreateUser({
tags: {
[`${name}:id`]: activity.from.id,
},
});
await client.createMessage({
tags: { [`${name}:id`]: activity.id },
type: "text",
userId: user.id,
conversationId: conversation.id,
payload: { text: activity.text },
});
break;
default:
return;
}
},
});
``
The Integration's definition is described by the following fields:
* `name`
The name of the Integration. It must be unique accross all Integrations.
* `version`
The version of the Integration. It must be unique accross all versions of the same Integration.
Currently, only the version `0.2.0` is allowed for public Integrations and `0.0.1` for private Integrations. This is a temporary limitation that will be lifted in a near future.
* `public`
Whether the Integration is public or not. A public Integration can be installed by any Bot, while a private Integration can only be installed by Bots in the same workspace.
* `title`
Display name of the Integration.
* `description`
A description of the Integration.
* `icon`
Path to an SVG file containing the Integration's icon. This path can either be absolute or relative to the Integration's working directory.
* `readme`
Path to a Markdown file containing the Integration's documentation. This path can either be absolute or relative to the Integration's working directory.
* `tags`
A list of tags that can be used to filter users when querying the API.
* `configuration`
The configuration schema of the Integration. The actual configuration is provided by the bot when installing the Integration.
* `events`
A map of events that can be emitted by the Integration. Events can be used to trigger handlers in the Bot.
* `actions`
A map of actions that can be called by the Bot. Actions can be used to trigger handlers in the Integration. Actions are defined by their input and output schemas.
* `channels`
A map of communication channels that can be used by the Bot send a message to the external service. Channels are defined by their messages types. The SDK provides a set of default messages types that can be used to send text, images, videos, etc.
* `states`
Just like for Bots, Integrations can define states that can be used to store data. States are defined by their schema.
* `user`
Allows the Integration to proactively create a user. This is usefull if the Integration needs to send a message to a user that has not yet interacted with the Bot.
The Integration's implementation must implement handlers for the defition's actions and channels as well as a handler for the external service's requests. The first two handlers are called by the Bot when an action or a message is triggered. The last handler is called by the external service when an event is triggered.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Installation](#installation)  
         * [Chatbot Development](#chatbot-development)  
         * [Integration Development](#integration-development)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Notion
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Notion
[ Suggest Edits](/edit/notion)
![](https://files.readme.io/5295aaf-image.png)
The Notion Integration with Botpress enables seamless integration to boost productivity, allowing interactions such as commenting on discussions or pages and database manipulations right from your Botpress bot.
Enhance your workflows and experience a streamlined interaction between Botpress and Notion.
Prerequisites
[](#prerequisites)
* A [Notion Account](https://www.notion.so/signup) and a [Notion Workspace](https://www.notion.so/onboarding)
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Setting up the Notion integration in Botpress
[](#setting-up-the-notion-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Notion integration then click on the "Install to Bot" button, now go back to your bot settings.
The Notion integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Telegram
* **Webhook URL**: The URL for receiving data in Botpress
* **Auth Token**: The token for authenticating requests from Notion
Setting up Notion
[](#setting-up-notion)
1. To get the **Auth Token**, visit [My Integrations](https://www.notion.so/my-integrations) in Notion. Initiate a new integration, associate it with a workspace, and note down the `Internal Integration Secret`. Insert this secret in the `Auth Token` field under the **Integrations** tab of your bot.
![](https://files.readme.io/ba1af96-image.png)
2. Enable Notion Comment Capabilities under the **Capabilities** tab of your bot.
![](https://files.readme.io/bc4dec2-image.png)
That's it! Now the Notion integration is operational and ready for use within your bot.
> ## 📘
>
> Info
>
> To execute certain actions, identification of Notion entities like pages or databases is essential. These IDs can be derived from the URL while viewing the entity or by choosing "Copy Link" from the options menu. For more details, refer to [Get a Database Id - NotionDevelopers](https://developers.notion.com/docs/create-a-notion-integration#step-3-save-the-database-id) .
Functionality
[](#functionality)
Cards
[](#cards)
The integration offers various actions encapsulated in cards, providing an interactive way to communicate between Botpress and Notion.
Add Comment to a Discussion
[](#add-comment-to-a-discussion)
Allows the bot to append a comment to an existing discussion in Notion.
| Input             | Description                                                                                                                      |
| ----------------- | -------------------------------------------------------------------------------------------------------------------------------- |
| **Discussion ID** | To get the Discussion ID, look for the d parameter in the URL. The format is notion.so/pageTitle-pageID?d=**DiscussionID**&pvs=4 |
| **Comment Body**  | The comment body can be a simple text that you want to add as a comment.                                                         |
Add Comment to a Page
[](#add-comment-to-a-page)
Facilitates adding comments at the page level in Notion.
| Input            | Description                                                                                                         |
| ---------------- | ------------------------------------------------------------------------------------------------------------------- |
| **Page ID**      | To get the Page ID, go to the page and copy the ID from the URL. The format is often notion.so/pageTitle-**pageID** |
| **Comment Body** | The comment body can be a simple text that you want to add as a comment.                                            |
Get a Database
[](#get-a-database)
Retrieve details of a specific database to synchronize with `Add Page to a Database` action.
| Input           | Description                                                                         | Format                   |
| --------------- | ----------------------------------------------------------------------------------- | ------------------------ |
| **Database ID** | To retrieve the Database ID, navigate to the database and copy the ID from the URL. | notion.so/**databaseID** |
Add Page to a Database
[](#add-page-to-a-database)
Designed to work in combination with `Get a Database` to guide an [AI task](../docs/ai-task) in generating payloads.
| Input           | Description                                                                         | Format                         |
| --------------- | ----------------------------------------------------------------------------------- | ------------------------------ |
| **Database ID** | To retrieve the Database ID, navigate to the database and copy the ID from the URL. | notion.so/**databaseID**       |
| **Page ID**     | To get the Page ID, go to the page and copy the ID from the URL.                    | notion.so/pageTitle-**pageID** |
Delete a block
[](#delete-a-block)
Permits deletion of entities like pages, blocks, or pages within a database.
| Input        | Description                                                                                                                                 | Format                                       |
| ------------ | ------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------- |
| **Block ID** | Blocks also have unique IDs. To find the Block ID, right-click on the block and choose "Copy Link". The ID is often at the end of the link. | notion.so/pageTitle-pageID?pvs=4#**BlockID** |
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Notion integration in Botpress](#setting-up-the-notion-integration-in-botpress)  
   * [Setting up Notion](#setting-up-notion)  
   * [Functionality](#functionality)  
         * [Cards](#cards)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Safety
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Safety
Botpress provides a robust feature set that ensure AI-driven interactions are safe, controlled, and compliant.
[ Suggest Edits](/edit/safety)
Overview
[](#overview)
Ensuring the safety of AI-driven interactions is a core priority for our team, and for bot builders. The Botpress platform is designed to empower developers while maintaining strict safety standards, giving you the tools needed to build reliable and controlled AI solutions. This overview covers the key safety aspects of Botpress, including constraint management, data privacy, access control, and mitigation of AI-related risks like hallucinations.
Key Safety Features
[](#key-safety-features)
1. **Policy Agent**: Control AI behavior with predefined rules and constraints to ensure responses align with your organization’s standards. The Policy Agent acts as a gatekeeper, enforcing guardrails and mitigating hallucinations by filtering outputs against customizable policies.
2. **Access Control & Permissions**: Secure your environment with granular access control. Define roles and permissions to regulate who can view, edit, and deploy AI models, ensuring that only authorized users can make changes.
3. **Data Privacy & Security**: Botpress prioritizes data security with encryption, anonymization, and secure API connections. Our platform helps you comply with privacy regulations, safeguarding sensitive information across all interactions.
4. **Monitoring & Analytics**: Gain insights into AI behavior and performance through monitoring and analytics tools. Track usage patterns, detect anomalies, and adjust policies in real time to maintain optimal safety levels.
5. **Error Mitigation & Recovery**: Implement fallback mechanisms that catch errors or misbehaviors, redirecting interactions to human agents or predefined safe states. This ensures continuity and reliability even when the AI is uncertain or encounters edge cases.
**Why Safety Matters**
[](#why-safety-matters)
Building trust in AI systems starts with safety. By implementing robust safety measures, Botpress ensures your AI solutions are not only effective but also secure and compliant with industry standards. Our commitment to safety helps you deploy AI with confidence, knowing that you are in control of every interaction.
Updated 27 days ago
---
* [Table of Contents](#)
* * [Overview](#overview)  
         * [Key Safety Features](#key-safety-features)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Schemas
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Schemas
Blueprint that defines the structure, format, and validation rules for data.
[ Suggest Edits](/edit/schemas)
A schema is a blueprint that defines the structure, required fields, data types, and validation rules for a piece of data. In Botpress, schemas are primarily used to ensure that data passed between various components—such as actions, modules, or API requests—meets the expected format and constraints.
Schemas are useful for:
* **Data Validation**: Preventing errors by ensuring that data adheres to the expected format.
* **Consistency**: Enforcing a consistent structure for data across different components.
* **Error Reduction**: Reducing the likelihood of runtime errors caused by unexpected or malformed data.
* **Ease of Maintenance**: Making it easier to understand and manage data flow within your Botpress application.
Creating and Using Schemas
[](#creating-and-using-schemas)
JSON Schema Basics
[](#json-schema-basics)
Botpress uses JSON Schema, a standard for describing the structure and validation constraints of JSON documents.
A JSON Schema can define:
* **Types**: The type of data (e.g., string, number, object, array).
* **Required Fields**: Fields that must be present in the data.
* **Enum Values**: Specific allowed values for a field.
* **Nested Structures**: Complex data structures with multiple levels.
Creating a schema
[](#creating-a-schema)
You can create a new schema by navigating to the Schema menu in the left-hand menu. You can also create a new schema when adding a new variable through the Variables menu.
Using schemas
[](#using-schemas)
You can use schemas instead of selecting a variable type like String or Number. This means that the variable will contain the information in the structure you've defined in your schema.
For example, you might use a variable to contain information about your end user. This variable can use a schema to contain information like email, age, name, and home address, all contained in a single variable and structured by your schema.
Testing Schemas
[](#testing-schemas)
Here's a simple demo schema you can create to familiarize yourself with them.
1. Create a schema for a user object with the following properties:
JavaScript
`zui.object({
name: zui.string(),
age: zui.number(),
email: zui.string().email(),
address: zui.object({
street: zui.string(),
city: zui.string(),
zip: zui.string().length(5)
})
})
`
1. Create a Variable of the user schema type and name it `UserInformation`.
2. \[optionally\] you can use these variables as inputs for workflows, allowing the user to fill in the schema as though it were a form.
Usage in AI Task
[](#usage-in-ai-task)
* Task Instructions:
`Fetch name, age, email and address from the provided input
`
* AI Task Input:
`Rohan Kokkula, 26, at [[email protected]](/cdn-cgi/l/email-protection), received a mysterious parcel at his doorstep:
42 Emerald Lane, Mystic Falls, 560078.
Inside, a map beckoned him to a hidden world beneath Mumbai's bustling streets,
where history and magic intertwined.
`
* Store result in variables: Select the Variable we created above.
Conditionally Show Inputs - Input trees
[](#conditionally-show-inputs---input-trees)
We'll show you how to use discriminated unions in Zod to conditionally include fields in an object schema. We'll go through two examples:
1. Changing the type of a variable based on user input.
2. Conditionally showing an extra setting when an "Advanced Setting" toggle is activated.
![selecting input type text, with no advanced settings](https://files.readme.io/4015772fa59ea2e70290e5c00ed8a78cde7aa3c0d229d5ead1543671f73a90e7-image.png)
selecting input type text, with no advanced settings
![selecting input type number, with advanced settings](https://files.readme.io/71423052c8b254a3d97bc8f02b00b488f5996817d0313c862d62548b7a8cc27b-image.png)
selecting input type number, with advanced settings
Example 1: Changing the Type of a Variable
[](#example-1-changing-the-type-of-a-variable)
In this example, we'll create a schema that allows a variable (`value`) to be either a string or a number, depending on the user's choice.
TypeScript
`z.object({
inputData: z.discriminatedUnion('inputType', [
z.object({
inputType: z.literal('Text'),
// When inputType is 'Text', value is a string
value: z.string().title('Text Value').placeholder('Enter text')
}),
z.object({
inputType: z.literal('Number'),
// When inputType is 'Number', value is a number
value: z.number().title('Numeric Value').placeholder('Enter a number')
})
])
});
`
How It Works
[](#how-it-works)
* **`inputType`**: Acts as the discriminator that determines the type of the `value` field.
* **Discriminated Union**:  
   * If `inputType` is `"Text"`, the schema expects `value` to be a string.  
   * If `inputType` is `"Number"`, the schema expects `value` to be a number.
This approach is useful when you want to change the type of a variable based on a user's selection.
Example 2: Conditionally Showing Extra Settings
[](#example-2-conditionally-showing-extra-settings)
This example demonstrates how to include an extra field when an "Advanced Setting" toggle is turned on.
TypeScript
`z.object({
// ... your other inputs
// Using discriminated union to handle the advanced setting toggle with Yes/No options
settings: z.discriminatedUnion('advancedSetting', [
z.object({
advancedSetting: z.literal('No').describe('Advanced setting is disabled'),
// No extra settings when advancedSetting is "No"
}),
z.object({
advancedSetting: z.literal('Yes').describe('Advanced setting is enabled'),
// Extra setting when advancedSetting is "Yes"
extraSetting: z.string()
.title('Extra Setting')
.placeholder('Enter extra setting')
.describe('Additional setting enabled when the advanced setting is turned on')
})
])
});
`
How It Works
[](#how-it-works-1)
* **`advancedSetting`**: Acts as the discriminator that determines whether to include the `extraSetting` field.
* **Discriminated Union**:  
   * If `advancedSetting` is `"No"`, the schema does not include `extraSetting`.  
   * If `advancedSetting` is `"Yes"`, the schema requires `extraSetting` to be provided.
This pattern is useful when you want to include additional settings only when an "Advanced Setting" option is enabled.
Trying it out
[](#trying-it-out)
Trying it out is very easy!
1. Open Botpress Studio
2. Create and save the schema with discriminatedUnion fields
3. Create a variable in a workflow other than main, set its type to the schema's saved name.
4. Click on the input node for the workflow, then toggle the variable as an input.
5. Go to another workflow and add a card that points to the one with the schema input.
6. You'll now be able to able to see your input tree in all it's glory!
Summary
[](#summary)
* **Discriminated Unions** in Zod allow you to conditionally change the shape of an object.
* They are useful for:
1. Changing the type of a variable based on user input.
2. Conditionally including fields based on a toggle or option.
By using discriminated unions, you can build dynamic and flexible schemas that adapt based on user selections, making your form validation and UI more intuitive and responsive.
Updated 17 days ago
---
* [Table of Contents](#)
* * [Creating and Using Schemas](#creating-and-using-schemas)  
         * [JSON Schema Basics](#json-schema-basics)  
         * [Creating a schema](#creating-a-schema)  
         * [Using schemas](#using-schemas)  
   * [Testing Schemas](#testing-schemas)  
         * [Usage in AI Task](#usage-in-ai-task)  
   * [Conditionally Show Inputs - Input trees](#conditionally-show-inputs---input-trees)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Line
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Line
[ Suggest Edits](/edit/line)
![](https://files.readme.io/b9e5817-image.png)
Prerequisites
[](#prerequisites)
* A channel created on the [LINE Developers Console](https://developers.line.biz/).
* The same channel added to your LINE official account
Setting up the LINE integration in Botpress
[](#setting-up-the-line-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the LINE integration then click on the "Install to Bot" button, now go back to your bot settings.
The LINE integration has the following settings:
* **Enabled**: Whether Botpress will communicate with LINE
* **Webhook URL**: The URL for receiving data in Botpress
* **Channel Access Token**: The token used to authenticate the channel
* **Channel Secret**: The secret used to verify the signature between LINE and Botpress
Setting up Line
[](#setting-up-line)
Channel Access Token
[](#channel-access-token)
To get this token, open the **Messaging API** tab in your channel settings in LINE, scroll to the bottom to the **Channel Access Token** section, and then generate a new one or copy it if the Channel access token was already issued, then paste it in Botpress.
For Long-Lived Channel Access Token: read this [LINE documentation](https://developers.line.biz/en/docs/messaging-api/channel-access-tokens/#long-lived-channel-access-tokens).
Channel Secret
[](#channel-secret)
The **Channel Secret** is used to [verify the signature](https://developers.line.biz/en/docs/messaging-api/receiving-messages/#verifying-signatures) between LINE and Botpress.
To get the secret, open the **Basic settings** tab in your channel configuration in LINE, scroll to the bottom to the **Channel Secret** section, and then copy the secret.
Finalizing Channel Configuration
[](#finalizing-channel-configuration)
The next step is to **Enable** the channel from the top of the screen and copy the webhook URL from the button below the webhook URL. Then click **Save**.
Now, we proceed to the last step by [setting your webhook URL](https://developers.line.biz/en/docs/messaging-api/building-bot/#setting-webhook-url) in LINE.
That's it, you may now start chatting with your bot on LINE!
Content Types Mapping
[](#content-types-mapping)
From Botpress to LINE
[](#from-botpress-to-line)
* **Text** is mapped to [Text Object](https://developers.line.biz/en/docs/messaging-api/message-types/#text-messages)
* Text with **Markdown** is mapped to [Text Object](https://developers.line.biz/en/docs/messaging-api/message-types/#text-messages)
* **Image** is mapped to [Image Object](https://developers.line.biz/en/docs/messaging-api/message-types/#image-messages)
* **Audio** is mapped to [Audio Object](https://developers.line.biz/en/docs/messaging-api/message-types/#audio-messages)
* **Video** is mapped to [Video Object](https://developers.line.biz/en/docs/messaging-api/message-types/#video-messages)
* **File** is **NOT** supported in LINE [Message Types](https://developers.line.biz/en/docs/messaging-api/message-types/)
* **Location** is mapped to [Location Object](https://developers.line.biz/en/docs/messaging-api/message-types/#location-messages)
* **Carousel** is mapped to [Flex Object](https://developers.line.biz/en/docs/messaging-api/message-types/#flex-messages)
* **Card** is mapped to [Flex Object](https://developers.line.biz/en/docs/messaging-api/message-types/#flex-messages)
* **Dropdown** is mapped to [Flex Object](https://developers.line.biz/en/docs/messaging-api/message-types/#flex-messages)
* **Choice** is mapped to [Flex Object](https://developers.line.biz/en/docs/messaging-api/message-types/#flex-messages)
From LINE to Botpress
[](#from-line-to-botpress)
* **Text** is mapped to **Text Object**
* The rest of the types are not currently processed by Botpress
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the LINE integration in Botpress](#setting-up-the-line-integration-in-botpress)  
   * [Setting up Line](#setting-up-line)  
         * [Channel Access Token](#channel-access-token)  
         * [Channel Secret](#channel-secret)  
   * [Finalizing Channel Configuration](#finalizing-channel-configuration)  
   * [Content Types Mapping](#content-types-mapping)  
         * [From Botpress to LINE](#from-botpress-to-line)  
         * [From LINE to Botpress](#from-line-to-botpress)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Messenger
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Messenger
[ Suggest Edits](/edit/messenger)
![](https://files.readme.io/281dbea-image.png)
Prerequisites
[](#prerequisites)
* A [Meta developer app](https://developers.facebook.com/apps/create/) that will serve as the primary platform for managing connection between Messenger and Botpress, including the configuration of webhooks and access tokens.
* A [Facebook page](https://www.facebook.com/pages/create/) that you own or has the developer role, this is needed to use the Messenger API.
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress Bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Setting up the Messenger integration in Botpress
[](#setting-up-the-messenger-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Messenger integration then click on the "Install to Bot" button, now go back to your bot settings.
The Messenger integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Messenger
* **Webhook URL**: The URL for receiving data in Botpress
* **App Id**: The id of your Meta App
* **App Secret**: The secret of your Meta App
* **Verify Token**: The token used to verify the webhook requests
* **Page Id**: The id of your Facebook page
* **Access Token**: The access token used to send messages to the Messenger API
Setting up Messenger
[](#setting-up-messenger)
Create a Facebook Page
[](#create-a-facebook-page)
If you do not already have a Facebook page you will need to create one. You can find details on how to create a new Facebook page [here](https://www.facebook.com/pages/create/). To link your chatbot to a pre-existing page, you must have an administrator or developer role.
Messenger API version
[](#messenger-api-version)
Botpress can only interact with the version 15.0 or higher of the Messenger API. It is not the default version in the app settings so it must be changed.
1. Go to your Meta app start page
2. In the left sidebar, expand the **Settings** menu and select **Advanced**
3. In the **Upgrade API version** section, select v15.0 or higher as the API version
4. Click on **Save changes**
Add Messenger Product
[](#add-messenger-product)
Messenger is not added by default in your Meta app, so it must be added manually
1. In the left sidebar, click on **Add Product**
2. In the Facebook Messenger section click **Set Up**
App Id and Secret
[](#app-id-and-secret)
1. In the left sidebar, expand the **Settings** menu and select **Basic**. Here you can find the App ID and App Secret
2. Click on the **Show** button in the **App Secret** text box. Copy the App Id and App Secret to your channel configuration
Verify Token
[](#verify-token)
The verify token is used by Facebook to verify that you are the real owner of the provided webhook
You can generate any random alphanumerical string for this configuration. Paste it in your **Verify Token** channel configuration
Page Id and Access Token
[](#page-id-and-access-token)
1. In the left sidebar, expand the **Messenger** menu and select **Messenger API Settings**
2. In the **Access Tokens** section, click **Add or remove Pages** and add your Facebook page
3. Copy the number under your page name and paste it in your **Page Id** channel configuration
4. Click on **Generate token**. Copy this token and paste it in the **Access Token** channel configuration
Save Configuration
[](#save-configuration)
Channel configuration is completed, you can now click **Save**. It is important to save your configuration in Botpress before updating the webhook in the Meta app settings, otherwise Meta will be unable to validate the webhook URL.
Webhook Configuration
[](#webhook-configuration)
To receive messages from Messenger in your Botpress bot, you will need to setup a webhook.
1. Go to your Meta app.
2. In the left sidebar, expand the **Messenger** menu and select **Messenger API Settings**
3. In the **Webhooks** section, click **Add Callback URL**
4. Copy paste the **Webhook URL** provided in the integration configuration page in Botpress.
5. Copy and paste the **Verify Token** that you generated earlier in the integration configuration page in Botpress.
6. Click on **Verify and save**. Make sure your channel configuration was saved before doing this step, otherwise the webhook validation will fail
7. Click on **Add Subscriptions**, then select `messages` and `messaging_postbacks`. Then click **Save**.
You may now start chatting with your bot on Messenger!
**Note**: If the bot does not answer to some people, that's probably because your app has not been reviewed by Meta yet (see [this section](../docs/instagram#submit-your-app-for-meta-review)). But don't worry, this is not mandatory to test your bot.
Submit your App for Meta Review
[](#submit-your-app-for-meta-review)
When your app is in Development Mode, your bot will work for admins, developers, and testers of the app only. After your app is approved and made public, it will work for the general public.
Read more about the App Review process on [the official documentation](https://developers.facebook.com/docs/app-review/submission-guide) and find some help if necessary [in this Github issue](https://github.com/microsoft/botframework-sdk/issues/1465).
You can find some troubleshooting [in this documentation](https://developers.facebook.com/docs/app-review/support/rejection-guides/messenger) in case you app get rejected.
Send Greeting/Welcome Message
[](#send-greetingwelcome-message)
You can create a customized greeting from your Page that will appear in Facebook messages and in the Messenger app when someone begins a conversation with your Page for the first time. Your Page's greeting will appear before any messages are sent.
Read more about the [Messenger Greeting/Welcome Message](https://www.facebook.com/help/1698046970464236)
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Messenger integration in Botpress](#setting-up-the-messenger-integration-in-botpress)  
   * [Setting up Messenger](#setting-up-messenger)  
         * [Create a Facebook Page](#create-a-facebook-page)  
         * [Messenger API version](#messenger-api-version)  
         * [Add Messenger Product](#add-messenger-product)  
         * [App Id and Secret](#app-id-and-secret)  
         * [Verify Token](#verify-token)  
         * [Page Id and Access Token](#page-id-and-access-token)  
         * [Save Configuration](#save-configuration)  
   * [Webhook Configuration](#webhook-configuration)  
   * [Submit your App for Meta Review](#submit-your-app-for-meta-review)  
   * [Send Greeting/Welcome Message](#send-greetingwelcome-message)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Microsoft Teams
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Microsoft Teams
[ Suggest Edits](/edit/microsoft-teams)
![](https://files.readme.io/2871c4d-image.png)
Prerequisites
[](#prerequisites)
* A [Microsoft 365 Business account](https://www.microsoft.com/en-us/microsoft-365/business/)
* A [Botpress Cloud account](https://sso.botpress.cloud) and a [Botpress bot](https://botpress.com/docs/cloud/getting-started/create-and-publish-your-chatbot/)
Setting up the Microsoft Teams integration in Botpress
[](#setting-up-the-microsoft-teams-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Microsoft Teams integration then click on the "Install to Bot" button, now go back to your bot settings.
The Microsoft Teams integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Microsoft Teams
* **Webhook URL**: The URL for receiving data in Botpress.
* **App Id**: The App Id of your bot in Azure
* **App Password**: The App Secret of your bot in Azure
Setting up Microsoft Teams
[](#setting-up-microsoft-teams)
Register App
[](#register-app)
1. In the Azure portal, open the [App registrations](https://portal.azure.com#blade/Microsoft%5FAAD%5FRegisteredApps/ApplicationsListBlade) page
2. Click **New registration**, then choose a name for your application
3. In the section **Supported account types**, choose the type that's most appropriate for your use case. We support Single and Multi Tenant accounts. Check out [this article](https://learn.microsoft.com/en-us/security/zero-trust/develop/identity-supported-account-types) to learn more (in short, Single Tenant means the app will be available for your org only, and Multi Tenant will make it public). After selecting, click **Register**
4. Copy paste the value of `Application (client) ID` to the **App Id** channel configuration in Botpress
App Password
[](#app-password)
1. Find the **Certificates & secrets** page in the sidebar, click **New client secret**, then fill in the required fields
2. Copy the value from the **Value** column and paste it in the **App Secret** channel configuration in Botpress
3. Save the settings by clicking the "Save configuration" button
Create Your Microsoft Bot
[](#create-your-microsoft-bot)
1. Navigate to the [Bot Framework Creation page](https://dev.botframework.com/bots/new)
2. Fill the **Display name** and **Bot handle** fields with whatever value
3. Copy paste you **App Id** to the app id field
4. Copy the Webhook URL provided in Botpress to the **Messaging endpoint** field
5. Choose a tenant for the **App type**. Follow the same type you chose in the **Register App** section
6. Paste the App ID from the Azure bot in the **Microsoft App ID** field
7. Read and agree to the terms then click **Register**
8. On the next page (**Connect to channels**), under the section, **Add a featured channel**, click **Configure Microsoft Teams Channel**, then click **Save**
Accessing the Bot in MS Teams
[](#accessing-the-bot-in-ms-teams)
1. Navigate to the [My Bots page](https://dev.botframework.com/bots/)
2. Click on your bot's name
3. Under the **Connect to channels** section, click on **Microsoft Teams**
4. The bot should open in your MS Teams
That's it, you may now start chatting with your bot on Microsoft Teams!
> ## 📘
>
> The bot will only be available to you if you have a Microsoft 365 Business account and if you are logged in to MS Teams with that account.
Making the bot available in your Organization
[](#making-the-bot-available-in-your-organization)
1. Add the Developer Portal App to your Teams (or do it via the website)
![](https://files.readme.io/cdcfaf0-image.png)
2. Click the **Developer Portal App** tab in the sidebar, then **Apps**. Now click the **New app** button
![](https://files.readme.io/493d192-image.png)
3. In the left-side menu of the App, go to the **App Features** page under the **Configure** section then click "Bot"
![](https://files.readme.io/593ef2c-image.png)
4. Select your existing bot from BotFramework in the dropdown. Check the desired scopes (at least **Personal** for 1:1 conversations)
![](https://files.readme.io/d12308e-image.png)
5. Fill out all the required fields in the Basic Information page of the Configure section
![](https://files.readme.io/89ab3e5-image.png)
6. Click **Publish**, then **Publish to your Org**
![](https://files.readme.io/cb6c80c-image.png)
7. Go to your Team App store, search for your app, then add it
![](https://files.readme.io/ee8ccd2-image.png)
8. The bot is now available in the **App** section to all members of your organization!
> ## 📘
>
> Info
>
> In order to update your bot's behavior, just **Publish** the new version in Botpress. The changes will then be reflected in MS Teams, there's no need to change any settings in the Microsoft apps.
> ## 📘
>
> Note
>
> Botpress verifies the signature of the requests coming to the Webhook URL so that only Microsoft Teams can send data to your bot. Requests made from Postman or any other means will be rejected.
Setting up policies
[](#setting-up-policies)
![](https://files.readme.io/72c6394-image.png)
If you're unable to send message to the bot (App), make sure you've enabled the policy to upload custom apps.
Go to Setup Policies -> Turn on **Upload custom apps**
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Microsoft Teams integration in Botpress](#setting-up-the-microsoft-teams-integration-in-botpress)  
         * [Setting up Microsoft Teams](#setting-up-microsoft-teams)  
         * [Create Your Microsoft Bot](#create-your-microsoft-bot)  
         * [Accessing the Bot in MS Teams](#accessing-the-bot-in-ms-teams)  
         * [Making the bot available in your Organization](#making-the-bot-available-in-your-organization)  
   * [Setting up policies](#setting-up-policies)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Members
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Members
View and manage access to a Workspace.
[ Suggest Edits](/edit/members)
This tab lists all of the members who have access to the Workspace.
From here, you can adjust what permissions and roles users have.
> ## 💼
>
> Premium Feature
>
> Only Team and Enterprise plan customers have access to dedicated RBAC (Role-Based Access Control).
>
> PAYG users can add and remove users to their Workspace.
Collaborator Roles
[](#collaborator-roles)
Viewer
[](#viewer)
Can only view bots and Workspaces. Cannot make any edits or changes.
Billing manager
[](#billing-manager)
Can view and modify the Workspace's billing information.
Developer
[](#developer)
Can create, view, and update bots in the Workspace. Can only delete bots they have created.
Manager
[](#manager)
Can create, view, and update bots in the Workspace. Can view audit records.
Administrator
[](#administrator)
Can add and remove Workspace collaborators, and manage all bots in the Workspace.
Owner
[](#owner)
The user who creates a Workspace is automatically its owner, and has the privileges of all roles.
> ## 🚧
>
> Workspace ownership
>
> Workspace ownership cannot be moved or assigned to another user.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Collaborator Roles](#collaborator-roles)  
         * [Viewer](#viewer)  
         * [Billing manager](#billing-manager)  
         * [Developer](#developer)  
         * [Manager](#manager)  
         * [Administrator](#administrator)  
         * [Owner](#owner)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Knowledge Base
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Knowledge Base
[ Suggest Edits](/edit/knowledge-base)
The Botpress Knowledge Base is a powerful tool that allows users to manage and access organizational knowledge in one central location.
It has been designed to replace the traditional Q&A system and enable users to upload various sources of information, including PDFs, Text Document, and website URLs.
Enabling the Knowledge Base Agent
[](#enabling-the-knowledge-base-agent)
You need to enable the Knowledge Base Agent to use the Knowledge Base feature in Botpress.
Click on the **Agent** Tab in the Explorer on the left panel of the studio. You will find the [**Knowledge Base**](../docs/agents#knowledge-agent) Agent in the list of available agents. Click on the **Enable** button to enable the Knowledge Base Agent.
Creating a Knowledge Base
[](#creating-a-knowledge-base)
To create a Knowledge Base, click on the **Add Knowledge Base** Icon in the Explorer on the left panel of the studio. You can create folders and organize your knowledge bases as per your preferences.
Description
[](#description)
When you create a Knowledge Base in Botpress, it's important to provide a brief description that explains what the Knowledge Base is about and what kind of information it contains.
This helps the system understand what type of questions to expect and gives it a better chance of finding the right answers for your users.
How to write the description
[](#how-to-write-the-description)
Let's say you work at a company that sells different types of home appliances, such as refrigerators, washing machines, and ovens. You can create a Knowledge Base in Botpress to help your customer support team quickly find information and answers to common questions about these products.
When creating the Knowledge Base, you would provide a brief description that outlines the purpose and scope of the Knowledge Base.
For example,
**"This Knowledge Base provides information and support for our home appliances product line, including troubleshooting tips, user manuals, and frequently asked questions."**
This description helps the NLU engine understand the focus of the Knowledge Base and identify the relevant sources of information to answer customer queries, such as **"How do I clean the filter in my washing machine?"** or **"What should I do if my oven is not heating up properly?"**
Knowledge Sources
[](#knowledge-sources)
1\. Documents
[](#1-documents)
The **Documents** KB Source allows users to upload various file formats, including **PDFs**, **HTML** files, **TXT** files, **DOC** files, and **DOCX** files. This feature enables users to create a comprehensive Knowledge Base by incorporating different types of documents, such as manuals, guides, reports, and more.
Let's consider a scenario where a company deals with medical equipment. The organization's support team frequently encounters inquiries about the usage and maintenance of their products. To address this, they decide to utilize the Documents Knowledge Source in Botpress to provide customers with easy access to relevant information.
Using this feature, the team uploads a range of files related to their medical equipment, such as **PDF manuals**, **HTML guides**, and **TXT documents** containing troubleshooting steps. They organize these documents into appropriate categories, such as **"Product Manuals"**, **"Troubleshooting Guides"**, and **"Usage Instructions"**, ensuring that customers can find the information they need quickly.
For instance, if a user searches for **"How to calibrate the XYZ device,"** Botpress will search through the uploaded documents, and return the relevant instructions from the Knowledge Base.
Supported File Formats
[](#supported-file-formats)
* **PDF documents** are commonly used for manuals, guides, and other types of documentation. With Botpress, you can upload PDFs to your Knowledge Base, making it easy for employees to search for and access the information they need.
* **HTML documents** are used for web pages and other online content. By uploading HTML documents to Botpress, you can make this web content accessible to employees who may not have internet access.
* **TXT files** are Text Document documents, similar to the ones supported by the Text Document Knowledge Base. However, TXT files can contain more complex formatting, such as tables and images. By uploading TXT files to Botpress, you can make this type of content searchable and easily accessible.
* **DOC** and **DOCX** files are commonly used for word processing documents, such as memos and reports. By uploading these files to Botpress, you can make them searchable and easily accessible to employees.
> ## 📘
>
> File Limits
>
> You can upload upto **100** documents to the Knowledge Base, with a size limit of **50MB** per document. This feature is designed for optimal utilization.
2\. Website
[](#2-website)
The **Web Pages** KB Source allows users to upload website s to their Knowledge Base. This feature enables users to create a comprehensive Knowledge Base by incorporating different types of web content, such as articles, blog posts, and online forums.
Add from URLs
[](#add-from-urls)
To add a web page to your Knowledge Base, you can simply enter the URLs (one URL per line, max 350 character / url) in the **Add from URLs** field. Botpress will automatically retrieve the content from the web page and add it to your Knowledge Base.
Add from Site Map
[](#add-from-site-map)
You can also add multiple web pages to your Knowledge Base by entering the **Site Map URL**. This file contains a list of URLs that you want to add to your Knowledge Base. Botpress will automatically retrieve the content from these web pages and add them to your Knowledge Base.
3\. Search The Web
[](#3-search-the-web)
When using the Web Search Knowledge Base Source, you have the ability to specify the websites to include or exclude from your search. This allows you to customize the search to meet your specific requirements. Here are three options you can consider:
On which websites should we search on?
[](#on-which-websites-should-we-search-on)
* **Search on specific websites**: You can provide a list of website domains that you want the Botpress NLU engine to include in its search. For example, if you want to focus on retrieving information from trusted sources within your organization, you can include domains and subdirectories like "yourcompany.com" or "internalknowledgebase.com/specific-section". This ensures that the search is targeted to specific websites relevant to your Knowledge Base.
* **Search the entire web**: If you select this option, the Botpress NLU engine will conduct searches across the entire web. This is useful when you want to gather information from a wide range of sources, including external websites and online communities. It enables you to access a broader set of information that may be helpful to your Knowledge Base.
* **Exclude specific websites from the search**: Sometimes, you may want to exclude certain websites from the search results. This option allows you to specify a list of website domains that should be excluded from the search.
For example, if you want to filter out unreliable sources or competitor websites, you can exclude their domains from the search. This ensures that the search focuses on credible and relevant information.
Filter search results by time period
[](#filter-search-results-by-time-period)
When utilizing the Web Search Knowledge Base Source, you can further enhance your search capabilities by filtering search results based on a specific time period. This feature allows you to narrow down the results to obtain the most relevant and up-to-date information for your Knowledge Base.
To enhance your web search capabilities and filter search results by time period, you can utilize the following options:
* **Do not filter based on time**: Selecting this option ensures that the search results are not filtered based on a specific time period. It includes all available information without any time restrictions.
* **Pages discovered in the last 24 hours**: By choosing this option, the search results will focus on web pages that have been discovered or indexed within the past 24 hours. This allows you to access the most recent information available on the web.
* **Pages discovered in the last 7 days**: Selecting this option narrows down the search results to web pages that have been discovered or indexed within the past 7 days. It helps you stay updated with recent developments and information.
* **Pages discovered in the last 30 days**: This option filters the search results to include web pages that have been discovered or indexed within the past 30 days. It provides a slightly broader time range for retrieving recent information.
By utilizing these options, you can tailor the time period for your web search and ensure that the search results align with your Knowledge Base requirements. Whether you prefer real-time updates or a broader range of recent information, these options help you refine your search results accordingly.
4\. Text Document
[](#4-text-document)
The Text Document KB Source allows users to create/add plain textual information, such as FAQs, guides, and manuals. This Knowledge Base replaces Botpress's old Q&A system and is designed to provide users with quick access to information on various topics.
Here's an example of how the Text Document Knowledge Base could be used in a company that sells different types of home appliances, such as **refrigerators**, **washing machines**, and **ovens**:
Let's say that the customer support team at this company receives a lot of questions about how to troubleshoot common problems with their products. The team decides to create a Knowledge Base in Botpress to provide quick and easy access to this information.
Using the Text Document Knowledge Base, the team creates a series of Text Document documents that contain troubleshooting tips for each type of product. They organize these documents by title (e.g., "Refrigerators," "Washing Machines," "Ovens") and add description for common issues (e.g., "Not cooling," "Won't spin," "Not heating up").
So, when users search for a specific problem like **My refrigerator is not cooling**, Botpress's Natural Language Understanding (NLU) functionality will retrieve the relevant response from the Text Document Knowledge Base, providing users with the necessary troubleshooting information.
5\. Tables: Organized Information
[](#5-tables-organized-information)
You can connect your tables of data to a knowledge base, allowing users to directly search for information. This can be especially invaluable for vast datasets, as it provides a straightforward and user-friendly method to retrieve data.
**Benefits**
By integrating tables into your knowledge base, end-users can readily ask for and receive information straight from your table data. As a bot builder, you will appreciate the ease with which this can be implemented on Botpress.
**Requirements**
Prior to proceeding, ensure you have the following:
1. A table of data
2. Knowledge Agent should be enabled
3. Mark at least one column in your data table with a `Searchable` property.
4. Have a Knowledge Base with a source set to `Table`, and select the table that will be utilized for this feature.
The `Searchable` property can be enabled either during the creation of a column or later on by right-clicking the column, selecting "Edit", and toggling on `Searchable`.
**Usage Example**
If you have a table of organized data, users can ask questions like:
* "How many X are there?"
* "What is the Y of X?"
* "Show me X that have Y."
* "How X is Y?"
For instance, if you're running a chair e-shop, users can get product information by asking:
* "How many chairs are there?"
* "What is the price of your red velvet chair?"
* "Show me products priced at $20."
**Manual Answer Option**
If you prefer to review and curate answers before they get sent, you can toggle on the "Answer Manually" option in the Knowledge Agent.
**Limitations**
Keep in mind that the feature may not provide accurate counts for "How many \[products / items / rows\]"-type questions. Internally, the Knowledge Base runs a search before delivering answers, and since not all results are returned, the actual counts might be off.
Storage Quota
[](#storage-quota)
The Knowledge Base feature in Botpress is designed to provide users with quick access to information on various topics. However, the amount of information that can be stored in the Knowledge Base is limited by the storage quota.
The storage quota is the maximum amount of data that can be stored in the Knowledge Base.
> ## 📘
>
> Limit
>
> All chatbots have a limit of **5000** vectors - which is the equivalent to approximately 200 blog articles or 1000 PDF pages.
Enabling/Disabling KB on Capture Information cards
[](#enablingdisabling-kb-on-capture-information-cards)
In Botpress, you have the ability to enable or disable the Knowledge Base feature for specific Capture Information cards - it is enabled by default.
To enable the Knowledge Base on a Capture Information Card:
1. Locate the Capture Information Card.
2. In the Inspector panel, look for the option called **Knowledge Base**.
3. In the "Search all KBs" field, you can choose either specific KBs to search in, or you can choose "Disable Search"
By enabling this option, you allow the Knowledge Base to provide answers during the interaction when the user is asked for a response. If the user's input is relevant to the information stored in the Knowledge Base, Botpress's Natural Language Understanding (NLU) will retrieve the corresponding answer from the Knowledge Base and display it to the user. The conversation then proceeds to the next step of capturing information.
This feature helps to enhance the user experience by providing quick and accurate answers sourced from the Knowledge Base when appropriate.
If you disable the Knowledge Base feature on the Capture Info action in Botpress, the system **will not** utilize the Knowledge Base to provide answers during the interaction.
Disabling the Knowledge Base means that when users are prompted for a response and their input matches a query that could be answered using the Knowledge Base, Botpress's NLU will not retrieve answers from the Knowledge Base. Instead, the conversation will continue without incorporating information from the Knowledge Base.
By disabling the Knowledge Base, you essentially exclude it as a potential source of information for those specific cards. This may be useful if you want to handle user responses differently or if you prefer to rely on other mechanisms to provide answers or capture information in those particular cards.
Let's consider an example of a chatbot for a travel agency. The bot is designed to capture information from users regarding their travel preferences and provide relevant recommendations. The bot uses the Capture Info action in certain cards to gather specific details from users.
Example 1: Enabling the Knowledge Base
[](#example-1-enabling-the-knowledge-base)
`Node: Capture Destination
Action: Capture Info
Scenario: The user is asked to provide their desired travel destination.
Included Knowledge Bases: Search all KBs
User Input: "I want to go to Paris."
Response: The bot's Natural Language Understanding (NLU) recognizes that the user's input is relevant to the Knowledge Base. It retrieves information from the Knowledge Base related to travel destinations and displays an appropriate answer: "Paris is known for its romantic atmosphere, iconic landmarks such as the Eiffel Tower, and vibrant cultural scene."
`
The conversation then proceeds to the next step of capturing additional information, such as travel dates or budget.
Example 2: Disabling the Knowledge Base
[](#example-2-disabling-the-knowledge-base)
`Node: Capture Transportation
Action: Capture Info
Scenario: The user is asked to specify their preferred mode of transportation for travel.
Included Knowledge Bases: Disable Search
User Input: "I prefer to travel by train."
Response: Since the Knowledge Base feature is disabled for this card, the bot's NLU does not consult the Knowledge Base. It simply captures the user's response without incorporating any information from the Knowledge Base.
`
The conversation continues to the next step based on the specific logic or action defined for that card, without utilizing the Knowledge Base to provide answers or additional information.
In both examples, enabling or disabling the Knowledge Base on the Capture Info action determines whether the bot incorporates Knowledge Base information into the conversation flow or relies solely on other mechanisms to handle user responses.
Removing the references
[](#removing-the-references)
To disable auto-generated references, utilize the **Execute Code** card with the following code:
JavaScript
`workflow.kbAnswerWithoutRef = event.preview.split("References:")[0].
`
Then, input `@kbAnswerWithoutRef` into your text or capture card. Make sure to create the variable `kbAnswerWithoutRef` in your workflow.
Scoping the Knowledge Base by Folders
[](#scoping-the-knowledge-base-by-folders)
You can scope the Knowledge Base by folders to limit the search to specific folders. This allows you to focus on a particular area of interest and retrieve relevant information from the Knowledge Base.
~~Learn more about Scoping the Knowledge Base with Folders~~
Handle No Answer in KB
[](#handle-no-answer-in-kb)
If no answer is found in the KB, you want to add a default message to handle that case. You can add a transition/expression card and add the following:
JavaScript
`!event.state.agentVariables.KnowledgeAgent.turn.answer
`
This will make the bot check if there is a value in the "answer" field; if not, then this transition/expression card will be fired.
Connect this card to a node with the message you want to show.
Debugging
[](#debugging)
If your bot is not returning the expected results you can try debugging it in a few different ways:
1\. Check the [Logs](../docs/debugger-logs-json#logs)
[](#1-check-the-logs)
The logs will show you the exact query that was sent to the Knowledge Base and the results (including source name, content preview, amount of tokens used by the content, row metadata if the source is a table) if there are any matches.
With that information you can try refining what is sent to the Knowledge Base or the content itself.
2\. Check the [Emulator](../docs/emulator) answers
[](#2-check-the-emulator-answers)
Automatic answers from the Knowledge Base - answers that the bot displays without the need of a Text card - contain citations in their body.
By hovering a citation you can see the source name (or its type if unnamed), the page, document or table name, the exact page number (for documents) or the row number (for tables), and a preview of the content.
With that information you can try refining the Knowledge Base content or the associated metadata (names and descriptions).
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Enabling the Knowledge Base Agent](#enabling-the-knowledge-base-agent)  
   * [Creating a Knowledge Base](#creating-a-knowledge-base)  
   * [Description](#description)  
         * [How to write the description](#how-to-write-the-description)  
   * [Knowledge Sources](#knowledge-sources)  
         * [1\. Documents](#1-documents)  
         * [Supported File Formats](#supported-file-formats)  
         * [2\. Website](#2-website)  
         * [3\. Search The Web](#3-search-the-web)  
         * [4\. Text Document](#4-text-document)  
         * [5\. Tables: Organized Information](#5-tables-organized-information)  
         * [Storage Quota](#storage-quota)  
   * [Enabling/Disabling KB on Capture Information cards](#enablingdisabling-kb-on-capture-information-cards)  
         * [Example 1: Enabling the Knowledge Base](#example-1-enabling-the-knowledge-base)  
         * [Example 2: Disabling the Knowledge Base](#example-2-disabling-the-knowledge-base)  
   * [Removing the references](#removing-the-references)  
   * [Scoping the Knowledge Base by Folders](#scoping-the-knowledge-base-by-folders)  
   * [Handle No Answer in KB](#handle-no-answer-in-kb)  
   * [Debugging](#debugging)  
         * [1\. Check the Logs](#1-check-the-logs)  
         * [2\. Check the Emulator answers](#2-check-the-emulator-answers)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Logs
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Logs
Detailed records of bot activities, errors, and system performance in a production environment.
[ Suggest Edits](/edit/logs)
Botpress production logs are detailed records of the activities, events, and errors that occur during the execution of a Botpress bot in a production environment. These logs are essential for monitoring your bot's performance, diagnosing issues, and maintaining the overall health of your bot project.
You can filter logs by date and time to narrow down your search for a specific event or conversation.
Custom logging
[](#custom-logging)
The `console.log()` function is used to log information to the Botpress logs.
To add logging to your bot, follow these steps:
* In a new or existing Execute Code card, add the following code:
TypeScript
`console.log("Some text");
`
* Replace the text with the information you wish to log, or the statement you'd like to print to the console.
Once you've saved and published your changes, your bot will print that statement to its logs every time the Execute Code card is triggered as part of a workflow.
You can customize this message to include any information that you need to log, such as user input or API responses.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Custom logging](#custom-logging)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Monitor
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Monitor
Understand your bot's performance over time.
[ Suggest Edits](/edit/monitor)
Monitoring your bot project is an essential step in ensuring its success and longevity.
There are several ways you can analyze real-time information about what your bot is doing, how it is handling conversations, and any errors it might be running into.
Event debugger
[](#event-debugger)
The Event Debugger is a panel located in the Botpress Studio, which you can use to understand your bot's behaviour as you're testing your bot. It shows information about test conversations you have in the emulator and is an essential step in understanding your bot's logic.
Usage
[](#usage)
The Usage tab details resource usage like how many messages your bot has consumed, and which bots in your workspace are consuming how many resources over time.
Logs
[](#logs)
The Logs tab shows a log of all actions and events taken by your bot while it's in production. This won't show any conversations that occur in the emulator. The Logs tab allows you to track all the actions your bot is taking and analyze any errors it might be running into.
Conversations
[](#conversations)
The Conversations tab shows a log of all conversations your bot has had while it's been in production. You can view information like the user, the conversation transcript, and a summary of the conversation.
Analytics
[](#analytics)
The Analytics tab shows detailed statistics about your bot's conversations, like how many users it's engaged with, how many of them are returning users, and how many messages are sent on average for each session.
Team Plan and Enterprise subscribers can further customize this tab as well as which events are tracked.
Events
[](#events)
The Events tab details your bot's specific events as well as the status of their execution. You can quickly scan this tab for errors and to understand how to resolve any problems your bot might be running into.
Issues
[](#issues)
The Issues tab only shows specific problems your bot has encountered while it's been in production. You can use this tab to keep an eye on the real-time status of any errors and resolve them as needed.
Updated about 2 months ago
---
* [Table of Contents](#)
* * [Event debugger](#event-debugger)  
   * [Usage](#usage)  
   * [Logs](#logs)  
   * [Conversations](#conversations)  
   * [Analytics](#analytics)  
   * [Events](#events)  
   * [Issues](#issues)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Use Your Own LLM
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Use Your Own LLM
Botpress LLM Interfaces allows you to bring your own LLM for use in your bot.
[ Suggest Edits](/edit/llm-interfaces)
This guide outlines how to integrate your own Large Language Model (LLM) with Botpress, enabling you to manage privacy, security, and have full control over your AI outputs.
Using Your Own LLM
[](#using-your-own-llm)
Why Bring Your Own LLM?
[](#why-bring-your-own-llm)
Botpress Studio offers an adaptable and powerful platform for building, deploying, and managing AI agents and chatbots. While Botpress provides a suite of pre-integrated language models, you may have specific needs that call for a more customized approach. Bringing your own (LLM) can enhance your solution’s capabilities, allowing you to leverage specialized models tailored to your unique requirements, domain expertise, or compliance needs.
Tailored Performance and Domain Expertise
[](#tailored-performance-and-domain-expertise)
Integrating your LLM into Botpress Studio allows you to use models fine-tuned on industry-specific data, enhancing the relevance and quality of responses. This is particularly valuable for industries like finance, healthcare, legal, or customer service, where general-purpose models may not understand the nuanced terminology or context.
Full Control Over Model Behavior
[](#full-control-over-model-behavior)
By bringing your own LLM, you gain complete control over the model’s training data, parameters, and behavior. This flexibility enables you to optimize for specific outputs, ensure the language used aligns with your brand voice, and adjust to any special handling requirements.
Enhanced Privacy and Security
[](#enhanced-privacy-and-security)
In industries with strict data privacy regulations, such as GDPR or HIPAA, maintaining control over your LLM can help ensure compliance. With your own LLM, you have greater control over data handling, access, and storage, minimizing risks associated with third-party models and data leaks.
Cost Efficiency and Scalability
[](#cost-efficiency-and-scalability)
Depending on your scale and use case, managing your LLM can lead to significant cost savings. By optimizing your model’s architecture and usage, you can better control computational costs and resource allocation, particularly when compared to the potentially high API costs of third-party services.
Integration with Existing AI Pipelines
[](#integration-with-existing-ai-pipelines)
For organizations already investing in AI infrastructure, integrating their own LLM with Botpress Studio can seamlessly extend their current pipelines. This approach reduces redundancy, leverages existing models and datasets, and aligns with in-house development workflows.
Experimentation and Customization
[](#experimentation-and-customization)
Bringing your own LLM provides the freedom to experiment with new architectures, training techniques, and optimization strategies. This freedom is essential for innovation, allowing you to test what works best for your specific application without being limited by the constraints of externally managed models.
Performance Optimization and Fine-Tuning
[](#performance-optimization-and-fine-tuning)
In Botpress Studio, you can fine-tune your LLM’s performance based on real-world interactions. This iterative process of adjusting and retraining the model can lead to superior outcomes, as your LLM evolves to meet the changing needs of your users.
Differentiation and Competitive Advantage
[](#differentiation-and-competitive-advantage)
Owning and customizing your LLM allows you to differentiate your product from competitors using standard models. A unique LLM strategy can become a key value proposition, offering enhanced user experiences or capabilities that are not easily replicated.
> ## 💳
>
> For LLM providers
>
> If you're interested in monetizing your own LLM by making it available for use on Botpress, [contact us.](https://botpress.com/contact-us)
Getting access
[](#getting-access)
> ## 📘
>
> Ask for Access First!
>
> LLM Interfaces is a powerful feature, and requires users to validate the use case with us, before getting access.
[iframe](https://share.hsforms.com/1mohlsPa5RsycE6ufHWrBhAcbihu "share.hsforms.com")
Instructions
[](#instructions)
There are three steps to use your own LLM: creating and configuring an integration, adding the LLM invocation logic, and selecting the LLM in the Botpress Studio.
1\. Create and configure an integration
[](#1-create-and-configure-an-integration)
Start by [creating an integration](/docs/getting-started-1). Once you've done that, you must adjust the integration definition by extending it with the `interfaces.llm` interface using the `.extend()` method.
integration.definition.ts
`import { z, IntegrationDefinition, interfaces } from "@botpress/sdk";
export default new IntegrationDefinition({
// ... other configuration properties
name: "my-llm",
entities: {
modelRef: {
schema: z.object({
id: z.string(),
}),
},
},
})
.extend(interfaces.llm, ({ modelRef }) => ({
modelRef,
}));
`
In the above example, lines 14 - 16 were added. Once you are done with that, it's time to implement the LLM logic!
2\. Add the LLM invocation logic
[](#2-add-the-llm-invocation-logic)
When you use the `interfaces.llm`, you must implement two actions: `generateContent` and `listModels`. These actions define the core functionality of your LLM integration.
**The listModels method**
Whenever a user chooses an LLM model in the Botpress Studio, all listModels actions are invoked on installed integrations to list all available models.
Should you wish to act as an LLM provider for Botpress and have users pay for tokens through Botpress, you can use the costPer1MTokens to charge users for using your LLM. For all other use cases, the costPer1MTokens should be set to 0, and billing handled by yourself.
**The generateContent method**
This method, whos input is a standard input for invoking a create chat completion, must convert the format to a format compatible with your llm, invoke your LLM via api or a client library, and convert the format back to the Botpress format. You can see a working example [here](https://github.com/botpress/botpress/blob/master/integrations/anthropic/src/actions/generate-content.ts). For the format types, we suggest using IntelliSense to guide you.
index.ts
`export default new bp.Integration({
register: async () => {},
unregister: async () => {},
actions: {
generateContent: async ({input}) => {
// Implement your own logic for generating content using your LLM
const result = await myLLM.generateText(input);
return { result };
},
listLanguageModels: async () => {
// Implement your own logic for listing available models
const models = [
{
id: "model1",
name: "My LLM 1",
description: "A highly accurate LLM",
tags: ["recommended", "vision"],
input: {
costPer1MTokens: 1,
maxTokens: 200_000,
},
output: {
costPer1MTokens: 12,
maxTokens: 4096,
},
},
{
id: "model2",
name: "My LLM 2",
description: "A more cost-effective LLM",
tags: ["low-cost"],
input: {
costPer1MTokens: 1,
maxTokens: 200_000,
},
output: {
costPer1MTokens: 12,
maxTokens: 4096,
},
},
];
return { models };
},
},
channels: {},
handler: async () => {},
})
`
Once you are done with the above, simply deploy the integration, and install it to a bot you'd like to try it on.
3\. Select your LLM in Botpress Studio
[](#3-select-your-llm-in-botpress-studio)
Now you can choose your LLM when configuring AI-related tasks. It will show up in the LLM selectors in the Botpress Studio.
In the above example, **My LLM 1** and **My LLM 2** appear with the corresponding tags.
![](https://files.readme.io/6311471c2d53aa45e62cec732ec1a0b1a2961bc87c06fbfcdbe4bdc9fa5680d0-Screenshot_2024-08-30_at_9.44.34_AM.png)
By integrating your own LLM with Botpress, you gain full control over AI outputs, privacy, and security, while also opening up potential monetization opportunities. Follow the outlined steps to configure your integration, implement the LLM logic, and seamlessly deploy it in Botpress Studio for a customized AI experience.
Having difficulties with LLM Interfaces?
[](#having-difficulties-with-llm-interfaces)
Contact us at [\[email protected\]](/cdn-cgi/l/email-protection#c3afafaeeeaba6afb383a1acb7b3b1a6b0b0eda0acae) with as much details as possible about your company and your use case.
Updated 18 days ago
---
* [Table of Contents](#)
* * [Using Your Own LLM](#using-your-own-llm)  
         * [Why Bring Your Own LLM?](#why-bring-your-own-llm)  
   * [Getting access](#getting-access)  
         * [Instructions](#instructions)  
   * [Having difficulties with LLM Interfaces?](#having-difficulties-with-llm-interfaces)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Moving Parts
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Moving Parts
[ Suggest Edits](/edit/moving-parts)
The standard way to develop a chatbot on Botpress Cloud is to use the [Studio](https://studio.botpress.cloud). It is a low-code platform; that is, the Studio allows you to create chatbots by writing little code, or even none at all.
To please developers, Botpress Cloud also allows you to develop chatbots with code only. This set of features is called the developer side of Botpress Cloud or the developer experience (DX).
In addition to allowing the development of Chatbots, the developer experience also allows the creation of Integrations. Integrations are applications that allow Chatbots to communicate with external services as well as share/reuse certain features. The only way to develop integrations is to do it with code.
The developer experience is composed of the following parts:
* the [public HTTP API](https://botpress.com/docs/api/)
* the [TypeScript HTTP Client](https://npmjs.com/package/@botpress/client)
* the [TypeScript SDK](https://npmjs.com/package/@botpress/sdk)
* the [CLI](https://npmjs.com/package/@botpress/cli)
The public HTTP API of Botpress Cloud is already documented [here](https://botpress.io/docs/cloud/api).
The TypeScript HTTP Client, on the other hand, only exposes the API in an npm package to facilitate requests to the API in JavaScript and TypeScript. It contains all the types of requests and responses of the API.
To create a Chatbot or an Integration, you must call the [create-bot](https://botpress.com/docs/api/#bot-create-bot) or [create-integration](https://botpress.com/docs/api/#bot-create-integration) route of the API. The HTTP body of the request contains a `code` field. This is the JavaScript program of the Bot or Integration. This code is executed by Botpress Cloud. However, this field cannot contain any program, it must have a certain format and a certain behavior for Botpress Cloud to be able to execute it. This is where the SDK comes in.
The SDK is an npm package that is used and executed with the code of the Bot or Integration. It facilitates development by providing functions and classes that frame your development. It is theoretically possible to develop a Bot or an Integration without using the SDK, but this is strongly discouraged.
At the time of writing, all Bots and Integrations are hosted and executed by Botpress Cloud. This means that it is not possible to host a server on your side. For this reason, the use of the JavaScript language is mandatory. If your program is written in TypeScript, it must be transpiled and bundled before being sent to Botpress Cloud. This is where CLI comes in.
The CLI wears several hats. It allows you to interact with the public HTTP API of Botpress Cloud and to develop/deploy Bots and Integrations. Just like the SDK, it is theoretically possible to do without it but this is strongly discouraged.
Since the public HTTP API of Botpress Cloud is already documented and the TypeScript HTTP Client only exposes it in an npm package, the next sections of this document will focus on the SDK and the CLI.
Updated 4 months ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Library
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Library
Repository for managing global Intents and Entities, enabling the extraction and classification of messages.
[ Suggest Edits](/edit/library)
The NLU Library is a key feature within Botpress, designed to manage and organize global Intents and Entities. These components are essential for understanding and processing user input, enabling your bot responds accurately and effectively.
Intents
[](#intents)
Intents are the backbone of understanding in a chatbot. They represent the purpose or goal behind a user's message, allowing the chatbot to determine the appropriate response. Each intent can have multiple utterances—different ways users might express the same request.
For example, an "Ordering a coffee" intent could include utterances like:
"I want coffee"
"I'd like some coffee, please"
"Do you have a decaf espresso?"
"Hi. I'd like to order a latte, please.
The chatbot compares user messages against these utterances to match them to the correct intent with the highest confidence score.
| User Message                                | Intent Matched | Confidence |
| ------------------------------------------- | -------------- | ---------- |
| I would like to order a coffee.             | place-order    | 0.97       |
| An espresso, please                         | place-order    | 0.91       |
| Can you please give me a double cappuccino? | place-order    | 0.96       |
Creating an Intent
[](#creating-an-intent)
To create a new intent:
1. Navigate to the Library
2. Click the + button to add a new intent
3. Provide a simple name for the intent (e.g., "order coffee")
Adding Utterances
[](#adding-utterances)
After creating an intent, you need to define utterances that represent different ways a user might express the same intent.
1. In the intent creation window, enter at least 10 utterances
2. Save your changes
Utterances currently support a maximum of 280 characters each.
Inline Intents
[](#inline-intents)
Inline intents are specialized intents that can be defined directly on transitions within your chatbot’s flow. They function like global intents but are limited to specific scenarios within a conversation, making them ideal for context-sensitive tasks.
To use inline intents:
* Define them directly on a transition within your flow
* Add relevant utterances
Entities
[](#entities)
Entities are data points or parameters that provide additional context within an intent. They allow your chatbot to extract and normalize specific details from a user's message, such as a date, time, color, or any other relevant piece of information.
> ## 📝
>
> Example
>
> The place-order intent contains the following entities:
>
> **caffeine** that specifies if the coffee is caffeinated or decaffeinated.
>
> **size** for a single or a double shot.
>
> **drink** that specifies the kind of drink asked for.
>
> Attached to NLU extraction, you will find an entities property which is an array of System and Custom entities.
Custom Entities
[](#custom-entities)
Botpress provides two types of custom entities: pattern and list entities. To define a custom entity, go to the Library tab of the Explorer. From there, you can define your custom entities which will be available for any input message treated by your chatbot. Go ahead and click on New entity.
Using Entities
[](#using-entities)
You may access and use entity data by looking up the event.nlu.entities variable in your hooks, flow transitions or Execute Code cards.
List Entities
[](#list-entities)
List extraction behaves similarly to pattern extraction. However, you'll be able to add different occurrences of your entity with corresponding synonyms.
Let's take Airport Codes as an example:
Extraction will go like this: User said Type Value "Find a flight from SFO to Mumbai" "Airport Codes" \["SFO", "BOM"\]
Pattern Entities
[](#pattern-entities)
Pattern or Regular Expression Extraction allows you to extract information presented in a format that can be described using Regular Expression (RegEx). Once you've created a pattern entity, Botpress Native NLU will perform a regex extraction on each incoming message and add it to event.nlu.entities.
Example:
Given a Pattern Entity definition with \[A-Z\]{3}-\[0-9\]{4}-\[A-Z\]{3} as a pattern: Extraction will go like this: User said Type Value Find product BHZ-1234-UYT SKU BHZ-1234-UYT
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Intents](#intents)  
         * [Creating an Intent](#creating-an-intent)  
         * [Inline Intents](#inline-intents)  
   * [Entities](#entities)  
         * [Custom Entities](#custom-entities)  
         * [Using Entities](#using-entities)  
         * [List Entities](#list-entities)  
         * [Pattern Entities](#pattern-entities)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Intercom
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Intercom
[ Suggest Edits](/edit/intercom)
![](https://files.readme.io/f69ccb4-image.png)
Introduction
[](#introduction)
Intercom is a Conversational Relationship Platform (CRP) that helps businesses build better customer relationships through personalized, messenger-based experiences across the customer journey. By integrating it with Botpress you can leverage AI to automate your customer support and sales processes.
Prerequisites
[](#prerequisites)
* An [Intercom account](https://www.intercom.com/)
* Administrator or Developer access to a Intercom workspace
Setting up the Intercom integration in Botpress
[](#setting-up-the-intercom-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Intercom integration then click on the "Install to Bot" button, now go back to your bot settings.
The Intercom integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Intercom
* **Webhook URL**: The URL for receiving data in Botpress
* **Access Token**: The access token for the Intercom app
* **Admin Id**: The admin id for the Intercom app
Setting up Intercom
[](#setting-up-intercom)
> ## 📘
>
> Info
>
> In this tutorial we are going to be using a standard production workspace, but you can also create a Test workspace to test the integration before deploying it to production.
>
> To do that, open the Settings of a production workspace, go to the General settings tab and look for the "Enable a test workspace" and click "Save". Now you just need to use this workspace in the steps below. Learn more about test workspace [here](https://www.intercom.com/help/en/articles/188-create-a-test-workspace-in-intercom).
>
> After verifying that the integration works, you will need to repeat the steps below using the production workspace! Don't create the app again, just go to the app settings (Test and publish > Your workspaces) and install it to the production workspace.
Creating an App
[](#creating-an-app)
In order to communicate with Botpress, you need to create a developer app in Intercom.
1. Go to the [Developer Hub](https://developers.intercom.com/) in Intercom then click "Your Apps"
2. Click "New App", give it a name like `Botpress connector`, then select the desired workspace and click "Create App"
3. You will be redirected to the app's Authentication settings page. Copy the Access Token and paste it in the Botpress integration settings.
Getting the Admin Id
[](#getting-the-admin-id)
1. Open Intercom and hover over your avatar in the bottom left corner, then click your avatar again to see your profile
2. Copy the last number in the URL (as shown below), this is your Admin Id. Paste it in the Botpress integration settings
![](https://files.readme.io/428e56f-image.png)
Setting up the Webhook
[](#setting-up-the-webhook)
1. Copy the Webhook URL provided in the Botpress integration settings
2. Go back to the Intercom app settings and open the "Webhooks" tab
3. Paste the URL in the "Endpoint URL" section
4. Click the "Select a topic" dropdown under the "Topics" section, a list is going to show up
5. Search for `user` and and click the options `conversation.user.created` and `conversation.user.replied`. Now exit the list and a "Topic" section should appear with the selected topics. Click "Save" to finalize the webhook configuration
Adding a Default conversation Assignee
[](#adding-a-default-conversation-assignee)
1. Go back to the Intercom app settings and open the "Inbox" tab
2. Click "Inbox settings" then "Workload management"
3. In the "Default assignee" section select yourself or another user to receive the conversations from the bot (it needs to be the same user as the Admin Id)
Finalizing the configuration
[](#finalizing-the-configuration)
Now you just need to **Enable** the integration in the Botpress settings and click "Save configuration".
That's it, you may now start chatting with your bot on Intercom!
Updated 4 months ago
---
* [Table of Contents](#)
* * [Introduction](#introduction)  
   * [Prerequisites](#prerequisites)  
   * [Setting up the Intercom integration in Botpress](#setting-up-the-intercom-integration-in-botpress)  
   * [Setting up Intercom](#setting-up-intercom)  
         * [Creating an App](#creating-an-app)  
         * [Getting the Admin Id](#getting-the-admin-id)  
         * [Setting up the Webhook](#setting-up-the-webhook)  
         * [Adding a Default conversation Assignee](#adding-a-default-conversation-assignee)  
         * [Finalizing the configuration](#finalizing-the-configuration)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Import & Export
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Import & Export
[ Suggest Edits](/edit/import-export-bots)
You may want to import or export a bot for various reasons, such as:
* Sharing the bot with others - friends, clients, etc.
* Contributing the bot to the community
* Seeking help to fix issues
* Creating a backup of the bot
* Transferring the bot to a different workspace or account
And with Botpress Cloud, you can do that with just a few clicks!
How to Export a Bot
[](#how-to-export-a-bot)
On the left panel in your Botpress Studio, click the Botpress icon and select Import / Export. Then click Export as.
Studio will start preparing the export, which may take some time, depending on the amount of content in your tables and knowledge bases. When it is done, the download will start automatically.
> ## ❗️
>
> Error
>
> Bots \~3gb or larger cannot be exported!
The exported file will be a `.bpz` file (which is a special archive format for Botpress Cloud bots). It will have the name of your bot and the current date (for example: recipe-bot - 2023 Sep 06.bpz).
> ## 🚧
>
> Warning
>
> Do not attempt to extract the file or modify its content, otherwise you may not be able to import your bot again!
The exported file contains your whole bot, including:
* Bot information and settings
* Agents settings
* Knowledge bases - with sources (files are stored on our servers and only linked in the export to keep it small)
* Tables - with records
* Intents and entities
* Hooks
* Variables (workflow, user, bot, config) - names and default values
* Folders
* Workflows and nodes
* Cards - with content
* Transition lines
So you can rest assured that all of your data is included!
How to Import a Bot
[](#how-to-import-a-bot)
> ## ❗️
>
> Error
>
> Importing a bot will overwrite the current bot, including media, knowledge bases, documents and tables. Proceed with caution!
On the left panel in your Botpress Studio, click the Botpress icon and select Import / Export. Then click Import. Next, click "Select bot archive to upload" and the explorer window will open. Find the `.bpz` file you want to import on your computer and click Open.
You have now successfully imported your bot! Test it using the Emulator or publish it to make it available to your users.
> ## 👍
>
> Good to know
>
> You can import bots up to 120 MB!
> ## 📘
>
> Restoring the Integrations
>
> Remember to set up the desired integrations again in the Dashboard, so that it works on the channels exactly as it did before you exported it!
Video tutorial
[](#video-tutorial)
Updated about 1 month ago
---
* [Table of Contents](#)
* * [How to Export a Bot](#how-to-export-a-bot)  
   * [How to Import a Bot](#how-to-import-a-bot)  
   * [Video tutorial](#video-tutorial)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Interface
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Interface
Development environment for building chatbots and AI agents with a blend of visual tools and code editing capabilities.
[ Suggest Edits](/edit/interface)
Studio Interface
[](#studio-interface)
Botpress Studio is an integrated development environment (IDE) specifically designed for building, testing, and managing chatbots and AI agents. It provides an intuitive, visual interface that empowers both developers and non-developers to create sophisticated agentic workflows. Studio combines powerful tools, including visual flow editors, drag-and-drop functionality, and advanced customization options, making it the central hub for all your bot development needs.
This documentation covers the key interface and UI options available to you in the Studio.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Studio Interface](#studio-interface)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Issues
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Issues
Identify and track problems or errors in your bot's interactions.
[ Suggest Edits](/edit/issues)
This tab lists any issues present in your bot's interactions with users.
The information in this tab complements the information found in the [Logs](/docs/logs) and the [Events](/docs/events) tabs by providing information about persistent, repeatable errors. This includes, for example, errors thrown in execute code cards, but will not diagnose problems like AI hallucinations or inconsistent responses.
Issues listed in this tab are grouped by error type. Inspecting a specific issue will show you a list of all the times that event has occurred. Further inspecting each individual event allows you to see detailed information about the issue, like the payload, user and conversation IDs, and the channel or integration on which it occurred.
The Issues tab is a critical feature for monitoring and improving the quality and reliability of your bot. It serves as a centralized hub for identifying, tracking, and resolving problems or errors that occur during chatbot interactions. It's essential for maintaining the operational integrity of your bot, ensuring that problems are quickly identified and resolved.
> ## ⌨️
>
> Resolve issues
>
> The Issues tab is a critical feature for monitoring and improving the quality and reliability of your bot. It serves as a centralized hub for identifying, tracking, and resolving problems or errors that occur during chatbot interactions. It's essential for maintaining the operational integrity of your bot, ensuring that problems are quickly identified and resolved.
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Keyboard Shortcuts
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Keyboard Shortcuts
Studio Keyboard Shortcuts
[ Suggest Edits](/edit/keyboard-shortcuts)
You can use these studio shortcuts for saving your time and focusing on building better bots.
| Shortcut                                       | Windows      | Mac          |
| ---------------------------------------------- | ------------ | ------------ |
| Copy Node                                      | ctrl+c       | cmd+c        |
| Paste Node                                     | ctrl+v       | cmd+v        |
| Delete Node                                    | del          | del          |
| Search                                         | ctrl+f       | cmd+f        |
| Toggle Left Panel  (Explorer, Library, Hooks)  | ctrl+b       | cmd+b        |
| Toggle Right Panel  (Inspector & Emulator)     | ctrl+e       | cmd+e        |
| Toggle Bottom Panel  (Debugger & logs)         | ctrl+j       | cmd+j        |
| Message History  (Emulator, previous messages) | Arrow ↑ or ↓ | Arrow ↑ or ↓ |
| Create New Session  (Emulator)                 | ctrl+Enter   | ctrl+Enter   |
Admin Dashboard Keyboard Shortcuts
[](#admin-dashboard-keyboard-shortcuts)
| Shortcut                                               | Windows | Mac   |
| ------------------------------------------------------ | ------- | ----- |
| Access specific bots and workspaces in Admin Dashboard | ctrl+k  | cmd+k |
Tables Keyboard Shortcuts
[](#tables-keyboard-shortcuts)
| Shortcut        | Windows                | Mac                    |
| --------------- | ---------------------- | ---------------------- |
| Cell Navigation | Arrow ↑ or ↓ or ← or → | Arrow ↑ or ↓ or ← or → |
| Edit Cell       | Enter                  | Enter                  |
| Exit Edit Cell  | Esc                    | Esc                    |
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Admin Dashboard Keyboard Shortcuts](#admin-dashboard-keyboard-shortcuts)  
   * [Tables Keyboard Shortcuts](#tables-keyboard-shortcuts)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Integrations
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Integrations
Allow your bot to connect to external services, APIs, and tools.
[ Suggest Edits](/edit/integrations-3)
Integrations extend the capabilities of your bots by connecting them with external services, APIs, and tools. They allow your bots to fetch data, trigger actions, interact with third-party platforms, and provide more dynamic and powerful user experiences. They can send and receive data from other tools, or they can be used to deploy your bot on alternative messaging channels.
Using Integrations
[](#using-integrations)
Search
[](#search)
To find integrations, navigate to the integrations icon in the left-hand menu of the Studio, indicated by a puzzle icon.
You can search for integrations to third-party services by name here, like WhatsApp or Messenger.
Install
[](#install)
Clicking on an integration from a search result will open a menu that allows you to install that integration to your bot. From this menu, you can also see information like prerequisites, installation instructions, and the Botpress user responsible for contributing the integration to the hub.
> ## ✅
>
> Verification
>
> Integrations with a checkmark icon next to the name have been verified and confirmed as trusted integrations for safety and function by the Botpress team.
Configure
[](#configure)
Once you've installed an integration to your bot, you can proceed with any necessary configuration steps. This can include providing API keys, inputting data, or completing third-party setup wizards.
Usage
[](#usage)
Once you've installed and configured an integration to your bot, you can start using it.
For integrations that deploy your bot to a messaging channel like WhatsApp or Telegram, after you've configured the integration and published your bot, it will start sending and receiving messages on those channels.
For integrations that enhance your bot's functionalities, like connecting to a third-party tool, you will find additional cards in the Card Tray that enable certain integration actions. Refer to the documentation for the integration you are using for detailed instructions.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Using Integrations](#using-integrations)  
         * [Search](#search)  
         * [Install](#install)  
         * [Configure](#configure)  
         * [Usage](#usage)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Key Concepts
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Key Concepts
Overview
[ Suggest Edits](/edit/key-concepts)
Botpress Integration Documentation
[](#botpress-integration-documentation)
The Botpress SDK provides a structured way for developers to create new integrations for their chatbots. In this documentation, we're using the [Slack integration class](https://github.com/botpress/botpress/blob/master/integrations/slack/src/index.ts) as a reference to illustrate the process.
Key Concepts
[](#key-concepts)
1\. [Tags](./tags.md)
[](#1-tags)
These identify users, conversations, and messages in the external system (e.g., Slack). Each tag is assigned a unique identifier.
2\. [Channels](./channels.md)
[](#2-channels)
Define which channels the integration supports. Channels can be group conversations, direct messages, or others, depending on the external system.
3\. [Configuration](./configuration.md)
[](#3-configuration)
This is where sensitive information, such as API keys and tokens, is stored. The configuration is used to validate the integration setup.
4\. [User](./user.md)
[](#4-user)
This refers to the mapping between the external system and Botpress. It defines how users are identified and created in the bot system.
5\. [Conversation](./conversation.md)
[](#5-conversation)
This refers to the dialogue happening between the external system, the user, and the bot. It holds the mapping between the conversation ID in the external system and the conversation ID in Botpress.
6\. [Messages](./messages.md)
[](#6-messages)
These are payloads exchanged between the external system, the user, and the bot within a conversation. Messages contain information essential to map interactions between the systems and hold valuable data for the conversation designer.
7\. [States](./states.md)
[](#7-states)
The state is responsible for associating data with a user, a conversation, or in a global context to store important information that needs to be tracked.
8\. [Actions](./actions.md)
[](#8-actions)
Actions are tasks that the integration can perform. These could be sending a message, adding a reaction, or any other function that the external system supports.
9\. [Events](./events.md)
[](#9-events)
These are non-conversational incidents that are triggered and captured by the system. For example, in Linear, an event could be when a new issue is created; in WhatsApp, it could be when someone opens the chat.
10\. [Definition](./definition.md)
[](#10-definition)
Everything within the integration needs to be defined before use. This is done in the IntegrationDefinition class.
11\. [Secrets](./secrets.md)
[](#11-secrets)
Finally, Botpress securely handles sensitive information like API keys or tokens in the **Secrets** field of the **IntegrationDefinition** class. This field defines and manages the secrets needed by the integration, keeping them secure from potential security breaches.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Botpress Integration Documentation](#botpress-integration-documentation)  
   * [Key Concepts](#key-concepts)  
         * [1\. Tags](#1-tags)  
         * [2\. Channels](#2-channels)  
         * [3\. Configuration](#3-configuration)  
         * [4\. User](#4-user)  
         * [5\. Conversation](#5-conversation)  
         * [6\. Messages](#6-messages)  
         * [7\. States](#7-states)  
         * [8\. Actions](#8-actions)  
         * [9\. Events](#9-events)  
         * [10\. Definition](#10-definition)  
         * [11\. Secrets](#11-secrets)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Instagram
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Instagram
[ Suggest Edits](/edit/instagram)
Prerequisites
[](#prerequisites)
* A [Meta developer app](https://developers.facebook.com/apps) that will serve as the primary platform for managing connection between Instagram and Botpress, including the configuration of webhooks and access tokens.
* A [Facebook page](https://www.facebook.com/pages/create) in which you have the administrator or developer roles. Instagram accounts must be linked to a Facebook page to use the Facebook Graph API.
* An [Instagram Professional account](https://business.instagram.com/), necessary to use features specific to Instagram professional accounts.
Setting up the Instagram integration in Botpress
[](#setting-up-the-instagram-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Instagram integration then click on the "Install to Bot" button, now go back to your bot settings.
The Instagram integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Instagram
* **Webhook URL**: The URL for receiving data in Botpress
* **App ID**: The ID of your Meta app
* **App Secret**: The secret of your Meta app
* **Verify Token**: The token used to verify the webhook requests
* **Page ID**: The ID of your Facebook page
* **Access Token**: The access token
Setting up Instagram
[](#setting-up-instagram)
Create a Facebook Page
[](#create-a-facebook-page)
If you do not already have a Facebook page you will need to create one. You can find details on how to create a new Facebook page [here](https://www.facebook.com/pages/create/). To link your chatbot to a pre-existing page, you must have an administrator or developer role.
Create a Meta App
[](#create-a-meta-app)
1. Log in to your Facebook account and go to the [Facebook for Developers website](https://developers.facebook.com/).
2. Select **My Apps** from the top menu, and create a new app.
3. Select **Business** as App Type.
4. Give a name to your App.
Add Messenger to your Meta App
[](#add-messenger-to-your-meta-app)
Messenger is the proxy for Instagram settings, and since is not added by default in your Meta app it must be added manually.
1. In the left sidebar of your app dashboard, click on **Add Product**.
2. Look for Messenger and click **Set Up**.
API version
[](#api-version)
Botpress can interact with the version 15.0 or higher of the Instagram API. It is not the default version so it must be changed in your app's settings
1. Go to your Meta app.
2. In the left sidebar, expand the **Settings** menu and select **Advanced**.
3. In the **Upgrade API version** section, select v15.0 or higher as the API version.
4. Click on **Save Changes**.
App ID and Secret
[](#app-id-and-secret)
1. In the left sidebar, expand the **Settings** menu and select **Basic**. Here you can find the App ID and App Secret.
2. Click on the **Show** button in the **App Secret** text box. Copy the App Id and App Secret to your channel configuration.
Page ID and Access Token
[](#page-id-and-access-token)
1. In the left sidebar, expand the **Messenger** menu and select **Instagram Settings**
2. In the **Access Tokens** section, click **Add or Remove Pages** and add your Facebook page.
3. Copy the number under you page name and paste it in you **Page ID** channel configuration.
4. Click on **Generate Token**. Copy this token and paste it in the **Access Token** channel configuration.
Verify Token
[](#verify-token)
The Verify Token is used by Meta to verify that you are the real owner of the provided webhook.
You can generate any random alphanumerical string for this configuration. Paste it in your **Verify Token** channel configuration.
Save Configuration
[](#save-configuration)
Channel configuration is completed, you can now click **Save**. It is important to save your configuration in Botpress before updating the webhook in the Meta app settings, otherwise Meta will be unable to validate the webhook URL.
Webhook Configuration
[](#webhook-configuration)
To receive messages from Instagram in your Botpress bot, you will need to setup a webhook.
1. Go to your Meta App.
2. In the left sidebar, expand the **Messenger** menu and select **Instagram Settings**.
3. In the **Webhooks** section, click **Add Callback URL**.
4. Copy and paste the **Webhook URL** provided in the integration configuration page in Botpress.
5. Copy and paste the **Verify Token** that you generated earlier in the integration configuration page in Botpress.
6. Click on Verify and Save. Make sure your channel configuration was saved before doing this step, otherwise the webhook validation will fail.
7. Now you will select subscriptions for your webhook. Click on **Add Subscriptions**, then select `instagram_manage_messages` (if app has been [reviewed by Meta](../docs/instagram#submit-your-app-for-meta-review)), `messages` and `messaging_postbacks`. Then click **Save**.
**Note**: If you can't find the `instagram_manage_messages` subscription in the list above, that's because your app has not been reviewed by Meta yet (see [this section](../docs/instagram#submit-your-app-for-meta-review)). But don't worry, this is not mandatory to test your bot. You can still test it with the `messages` and `messaging_postbacks` subscriptions.
That's it, you may now start chatting with your bot on Instagram!
Submit your App for Meta Review
[](#submit-your-app-for-meta-review)
When your app is in Development Mode, your bot will work for admins, developers, and testers of the app only. After your app is approved and made public, it will work for the general public.
Read more about the App Review process on [the official documentation](https://developers.facebook.com/docs/app-review/submission-guide) and find some help if necessary [in this Github issue](https://github.com/microsoft/botframework-sdk/issues/1465).
You can find some troubleshooting [in this documentation](https://developers.facebook.com/docs/app-review/support/rejection-guides/instagram) in case you app get rejected.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Instagram integration in Botpress](#setting-up-the-instagram-integration-in-botpress)  
   * [Setting up Instagram](#setting-up-instagram)  
         * [Create a Facebook Page](#create-a-facebook-page)  
         * [Create a Meta App](#create-a-meta-app)  
         * [Add Messenger to your Meta App](#add-messenger-to-your-meta-app)  
         * [API version](#api-version)  
         * [App ID and Secret](#app-id-and-secret)  
         * [Page ID and Access Token](#page-id-and-access-token)  
         * [Verify Token](#verify-token)  
         * [Save Configuration](#save-configuration)  
   * [Webhook Configuration](#webhook-configuration)  
   * [Submit your App for Meta Review](#submit-your-app-for-meta-review)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Hooks
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Hooks
Customizable points that allow you to execute custom code in response to specific events.
[ Suggest Edits](/edit/hooks)
Hooks in Botpress are powerful tools that enable you to customize the behaviour of your bot by executing custom code at specific points during its operation. Hooks allow you to intercept and modify messages, manage sessions, perform logging, integrate with external systems, and more. By leveraging hooks, you can fine-tune your bot's interactions and responses to meet your specific requirements.
Hooks can be customized similarly to the Execute Code cards and Validation fields.
Parameters
[](#parameters)
Hooks are functions that take parameters. The parameters are different depending on the hook type. `event` is the most common parameter, and it is always available. The event object contains all the information about the event that triggered the hook.
Using Hooks
[](#using-hooks)
The instances where you can inject hooks into your bot's flow are as follows:
After Incoming Message
[](#after-incoming-message)
This hook is called right after all incoming middleware have processed the event but before the Dialogue Engine starts processing it. You can access all the required data (including NLU intent) for special processing and decide what happens to the event.
A typical operation here is to tell Botpress to ignore the event and not process it (e.g., not send it to the dialogue engine).
Before Incoming Message
[](#before-incoming-message)
Botpress calls this hook after receiving an event but before processing any middleware. It is possible to change event properties.
Botpress often uses this hook to set flags to skip some processing, for example, to prevent the QnA from processing it when it's a quick reply.
Before Outgoing Middleware
[](#before-outgoing-middleware)
The Dialogue Manager calls this hook before the bot's reply is sent to the user.
Here you can save the bot's complete response.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Parameters](#parameters)  
   * [Using Hooks](#using-hooks)  
         * [After Incoming Message](#after-incoming-message)  
         * [Before Incoming Message](#before-incoming-message)  
         * [Before Outgoing Middleware](#before-outgoing-middleware)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Integrations
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Integrations
Displays integrations currently installed on your bot.
[ Suggest Edits](/edit/integrations-1)
This tab lists integrations that are currently installed on your bot.
From this menu, you can uninstall existing integrations, or navigate to the Botpress Hub to search for new ones.
> ## 📘
>
> Configure integrations from the Studio
>
> Integration configuration has been moved to the Studio.
>
> To set up integrations you've installed, or to install new integrations, you can navigate to the integrations menu found directly in the Studio.
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Connect a live agent platform with Botpress
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Connect a live agent platform with Botpress
[ Suggest Edits](/edit/hitl)
This documentation will guide you through setting up and implementing a Human-In-The-Loop (HITL) integration with Botpress. By following these steps, you'll be able to connect your platform to Botpress, enabling seamless interaction between your end-users and live agents.
How HITL Works in Botpress
[](#how-hitl-works-in-botpress)
In Botpress, the Human-In-The-Loop (HITL) functionality is powered by the HITL Agent. This agent consumes integrations that correctly implement the HITL interface, turning agent hand-off on and off.
![](https://files.readme.io/a11417252c75c4771500955f4b4e6faff70b921c56efb9e292128189c2a57928-Screenshot_2024-09-16_at_10.45.05_AM.png)
Here is an overview of the HITL workflow in Botpress:
* **When a conversation is escalated to a live agent:**
1. A user is created on both Botpress and the third-party live chat platform. The link between the two users can be done on both sides, but we recommend doing it on Botpress's end using user [tags](#tags).
2. A conversation is initiated on Botpress, and a corresponding ticket is created on the agent handoff platform. The link between the two conversations can be done on both sides, but we recommend doing it on Botpress's end using conversation [tags](#tags).
* **When the end user sends a message to a live agent:** The message is forwarded to the agent handoff platform through the "hitl" channel.
* **When the live agent sends a message to the end user:** The agent handoff platform calls the integration webhook, which then forwards the message to the end user.
This guide will teach you how to make your integration compatible with the HITL agent.
Configuring the Integration Definition
[](#configuring-the-integration-definition)
After completing the steps in our [Quickstart Guide](https://botpress.com/docs/getting-started-1), the next step is to enhance your integration definition to support HITL.
The following code snippet accomplishes the following:
1. Extends the HITL interface, making this integration compatible with HITL in Botpress.
2. Adds a HITL channel, which will be used to route messages between the end user and the live agent.
3. Enhances conversation and user tags with additional information, ensuring proper matching of users and conversations between Botpress and your platform.
integration.definition.ts
`import { z, IntegrationDefinition, interfaces } from "@botpress/sdk";
export default new IntegrationDefinition({
name: "My HITL Integration",
version: "0.0.1",
readme: "hub.md",
icon: "icon.svg",
channels: {
hitl: {
title: "My HITL",
messages: {},
conversation: {
tags: {
ticketId: {
// This is the ticket ID from your platform. It ensures that conversations are correctly matched between Botpress and your platform.
title: "Ticket ID",
},
additionalData: {
title: "You can pass additional data in the tags object.",
},
},
},
},
},
actions: {},
user: {
tags: {
// This is the user ID from the live agent platform. It ensures that users are correctly matched between Botpress and live agent platform.
agentHandoffPlatformUserId: {
title: "Live Agent Platform User ID",
},
},
},
// Extend the HITL interface to implement HITL in your integration.
}).extend(interfaces.hitl, () => ({}));
`
Tags
[](#tags)
Tags in this integration are customizable fields that can store any information relevant to a conversation or user. You can think of them as metadata. These tags are crucial for maintaining context and linking data between Botpress and your platform. While the examples provided focus on using IDs to match conversations and users, you can customize the tags to include any additional data that suits your needs.
Implementing the HITL Logic
[](#implementing-the-hitl-logic)
Now, let’s walk through the process of implementing the integration step by step. Start by adding the following code to `index.ts` to initialize the integration:
index.ts
`import * as sdk from "@botpress/sdk";
import * as bp from ".botpress";
export default new bp.Integration({});
`
1\. Add Register & Unregister Methods
[](#1-add-register--unregister-methods)
These methods are part of the integration's lifecycle.
* **register:** This method is executed every time the integration configuration is saved. We use it to set a webhook that will be triggered when a live agent sends a message. If you manually set the webhook on the third-party platform, this step can be skipped.
* **unregister:** This method is executed when the integration is uninstalled. We use it to remove the Botpress webhook from the third-party platform. If the webhook was set manually, this step can be skipped.
index.ts
`import * as sdk from "@botpress/sdk";
import * as bp from ".botpress";
import AgentHandoffPlatformClient from "./agent-handoff-client"
export default new bp.Integration({
register: async ({ webhookUrl }) => {
// Set the webhook to be triggered when a live agent responds
AgentHandoffPlatformClient.setWebhook(webhookUrl);
},
unregister: async ({ webhookUrl }) => {
// Remove the webhook when the integration is uninstalled
AgentHandoffPlatformClient.deleteWebhook(webhookUrl);
}
});
`
The webhookUrl provided in the parameters points is unique to an bot integration installation. It's refreshed when an integration is installed/re-installed. There are three webhooks that you should implement in the handler method: handling agent messages, assign a conversation to an agent, and stopping HITL. If you can set up webhooks programmatically, this is the right place to do it.
2\. Implement Actions
[](#2-implement-actions)
When extending the HITL interface, you need to implement a set of predefined methods, similar to how you implement methods when working with interfaces in TypeScript. Once these methods are correctly implemented, the integration can be used by the HITL Agent. These actions are automatically called by the HITL Agent and do not need to be triggered manually. You can rely on IntelliSense to guide you on the exact parameters provided to each action.
Here are the actions you need to implement:
* **createUser:** Creates a user in both Botpress and the third-party platform and maps them together. Then, the action returns the user ID of the created Botpress user. The mapping between the two users can be done on both sides, but we recommend doing it on Botpress's end using conversation [tags](#tags).
* **startHitl:** Creates a conversation in Botpress and a corresponding conversation (often called a ticket) on the third-party platform and maps them together. This action must return the ID of the created Botpress conversation. The mapping between the two conversations can be done on both sides, but we recommend doing it on Botpress's end using conversation [tags](#tags).
* **stopHitl:** Deletes a conversation on the third-party platform.
Here’s how you can implement these actions:
index.ts
`// import a library to interact with the agent handoff platform
import AgentHandoffPlatformClient from "./agent-handoff-client"
export default new bp.Integration({
//...
// Previously added code
actions: {
//...
// create a user in both platforms
createUser: async ({ client: botpressClient }) => {
// Create a user on the agent handoff platform
const userOnAgentPlatform = AgentHandoffPlatformClient.createUser();
// Create a user on Botpress
const { user: botpressUser } = await botpressClient.getOrCreateUser({
tags: {
// Link the Botpress user with the user on the agent handoff platform
agentHandoffPlatformUserId: userOnAgentPlatform.id,
},
});
return {
userId: botpressUser.id, // always return the newly created botpress user id
};
},
// create a conversation in both platforms
startHitl: async ({ client: botpressClient, input }) => {
const { user } = await botpressClient.getUser({
// Retrieve the user ID created in the createUser action
id: input.userId,
});
// These properties are provided from the "Escalate to a Human" action in the Studio
const { title, description } = input;
// Create a ticket on the agent handoff platform
const ticket = AgentHandoffPlatformClient.createTicket({
ticketTitle: title,
ticketDescription: description,
});
// Create a conversation in Botpress
const { conversation } = await botpressClient.getOrCreateConversation({
channel: "hitl",
tags: {
// Link the ticket with the Botpress conversation
ticketId: ticket.id,
},
});
return {
conversationId: conversation.id, // always return the newly created botpress conversation id
};
},
// close the conversation in the agent handoff platform
stopHitl: async ({ client: botpressClient, input }) => {
const { conversation } = await botpressClient.getConversation({
id: input.conversationId,
});
const ticketId = conversation.tags.ticketId;
// Close the ticket on the agent handoff platform
AgentHandoffPlatformClient.closeTicket({ ticketId });
return {};
},
//...
},
});
`
3\. Send Messages from End User to Live Agent
[](#3-send-messages-from-end-user-to-live-agent)
To enable communication between the end user and the live agent, you'll need to add a special HITL channel that interacts with the third-party API.
JavaScript
`// index.ts
//...
export default new bp.Integration({
// Previously implemented code
channels: {
hitl: {
messages: {
// Send a message from the end user to the live agent
text: async ({ client, conversation,  ...props }: bp.AnyMessageProps) => {
const { text: userMessage } = props.payload;
const externalUserId = payload.userId ? (await client.getUser({ id: payload.userId })).tags.externalId : "BOT";
// Retrieve the ticket ID that was set in the startHitl action
const ticketId = conversation.tags.ticketId;
// Use the agent handoff platform's API to send the message
AgentHandoffPlatformClient.sendMessage(ticketId, externalUserId, userMessage);
},
//...  you can add more message types if you want to support them
},
},
},
});
`
We suggest starting with the text message type and adding more as needed.
> ## 🚧
>
> Watch out!
>
> `payload.userId` is the user id of the chat-user as seen from the HITL conversation. `user.id` is the id of the bot. If you want the agent to know who he's talking to, you must use `payload.userId`.
4\. Send Messages from Live Agent to End User
[](#4-send-messages-from-live-agent-to-end-user)
When a live agent responds, the live-agent platform needs to send a request to the integration's webhook URL. Upon receiving this request, a special **handler** method is triggered. Let's implement this method to forward the message to the end user.
index.ts
`// ...
export default new bp.Integration({
// ...previously implemented logic
handler: async ({ req, client: botpressClient, ctx, logger }) => {
const liveAgentEvent = JSON.parse(req.body);
// Fetch the Botpress user based on the user ID from the third-party platform
const { user } = await botpressClient.getOrCreateUser({
tags: {
agentHandoffPlatformUserId: liveAgentEvent.userId,
},
});
// Fetch a conversation in Botpress associated with the ticket ID
const { conversation } = await botpressClient.getOrCreateConversation({
channel: 'hitl',
tags: {
ticketId: liveAgentEvent.ticketId,
},
});
switch (liveAgentEvent.eventType) {
case 'newMessage':
// Send the received message from the live agent to the end user
await botpressClient.createMessage({
type: 'text',
userId: user.id,
conversationId: conversation.id,
payload: { text: liveAgentEvent.message },
});
break;
}
},
});
`
In the above example, we don't check the route, or method, but we can do that with the `req` parameter of the handler, which returns an express.js-like request object. You can add `if` conditions to route different actions you'd like, such as assigning agents, or releasing the user back to the bot.
> ## 📘
>
> Why do I keep seeing getOrCreate?
>
> We don't actually want to create users or conversations at this point. Its simply a matter of the `get` methods not supporting finding by tags, while the `getOrCreate` methods do.
5\. Inform Bot When HITL Started and Stopped
[](#5-inform-bot-when-hitl-started-and-stopped)
We need to emit two events to inform the bot about the status of the Human-In-The-Loop (HITL) process:
**hitlAssigned**: Tells the bot that the conversation has been successfully escalated to a live agent.
**hitlStopped**: Tells the bot that the conversation with the live agent has ended.
index.ts
`// index.ts
// ...
export default new bp.Integration({
// ...previously implemented logic
handler: async ({ req, client: botpressClient, ctx, logger }) => {
const liveAgentEvent = JSON.parse(req.body);
switch (liveAgentEvent.eventType) {
case 'newMessage':
// ...
break;
case 'ticketAssigned':
// Emit an event to inform the bot that HITL has been assigned
await botpressClient.createEvent({
type: 'hitlAssigned',
payload: {
conversationId: conversation.id,
userId: user.id,
},
});
break;
case 'ticketSolved':
// Emit an event to inform the bot that HITL has been stopped
await botpressClient.createEvent({
type: 'hitlStopped',
payload: {
conversationId: conversation.id,
},
});
break;
}
},
});
`
Full Example
[](#full-example)
`// index.ts
import * as sdk from "@botpress/sdk";
import * as bp from ".botpress";
// Replace with your actual platform client library
import AgentHandoffPlatformClient from "./agent-handoff-client";
// Initialize the integration
export default new bp.Integration({
// Register method to set the webhook when configuration is saved
register: async ({ webhookUrl }) => {
// Set the webhook to be triggered when a live agent responds
AgentHandoffPlatformClient.setWebhook(webhookUrl);
},
// Unregister method to remove the webhook when integration is uninstalled
unregister: async ({ webhookUrl }) => {
// Remove the webhook when the integration is uninstalled
AgentHandoffPlatformClient.deleteWebhook(webhookUrl);
},
// Define the HITL actions
actions: {
// Create a user on both Botpress and the agent handoff platform
createUser: async ({ client: botpressClient }) => {
// Create a user on the agent handoff platform
const userOnAgentPlatform = AgentHandoffPlatformClient.createUser();
// Create a user on Botpress
const { user: botpressUser } = await botpressClient.getOrCreateUser({
tags: {
// Link the Botpress user with the user on the agent handoff platform
agentHandoffPlatformUserId: userOnAgentPlatform.id,
},
});
return {
userId: botpressUser.id,
};
},
// Start a HITL session by creating a conversation on both platforms
startHitl: async ({ client: botpressClient, input }) => {
const { user } = await botpressClient.getUser({
// Retrieve the user ID created in the createUser action
id: input.userId,
});
// These properties are provided from the "Escalate to a Human" action in the Studio
const { title, description } = input;
// Create a ticket on the agent handoff platform
const ticket = AgentHandoffPlatformClient.createTicket({
ticketTitle: title,
ticketDescription: description,
});
// Create a conversation in Botpress
const { conversation } = await botpressClient.getOrCreateConversation({
channel: "hitl",
tags: {
// Link the ticket with the Botpress conversation
ticketId: ticket.id,
},
});
return {
conversationId: conversation.id,
};
},
// Stop a HITL session by closing the conversation on the agent handoff platform
stopHitl: async ({ client: botpressClient, input }) => {
const { conversation } = await botpressClient.getConversation({
id: input.conversationId,
});
const ticketId = conversation.tags.ticketId;
// Close the ticket on the agent handoff platform
AgentHandoffPlatformClient.closeTicket({ ticketId });
return {};
},
},
// Define the HITL channel to send messages from the end user to the live agent
channels: {
hitl: {
messages: {
// Send a message from the end user to the live agent
text: async ({ client, payload }) => {
const { text: userMessage, conversation, userId } = payload;
// Retrieve the ticket ID that was set in the startHitl action
const ticketId = conversation.tags.ticketId;
// Use the agent handoff platform's API to send the message
AgentHandoffPlatformClient.sendMessage(ticketId, userId, userMessage);
},
},
},
},
// Handler to process messages sent from the live agent to the end user
handler: async ({ req, client: botpressClient }) => {
const liveAgentEvent = JSON.parse(req.body);
// Fetch the Botpress user based on the user ID from the agent handoff platform
const { user } = await botpressClient.getOrCreateUser({
tags: {
agentHandoffPlatformUserId: liveAgentEvent.userId,
},
});
// Retrieve or create a conversation in Botpress associated with the ticket ID
const { conversation } = await botpressClient.getOrCreateConversation({
channel: "hitl",
tags: {
ticketId: liveAgentEvent.ticketId,
},
});
switch (liveAgentEvent.eventType) {
case "newMessage":
// Send the received message from the live agent to the end user
await botpressClient.createMessage({
type: "text",
userId: user.id,
conversationId: conversation.id,
payload: { text: liveAgentEvent.message },
});
break;
case "ticketAssigned":
// Emit an event to inform the bot that HITL has been assigned
await botpressClient.createEvent({
type: "hitlAssigned",
payload: {
conversationId: conversation.id,
userId: user.id,
},
});
break;
case "ticketSolved":
// Emit an event to inform the bot that HITL has been stopped
await botpressClient.createEvent({
type: "hitlStopped",
payload: {
conversationId: conversation.id,
},
});
break;
}
},
});
`
Production Example
[](#production-example)
For a production-grade implementation, you can refer to the Zendesk integration maintained by the Botpress team. Check it out [here](https://github.com/botpress/botpress/tree/master/integrations/zendesk).
Having difficulties with HITL Interfaces?
[](#having-difficulties-with-hitl-interfaces)
Contact us at [\[email protected\]](/cdn-cgi/l/email-protection#2941405d4504414c4559694b465d595b4c5a5a074a4644) with as much details as possible about your company and your use case.
Updated 17 days ago
---
* [Table of Contents](#)
* * [How HITL Works in Botpress](#how-hitl-works-in-botpress)  
   * [Configuring the Integration Definition](#configuring-the-integration-definition)  
         * [Tags](#tags)  
   * [Implementing the HITL Logic](#implementing-the-hitl-logic)  
         * [1\. Add Register & Unregister Methods](#1-add-register--unregister-methods)  
         * [2\. Implement Actions](#2-implement-actions)  
         * [3\. Send Messages from End User to Live Agent](#3-send-messages-from-end-user-to-live-agent)  
         * [4\. Send Messages from Live Agent to End User](#4-send-messages-from-live-agent-to-end-user)  
         * [5\. Inform Bot When HITL Started and Stopped](#5-inform-bot-when-hitl-started-and-stopped)  
   * [Full Example](#full-example)  
   * [Production Example](#production-example)  
   * [Having difficulties with HITL Interfaces?](#having-difficulties-with-hitl-interfaces)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Raw Conversations
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Raw Conversations
[ Suggest Edits](/edit/exporting-raw-conversations-with-the-botpress-api)
The Botpress API allows you to access your bot's conversations from an external service. This is very useful if you need to manage or analyze the conversations somehow. In this tutorial we give steps to use the API for this purpose and steps to format the response data. Let's get started!
> ## 📘
>
> Note
>
> Access the API documentation to verify the schema/structure of the [Conversations](https://botpress.com/docs/api-documentation/#schema%5Fconversation) and the [Messages](https://botpress.com/docs/api-documentation/#schema%5Fmessage) and see if the data is useful for your use case.
> ## 📘
>
> Note
>
> You can find your personal access token in your [Admin Dashboard](https://app.botpress.cloud/). You can find your bot ID in the URL of your bot's dashboard, it's the letters and numbers right after `chatbots/`
1\. Getting the Conversations list from the API
[](#1-getting-the-conversations-list-from-the-api)
Using Axios
[](#using-axios)
Send a `GET` request to `https://api.botpress.cloud/v1/chat/conversations` adding the following headers: `Authorization: Bearer <your-personal-access-token>` and `x-bot-id: <your-bot-id>`.
This is how the request would look like using Axios in a Javascript application (e.g in a Execute Code in Botpress):
CoffeeScript
`` const requestConfig = {
headers: {
// Authorization header with a Bearer token for authentication.
Authorization: `Bearer ${process.env.BOTPRESS_PERSONAL_ACCESS_TOKEN}`,
// The unique identifier of the bot for which we want to retrieve conversations.
'x-bot-id': process.env.BOTPRESS_BOT_ID,
},
}
// An empty array to store all retrieved conversations.
const allConversations = []
// Send an HTTP GET request to the specified API endpoint to get conversations.
const getConversations = await axios.get(
`https://api.botpress.cloud/v1/chat/conversations?nextToken=${paginationToken}`,
requestConfig
)
// Add the retrieved conversations to the list.
allConversations.push(...getConversations.data.conversations)
``
Using the Botpress Client library
[](#using-the-botpress-client-library)
The same logic to get conversations but using the [Botpress Client library](https://www.npmjs.com/package/@botpress/client) in a Node.js application:
JavaScript
`import { Client } from '@botpress/client'
const client = new Client({
token: process.env.BOTPRESS_ACCESS_TOKEN,
botId: process.env.BOTPRESS_BOT_ID,
})
const allConversations = []
const getConversations = await client.listConversations({
nextToken: paginationToken,
})
allConversations.push(getConversations.conversations)
`
> ## 📘
>
> Info
>
> The API returns a maximum of 20 conversations per request. You will need to use the `nextToken` property to fetch the next batch of conversations. The `nextToken` property is returned in the `meta` object of the response.
2\. Getting all Conversations from the API
[](#2-getting-all-conversations-from-the-api)
Now that you know the methods of getting the first conversations from the API, let's see how to get them. You can get them gradually or all at once, but you need to use the pagination token regardless.
Getting conversations gradually
[](#getting-conversations-gradually)
Create a function that will fetch the next batch of conversations when called. You could use a button to trigger it or trigger it automatically with infinite scroll. Pass the `nextToken` property retrieved from the first request as a parameter to the function, then update it on subsequent calls. More about pagination [here](https://botpress.com/docs/api-documentation/#pagination).
JavaScript
`` async function loadConversations(paginationToken) {
const getConversations = await axios.get(
`https://api.botpress.cloud/v1/chat/conversations?nextToken=${paginationToken}`,
{
...requestConfig,
}
)
return getConversations.data
// The returned value will be an object: `{ conversations: [...], meta: { nextToken: "string" } }`
}
``
Getting all conversations
[](#getting-all-conversations)
Use a loop to fetch all conversations at once using the above logic. This is not recommended for bots with a large number of conversations as it may take a long time to complete and may cause timeouts. The use of a library like
[p-retry](https://www.npmjs.com/package/p-retry) to retry requests automatically is recommended.
JavaScript
`` const allConversations = []
let paginationToken
do {
// Send an HTTP GET request to the specified API endpoint to get conversations.
const getConversations = await axios.get(
`https://api.botpress.cloud/v1/chat/conversations?nextToken=${paginationToken}`,
requestConfig
)
// Add the retrieved conversations to the list.
allConversations.push(...getConversations.data.conversations)
// Retrieve the token for the next set of conversations, if available.
paginationToken = getConversations.data.meta.nextToken
// As long as paginationToken has a value, this function will execute again
} while (paginationToken)
``
3\. Getting the Messages list
[](#3-getting-the-messages-list)
Once you have gone through the list of conversations and found out the id of the desired conversation to export, you can then use the API to list the actual messages.
In the example below we are using the [Botpress Client library](https://www.npmjs.com/package/@botpress/client) and assume the client is set up already:
JavaScript
`const conversationId = 'the desired conversation id here'
const allMessages = []
const getMessages = await client.listMessages({
conversationId,
nextToken: paginationToken,
})
allMessages.push(getMessages.messages)
`
You might create a loader function or a finite loop as shown above to get all the messages.
This is how the `allMessages` array is gonna look like:
JSON
`[
{
"id": "503dda87-3e54-40b6-8167-55d685a85345",
"createdAt": "2023-10-24T20:20:44.812Z",
"conversationId": "ec669jj8-e465-482d-8fbe-cb348bf81212",
"payload": {
"text": "Pick one or many from the list",
"options": [
{
"label": "First option",
"value": "First option"
},
{
"label": "Second option",
"value": "Second option"
}
]
},
"tags": {},
"userId": "efc0f8e8-7e51-4458-8907-ea1e43eb8852",
"type": "choice",
"direction": "outgoing"
},
{
"id": "41bb8564-e7ab-4113-c3d8-5fdhh27e4c34",
"createdAt": "2023-10-24T20:20:49.201Z",
"conversationId": "ec66ffb8-e465-482d-8fbe-csd348b81212",
"payload": {
"type": "quick_reply",
"text": "First option",
"payload": "First option"
},
"tags": {
"webchat:id": "cc70c21b-4g24-4f5c-8f52-43a900b7b047"
},
"userId": "f96da97d-4215-447f-86e2-b9e33232e6d3",
"type": "quick_reply",
"direction": "incoming"
},
{
"id": "c6ee8bd6-c862-54d2-97cb-998f555d4251",
"createdAt": "2023-10-24T20:20:49.795Z",
"conversationId": "ec669dd8-e465-482d-8fty-cb3348581212",
"payload": {
"imageUrl": "https://s3.us-east-1.amazonaws.com/cloud-studio-botsbca2d219-2316w6llinepa/f4b77ea0-d597-4d3f-988d-9c66f127d542/media/2360a7bb-162b-4ed1-8551-7000fdb0f7ef.png"
},
"tags": {},
"userId": "efb454t5-7e51-4458-8007-ea1e43eb8852",
"type": "image",
"direction": "outgoing"
}
]
`
> ## 📘
>
> Note
>
> In this example the bot sends a Multiple Choice card, then the user answers by clicking one of the options, and then the bot sends an Image card. Notice how the message payload changes according to the message type, so be mindful of that when reading the `payload` property.
4\. Formatting the Messages list
[](#4-formatting-the-messages-list)
Now that you have the list of messages of a conversation it's time to format it so it becomes readable. We are going to use a custom function for that:
`` function formatMessage(message) {
let messageText = ''
if (message.direction === 'incoming') {
messageText += 'User: '
} else {
messageText += 'Bot: '
}
if (message.type === 'text' || message.type === 'quick_reply') {
messageText += message.payload.text
} else if (message.type === 'choice') {
messageText += `${message.payload.text}: ${message.payload.options.map((option) => option.label).join(' / ')}`
} else {
messageText += `Media message of type ${message.type}`
}
messageText += `\n at ${new Date(message.createdAt).toLocaleString()}`
return messageText
}
const history = allMessages.map((message) => formatMessage(message)).join('\n\n')
``
The `history` string will end up looking like this:
Text
`Bot: Pick one or many from the list: First Option / Second Option
at 24/10/2023, 5:20:44 PM
User: First Option
at 24/10/2023, 5:21:00 PM
Bot: Media message of type image
at 24/10/2023, 5:21:09 PM
`
> ## 📘
>
> Note
>
> You can customize the `formatMessage` function to have different formatting or to return more information of the messages. Now use the `history` variable however you like - send it via email, add it to a Google Sheets document, send it to Botpress to do further processing, etc.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [1\. Getting the Conversations list from the API](#1-getting-the-conversations-list-from-the-api)  
         * [Using Axios](#using-axios)  
         * [Using the Botpress Client library](#using-the-botpress-client-library)  
   * [2\. Getting all Conversations from the API](#2-getting-all-conversations-from-the-api)  
         * [Getting conversations gradually](#getting-conversations-gradually)  
         * [Getting all conversations](#getting-all-conversations)  
   * [3\. Getting the Messages list](#3-getting-the-messages-list)  
   * [4\. Formatting the Messages list](#4-formatting-the-messages-list)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Files API
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Files API
[ Suggest Edits](/edit/files-api)
The Files API allows you to upload, download, and manage files and searchable documents for your bots and integrations in Botpress Cloud.
Files can be in any text or binary format, and documents (such as PDF, Microsoft Office, HTML, CSV, etc.) can be indexed to be used for semantic search in RAG (Retrieval Augmented Generation) implementations. Files are private by default but can be made publicly accessible through a permanent URL that's unique for each file.
Getting Started
[](#getting-started)
1. Get familiarized with the [API reference](../docs/api-documentation/#files) and the different API endpoints available
2. Review the [instructions on how to authenticate](../docs/api-documentation/#authentication) with the API.
Examples
[](#examples)
Creating and uploading a file
[](#creating-and-uploading-a-file)
In an Execute Card in your bot
[](#in-an-execute-card-in-your-bot)
The following code snippet can be put in an Execute Card in your bot to create and upload a file that can be accessed by anyone with the file URL and that will be indexed for semantic search:
> Note: Make sure you have enabled the "Use the Botpress Client" setting in your bot's settings in Botpress Studio in order to have access to the `client` global variable, otherwise it will not be accessible and you'll get an error.
JavaScript
`const file = await client.uploadFile({
key: 'optional_prefix/unique_file_name.txt', // Each file needs a unique key under your bot
content: 'This is a test file',
})
`
Once the code above runs, the URL to download the file will be available in the `file.url` property.
By default the file URL returned will be temporary and change on each request to this endpoint, and will expire after a short period of time and thus should not be stored long-term, but if the file was created with a 'public\_content' access policy then this URL will be permanent and can be stored long-term.
Uploading from an existing URL
[](#uploading-from-an-existing-url)
Or if the file is already available in a URL and you want to download and then upload it to Botpress Cloud you can pass it in the `url` parameter instead of using the `content` parameter:
JavaScript
`const file = await client.uploadFile({
key: 'unique_file_name.pdf', // Each file needs a unique key under your bot
url: 'https://example.com/test.pdf', // This is the external URL where the file is currently located
})
`
Uploading a binary file
[](#uploading-a-binary-file)
If you are dealing with a binary file such as a PDF or Microsoft Office document you can also pass a `Buffer` object as the `content` parameter for the file:
JavaScript
`const buffer = // This must be a Buffer object containing the binary content of the file
const file = await client.uploadFile({
key: 'unique_file_name.pdf', // Each file needs a unique key under your bot
content: buffer,
})
`
In a custom script using the Botpress Client
[](#in-a-custom-script-using-the-botpress-client)
If you're using Javascript or TypeScript the easiest way to interact with the API is using the [Botpress Client](https://www.npmjs.com/package/@botpress/client). You can install the client package by using your favorite package manager:
npmpnpmText
`npm install @botpress/client
`
`pnpm install @botpress/client
`
`yarn add @botpress/client
`
The Botpress Client will handle the authentication and other details for you, you just need to provide your Botpress PAT (Personal Access Token) to the client and the ID of the bot that the client will access. If your use-case requires accessing multiple bots, you can define as many client instances as needed (one for each bot).
You can use the following code snippet to create and upload a file in a custom script using the Botpress Client. Note that in the example below your Botpress PAT (Personal Access Token) and bot ID must be defined in the environment variables `BOTPRESS_PAT` and `BOTPRESS_BOT_ID` respectively.
JavaScript
`import { Client } from '@botpress/client'
const client = new Client({
token: process.env.BOTPRESS_PAT,
botId: process.env.BOTPRESS_BOT_ID,
})
const file = await client.uploadFile({
key: 'optional_prefix/unique_file_name.txt',
content: 'This is a test file',
})
`
In a custom script using an HTTP client
[](#in-a-custom-script-using-an-http-client)
If you can't use the Botpress Client (e.g. you can't install the package or you're working with a different programming language) you can also use any HTTP client to make requests to the API directly.
Please note that when calling the API directly, an HTTP request to the Botpress API (specifying the file size beforehand) will be needed to create the empty file first, and a separate HTTP request will be needed to upload the file content to the unique upload URL provided in the response of the first request.
Additionally, if you need to access the file URL right away a third request to the "Get File" API endpoint will be needed to get the URL of the file after it has been uploaded.
Here's an example on how to do this using the native `fetch()` function in Javascript/TypeScript, note that your Botpress PAT will need to be defined in the environment variable `BOTPRESS_PAT`:
JavaScript
`` const fileContent = 'Here goes the content of your file'
const buffer = Buffer.from(fileContent)
// Step 1: Create the file in Botpress Cloud.
// Please note that specifying the file size (in raw bytes, not characters) is required when calling this endpoint.
const result = await fetch('https://api.botpress.cloud/v1/files', {
method: 'PUT',
headers: {
'Content-Type': 'application/json',
Authorization: `Bearer ${process.env.BOTPRESS_PAT}`,
},
body: JSON.stringify({
key: 'unique_file_name.txt',
size: buffer.byteLength,
}),
})
const response = await result.json()
// Step 2: Upload the file content to the unique upload URL provided for the created file.
await fetch(response.file.uploadUrl, {
method: 'PUT',
body: buffer,
})
// The variable below will contain the URL to download the file content uploaded above. If the file was
// created with the 'public_content' access policy it will be a permanent URL that you can store long-term,
// otherwise it will contain a temporary pre-signed URL that expires after a short period of time.
// If you need to get a new URL, you can always use the `getFile` API endpoint.
const downloadUrl = response.file.url
``
Adding tags to a file
[](#adding-tags-to-a-file)
You can add custom tags to a file by passing the `tags` parameter when it's created. Tags allow you to organize and classify files in any way you see fit, and can be specified as a filter when listing or searching files.
JavaScript
`const file = await client.uploadFile({
key: 'test.txt',
content: 'This is a test file',
tags: {
// Tags are optional but are useful for filtering files by a custom criteria you choose when using the "List Files" or "Search Files" API endpoints. You can change or remove the tags below based on your needs.
category: 'Sales',
knowledgeBaseName: 'Client Questions',
},
})
`
Creating a public file
[](#creating-a-public-file)
By default all files are private and can only be accessed by the bot that created them. If you need to make a file publicly accessible by anyone you can assign the `public_content` access policy to the file:
JavaScript
`const file = await client.uploadFile({
key: 'test.txt',
content: 'This is a public file',
accessPolicies: ['public_content'],
})
`
If you only want to allow all the integrations installed in the bot to access the file rather than making it fully public, you can just assign the `integrations` access policy instead:
JavaScript
`const file = await client.uploadFile({
key: 'test.txt',
content: 'This is a file that can be accessed by all integrations in a bot',
accessPolicies: ['integrations'],
})
`
Creating an indexed file
[](#creating-an-indexed-file)
If you need to index a file for semantic search you can use the `index` parameter when creating the file.
JavaScript
`const file = await client.uploadFile({
key: 'test.txt',
content: 'This is a test file',
index: true,
})
`
Supported file formats
[](#supported-file-formats)
The following file formats are supported for indexing:
| Format   | File Extension | MIME Type       |
| -------- | -------------- | --------------- |
| PDF      | .pdf           | application/pdf |
| HTML     | .html          | text/html       |
| Text     | .txt           | text/plain      |
| Markdown | .md            | text/markdown   |
Notes on indexing:
[](#notes-on-indexing)
* The file it will initially have a status of "indexing\_pending" and will be indexed asynchronously. The time it takes to index the file will depend on the file size and the current load on the system.
* You can check the status of the file by calling the [Get File](../docs/api-documentation/#get-file) endpoint and checking that the `file.status` property has changed to "indexing\_completed".
* If the indexing failed the status will be set to "indexing\_failed" and the reason of the failure will be available in the `failedStatusReason` property of the file.
Getting the file's metadata
[](#getting-the-files-metadata)
To get the details of a file you can use the [Get File](../docs/api-documentation/#get-file) API endpoint.
You can also use this endpoint to retrieve a new temporary pre-signed URL to download a file if the previous pre-signed URL has already expired.
Using the Botpress ClientCalling the API directly
` const file = await client.getFile('YOUR_FILE_ID')
`
`` const result = await fetch('https://api.botpress.cloud/v1/files/YOUR_FILE_ID', {
method: 'GET',
headers: {
Authorization: `Bearer ${process.env.BOTPRESS_PAT}`,
},
})
const response = await result.json()
const file = response.file
``
Listing existing files of a bot
[](#listing-existing-files-of-a-bot)
To list all the files of a bot you can use the [List Files](../docs/api-documentation/#list-files) API endpoint.
Using the Botpress ClientCalling the API directly
`const res = await client.listFiles()
const files = res.data.files
`
`` const result = await fetch('https://api.botpress.cloud/v1/files', {
method: 'GET',
headers: {
Authorization: `Bearer ${process.env.BOTPRESS_PAT}`,
},
})
const response = await result.json()
const files = response.files
``
Filtering by tags
[](#filtering-by-tags)
If you need to filter files by tags, you can just pass the `tags` parameter which should be an object with key-value pairs of tags a file must have in order to be returned. Tag filtering works in an "AND" fashion, so only the files that have all the specified tags will be returned.
Using the Botpress ClientCalling the API Directly
`const res = await client.listFiles({
tags: {
category: 'Sales',
},
})
`
`` const tags = {
category: 'Sales',
}
const result = await fetch('https://api.botpress.cloud/v1/files?tags=' + encodeURIComponent(JSON.stringify(tags)), {
method: 'GET',
headers: {
Authorization: `Bearer ${process.env.BOTPRESS_PAT}`,
},
})
``
> ## 📘
>
> Calling the API Directly
>
> If you're making the HTTP request directly to the API please note that you'll need to pass the tags parameter as a JSON-serialized, URL-encoded string (the Botpress Client handles this automatically for you).
Pagination
[](#pagination)
The [List Files](../docs/api-documentation/#list-files) API endpoint will return by default the 20 most recent files your bot has. If you need to list older files you can use the `nextToken` property returned in the API response to retrieve the next page (if any) of files. The `nextToken` will be included for each page if there are files remaining to be listed.
For example:
JavaScript
`let res = await client.listFiles()
const files = res.data.files
// You can put this in a loop to retrieve all the files if needed.
if (res.data.nextToken) {
res = await client.listFiles({ nextToken: res.data.nextToken })
files.push(...res.data.files)
}
`
Updating the file metadata
[](#updating-the-file-metadata)
Only the tags and access policies of a file can be updated.
Here's an example of how to update the access policies and tags of a file using the Botpress Client:
Using the Botpress ClientCalling the API Directly
`` await client.updateFile({
id: 'YOUR_FILE_ID',
accessPolicies: ['integrations'], // This value will replace the existing access policies of the file.
tags: {
// This acts as a "patch" or partial update, so only the tags specified here will be updated, the rest will remain unchanged. If you need to delete an existing tag, you can set it to a `null` value.
category: 'Support', // This tag will be updated.
knowledgeBaseName: null, // This tag will be deleted.
subcategory: 'Technical', // This tag will be added.
// Any other tags not specified here will remain unchanged.
},
})
``
`` await fetch(
'https://api.botpress.cloud/v1/files/YOUR_FILE_ID',
{
method: 'PUT',
headers: {
Authorization: `Bearer ${process.env.BOTPRESS_PAT}`,
},
body: {
accessPolicies: ['integrations'], // This value will replace the existing access policies of the file.
tags: {
// This acts as a "patch" or partial update, so only the tags specified here will be updated, the rest will remain unchanged. If you need to delete an existing tag, you can set it to a `null` value.
category: 'Support', // This tag will be updated.
knowledgeBaseName: null, // This tag will be deleted.
subcategory: 'Technical', // This tag will be added.
// Any other tags not specified here will remain unchanged.
},
},
}
)
``
Updating file content
[](#updating-file-content)
If you need to update the content of a file, you can create a new file with the updated content and then delete the old file. The file ID will change in this case.
Deleting a file
[](#deleting-a-file)
To delete a file you can use the "Delete File" API endpoint.
Using the Botpress ClientCalling the API Directly
`await client.deleteFile('YOUR_FILE_ID')
`
`` await fetch('https://api.botpress.cloud/v1/files/YOUR_FILE_ID', {
method: 'DELETE',
headers: {
Authorization: `Bearer ${process.env.BOTPRESS_PAT}`,
},
})
``
Searching files
[](#searching-files)
To run a semantic search on your bot's files you can use the [Search Files](/api-documentation/#search-files) API endpoint. This is particularly useful for RAG (Retrieval Augmented Generation) implementations.
Using the Botpress ClientCalling the API Directly
`const res = await client.searchFiles({
query: 'what are the most popular products of your company?', // This is the natural language query (e.g. a user's question) to be used for running a semantic search on the files of the bot.
contextDepth: 1, // Optional (default: 0), allows you prepend and append the surrounding context to each matching passage in the search results
tags: {
// Optional, allows you to only search files that match the specified tags. Useful if you only want to search a subset of the bot's files.
category: 'Support',
subcategory: 'Technical',
},
limit: 30, // Default is 20, maximum is 50 results
})
const passages = res.data.passages
for (const passage of passages) {
// You can use passage.content here to retrieve the content (including surrounding context, if any) of each matching passage
}
`
`` const params = new URLSearchParams({
query: 'what are the most popular products of your company?',
tags: JSON.stringify({
category: 'Support',
subcategory: 'Technical',
}),
})
const result = await fetch('https://api.botpress.cloud/v1/files/search?' + params.toString(), {
method: 'GET',
headers: {
Authorization: `Bearer ${process.env.BOTPRESS_PAT}`,
},
})
const response = await result.json()
const passages = response.passages
``
You can check the [API reference](/api-documentation/#search-files) for more details on the properties available for each passage object returned in the response.
Using the search results for RAG
[](#using-the-search-results-for-rag)
You can use the search results to provide relevant information to a chatbot for generating a response to a user's question.
Here's an example of a simple RAG (Retrieval Augmented Generation) implementation that shows how you can use the ChatGPT large language model (through the OpenAI API) and the search results provided by our API to answer a user's question:
JavaScript
`` import OpenAI from 'openai' // You'll need to install this package first using your favorite package manager
const openai = new OpenAI({ apiKey: 'YOUR_OPENAI_API_KEY' })) // Change this for your own OpenAI API key
const userQuestion = 'Which are the most popular products of your company?' // This will come from the user's input
const res = await client.searchFiles({
query: userQuestion,
contextDepth: 1, // This number can be increased to pass more context to the model for each matching passage
})
const relevantInformation = res.data.passages.map(passage => passage.content).join("\n\n----------\n\n")
const answer = await openai.chat.completions.create({
model: 'gpt-3.5-turbo', //  This can be changed for any other OpenAI model available here: https://platform.openai.com/docs/models
messages: [
{
role: 'system',
// You can change the text below to include any additional instructions to the model
content: "You are a helpful assistant that answers the user's question based only on the relevant information you are provided along with the question.",
},
{
role: 'user',
content: `## RELEVANT INFORMATION: \n\n ${relevantInformation}\n\n` +
`## ANSWER THE FOLLOWING USER'S QUESTION: \n\n ${userQuestion}`,
},
],
})
``
Security
[](#security)
Access Policies
[](#access-policies)
A file can have a list of special access policies:
* `public_content`: Unauthenticated users can read contents (but not metadata) of the file through a unique permanent URL provided by the API for each file. Without this policy the file URL returned by the API will be temporary and will expire after a short period of time.
* `integrations`: Grants read, search, list access to all integrations of the bot that owns the file.
Permissions
[](#permissions)
| Principal                                            | Permissions                                                                                                               |
| ---------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- |
| Public (unauthenticated/unauthorized users)          | Can only download files that have the public\_content access policy.                                                      |
| Bot                                                  | Owns and manages its files with full permissions to access and manage them, regardless of the user that created the file. |
| Integration                                          | Has all permissions on the files that were created by that integration for the bot they are installed on.                 |
| Viewer workspace member                              | Can read, search, and list all files for the bot, regardless of creator, but cannot create or delete files.               |
| Developer, Manager or Administrator workspace member | Has all permissions on the bot's files, regardless of creator.                                                            |
| Billing Manager workspace member                     | No permissions on files.                                                                                                  |
> ## 📘
>
> Note
>
> The [List Files](../docs/api-documentation/#list-files) API endpoint will filter out files that are not accessible to the user calling that API endpoint.
Pricing
[](#pricing)
There are two types of storage: File Storage and Vector DB Storage. All files count toward your workspace's File Storage usage. Indexed files also count toward your workspace's Vector DB Storage usage.
For full details on pricing please check our [Pricing page](https://botpress.com/pricing).
Quotas/Limits
[](#quotaslimits)
* Maximum file size: 100 MB
* Rate limits: [same as all other endpoints](../docs/preventing-abuse) of our public API
* Tags  
   * As defined in the [Limits and Quotas of Botpress Cloud](../docs/limits-and-quotas-of-botpress-cloud)
* Search  
   * Query: 1 KB maximum  
   * Maximum number of results: 50
Updated 2 months ago
---
* [Table of Contents](#)
* * [Getting Started](#getting-started)  
   * [Examples](#examples)  
   * [Creating and uploading a file](#creating-and-uploading-a-file)  
         * [In an Execute Card in your bot](#in-an-execute-card-in-your-bot)  
         * [In a custom script using the Botpress Client](#in-a-custom-script-using-the-botpress-client)  
         * [In a custom script using an HTTP client](#in-a-custom-script-using-an-http-client)  
         * [Adding tags to a file](#adding-tags-to-a-file)  
         * [Creating a public file](#creating-a-public-file)  
         * [Creating an indexed file](#creating-an-indexed-file)  
         * [Getting the file's metadata](#getting-the-files-metadata)  
         * [Listing existing files of a bot](#listing-existing-files-of-a-bot)  
         * [Updating the file metadata](#updating-the-file-metadata)  
         * [Deleting a file](#deleting-a-file)  
         * [Searching files](#searching-files)  
   * [Security](#security)  
         * [Access Policies](#access-policies)  
         * [Permissions](#permissions)  
   * [Pricing](#pricing)  
   * [Quotas/Limits](#quotaslimits)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Find
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Find
Quickly search through your bot's content, workflows, and configurations.
[ Suggest Edits](/edit/find)
The Find function in Botpress Studio is a powerful tool that helps you quickly search through your bot’s content, workflows, and configurations. It allows you to locate specific elements, such as nodes, actions, text, or variables, within your bot project, making it easier to navigate and edit complex bots.
Key Features of the Find Function
[](#key-features-of-the-find-function)
* **Quick Search:** Instantly locate items like specific nodes, cards. actions, intents, or text within your flows and content.
* **Contextual Results:** Provides contextual search results, showing where the found items are located within the bot’s structure.
* **Navigation:** Click on a search result to jump directly to that element within the Botpress Studio.
* **Keyword Highlighting:** Highlights occurrences of your search term in the workflows, helping you see exactly where changes are needed.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Key Features of the Find Function](#key-features-of-the-find-function)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Home
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Home
Dashboard in the Studio displaying your bot's global settings and instructions.
[ Suggest Edits](/edit/home-2)
> ## 📘
>
> Home display
>
> The homepage only appears when your Start node is connected to an Autonomous Node.
>
> It's meant to be used alongside the Autonomous Node to manage its behaviour, global settings, and what resources or channels it has access to.
From the Home menu located in the Studio, you can configure your agent's global settings. These are broken down into the following categories:
Instructions
[](#instructions)
The Instructions section is where you define the primary role or persona of your bot. This setting influences how the bot interprets and responds to user inputs by giving it a specific context or role to operate within.
**Instruction Field**: Enter the role or persona that you want your bot to assume. For example, "You are an IT support professional. This setting tailors the bot's responses to align with the specified role, ensuring that the bot provides relevant and context-appropriate answers.
For example, if you set the instruction as "You are an IT support professional," the bot will prioritize technical support-related responses, guiding users through troubleshooting steps, and providing IT-related advice.
---
Channels
[](#channels)
The Channels section allows you to enable and configure the platforms where your bot will be active. This is crucial for determining how and where users can interact with your bot.
Available channels shows you which deployment channels are already active. You can add new channels by clicking on the "+ Add channel" button to enable additional channels for your bot. This can include other messaging platforms, social media integrations, or custom channels.
---
Knowledge Bases
[](#knowledge-bases)
The "Knowledge Bases" section is where you manage the sources of information that your bot can reference to answer user questions. These sources can include documents, websites, tables, and other forms of structured or unstructured data.
Toggle the switch in this section to enable or disable the bot’s access to specific knowledge bases. You can create new Knowledge Base files directly from within this interface.
---
Capabilities
[](#capabilities)
The "Capabilities" section defines the actions your bot can perform based on its enabled agents, integrations, and workflows. This provides you with an overview of all of your bot's functional abilities.
Clicking on any of the capabilities listed here, or the 'Edit Main Flow' button, will take you to the part of the workflow where you can make changes to this configuration.
---
Agents
[](#agents)
The "Agents" section is where you manage Agents, the specialized modules that enhance your bot’s capabilities. These agents can provide specific functions, such as summarization or advanced knowledge querying.
This section lists your bot's available or enabled Agents. Click on the "+ Add" button to integrate new agents that provide additional functionality to your bot. This could include agents for language translation, sentiment analysis, or other specialized tasks.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Instructions](#instructions)  
   * [Channels](#channels)  
   * [Knowledge Bases](#knowledge-bases)  
   * [Capabilities](#capabilities)  
   * [Agents](#agents)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Conversation History
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Conversation History
[ Suggest Edits](/edit/getting-the-conversation-history-from-within-your-bot)
Botpress Cloud provides you with several different ways to export a conversation to external services, each one has its use cases and advantages. Let's take a look at them.
Using the Summary Agent
[](#using-the-summary-agent)
The [Summary Agent](../docs/agents#summary-agent) listens to all new messages in the conversation to build a summary and a transcript.
* The summary is available at `conversation.SummaryAgent.summary` and contains an explanation of what happened in conversation, like "The user asked for the opening hours and the bot answered by saying the business works 24/7". You can choose how detailed the summary is by setting the max tokens in the Agent settings.
* The transcript is available at `conversation.SummaryAgent.transcript` and contains the history of the conversation going back a certain amount of turns. You can set that amount of turns in the Summary Agent settings. If you set it to 0, the transcript will contain all messages.
Advantages
[](#advantages)
The `summary` variable is useful if you don't need to have many details about the conversation, especially because some of them get lengthy and if you may not want all that data. The `transcript` variable is the best way to have the full history of the conversation in a single text without needing [Hooks](../docs/hooks) or other workarounds. Using the Summary Agent for exporting conversations is also great because you have access to the history during the very conversation so you don't need to make manual or scheduled requests to our API from external services.
Disadvantages
[](#disadvantages)
The disadvantage of using the Summary Agent for exporting conversations is that after the amount of messages surpasses the max amount of turns for the transcript, you won't have the full conversation anymore (You can mitigate this by setting the max amount to 0). Another disadvantage is that the Agent only has access to the
current session, so if the user is resuming a conversation, you won't have the previous messages in the history. To get the whole conversation at any moment, use the [API method for exporting conversations](../docs/exporting-raw-conversations-with-the-botpress-api)
Using Hooks
[](#using-hooks)
[Hooks](../docs/hooks) are functions that are executed under the hood every time there's a new message from the user or from the bot. You can create hooks that build the conversation history as it happens. They work similarly to the Summary Agent but with hooks you can customize how the history is built and there's no limitation for its size (with the exception of the 128KB max session size).
Advantages
[](#advantages-1)
This solution is useful if you need to have all details about the conversation. It also allows you to build the history however you like - adding more information than only the message and actor.
Disadvantages
[](#disadvantages-1)
The disadvantage of using Hooks is that it requires some work to set up and you only have access to the current session, so if the user is resuming a conversation, you
won't have the previous messages in the history. To get the whole conversation at any moment, use the [API method for exporting conversations](../docs/exporting-raw-conversations-with-the-botpress-api)
Setting up the Hooks
[](#setting-up-the-hooks)
1. Create a hook under "Before Incoming Message" in the "Hooks" section with the following code:
JavaScript
`` if (!event.state.session.fullHistory) {
event.state.session.fullHistory = ''
}
event.state.session.fullHistory = event.state.session.fullHistory + `user:  ${event.payload.text}` + '\n'
``
1. Create a hook under "Before Outgoing Message" with the following code:
JavaScript
`` if (!event.state.session.fullHistory) {
event.state.session.fullHistory = ''
}
event.state.session.fullHistory = event.state.session.fullHistory + `bot: ${outgoingEvent.payload.text}` + '\n'
``
Sending the Conversation History
[](#sending-the-conversation-history)
Now that you have the conversation history, you can add an [Execute Code card](../docs/execute-code) to manipulate the variable as you prefer, for example sending it to an API or [via email](../docs/tips-tricks#send-emails-using-sendgrid-api):
JavaScript
`await axios.post('https://my-api-url.com', {
// keep only the desired variable below
conversation: event.state.session.fullHistory OR conversation.SummaryAgent.summary OR conversation.SummaryAgent.transcript
user: user.name
})
`
> ## 📘
>
> Info
>
> You could add this card to the [Conversation End](../studio/workflows/#conversation-end) workflow so that the full session is sent when the conversation ends. (The bot will only enter the End flow if there's a explicit Transition to an End node)
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Using the Summary Agent](#using-the-summary-agent)  
         * [Advantages](#advantages)  
         * [Disadvantages](#disadvantages)  
   * [Using Hooks](#using-hooks)  
         * [Advantages](#advantages-1)  
         * [Disadvantages](#disadvantages-1)  
         * [Setting up the Hooks](#setting-up-the-hooks)  
   * [Sending the Conversation History](#sending-the-conversation-history)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Flow Logic
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Flow Logic
Cards that move the user along a defined path under certain conditions.
[ Suggest Edits](/edit/flow-logic)
Overview
[](#overview)
Flow Logic Cards are essential tools that help control the flow and decision-making within your chatbot's conversation. They enable you to add logic and structure to your bot’s behavior, making it possible to guide the conversation based on user input, bot state, or external factors.
These Cards allow you to create dynamic, interactive, and context-aware bots that respond intelligently to different scenarios.
Flow Logic Card Types
[](#flow-logic-card-types)
There are two default types of flow logic cards available to you in the Card Tray.
Intent
[](#intent)
The Intent Card is used to direct the conversation flow based on the user's recognized intent. Intents are predefined categories of user input that represent what the user wants to achieve, such as booking an appointment, asking for help, or providing feedback. When an Intent Card is triggered, it checks if the user’s input matches any of the defined intents and routes the conversation accordingly.
There are two ways to define the intent you want to trigger using this card:
1. By selecting a predefined intent from your Library, or;
2. By defining an inline intent that only exists for this card.
Expression
[](#expression)
The Expression Card evaluates custom expressions or conditions written in JavaScript to make decisions within the flow. This Card allows you to create more granular control based on specific criteria, such as checking variable values, user input, or any other custom logic. Expression Cards are versatile and can be used to incorporate complex decision-making within your bot.
There are two ways to define conditions for transition:
1. Use AI to generate custom JavaScript based on a specific prompt, or;
2. Disable the AI-generation tool by clicking on the star icon and manually input the JavaScript code.
| Example           | Description                                                                                                                                                                                                      |
| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| User Input        | To check if the user entered a value between 1 and 10, you can use \*\*User Input\*\* Example: \*user input is between 1 & 10\*                                                                                  |
| User Variable     | To retrieve a value from the user variable, you can use \*\*\`user.{variable name}\`\*\* Example: \*user language is English\*                                                                                   |
| Workflow Variable | To check a workflows variable, you can use \*\*\`workflow.{variable name}\`\*\* Example: \*workflow variable supportEmail contains Botpress\*                                                                    |
| Intents           | You can combine multiple checks together, for example you can check if an intent is of type "affirmative", and its confidence is more than 50%.  Example: \*intent is affirmative and intent confidence is 50%\* |
| Advanced          | You can use an advanced javascript expression to move from one node to the next when the expression satisfies the condition.                                                                                     |
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Overview](#overview)  
         * [Flow Logic Card Types](#flow-logic-card-types)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Home
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Home
An overview of all bots and recent activity in your Workspace.
[ Suggest Edits](/edit/home-1)
Recent
[](#recent)
A dashboard that shows recently active and edited bots in your Workspace, along with a realtime overview of analytics and bot activity.
Bots
[](#bots)
Lists all of the bots in your Workspace. At a glance you can see the bot's name, how many integrations it has installed, any runtime errors, whether it has enabled Always Alive status, and view more information about the bot or edit it directly in the Studio.
View as
[](#view-as)
This menu allows you to preview your Workspace profile as a member of the public, or a member of the Workspace itself. You can use this to gauge how other builders will see your Workspace when you contribute an integration or workflow.
Usages
[](#usages)
Shows relevant usage metrics, sorted by consumption. You can use this to get a quick overview of which usage limits are closest to reaching their cap.
Recent changes
[](#recent-changes)
A log of the most recent changes and updates made to bots in the given Workspace, sorted by the time of the change.
Hub contributions
[](#hub-contributions)
The most recent contributions this Workspace has made to the Botpress Hub.
Members
[](#members)
Lists all of the members in the Workspace.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Recent](#recent)  
   * [Bots](#bots)  
   * [View as](#view-as)  
   * [Usages](#usages)  
   * [Recent changes](#recent-changes)  
   * [Hub contributions](#hub-contributions)  
   * [Members](#members)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
HITL
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# HITL
Human-in-the-loop allows a live agent to participate directly in the bot's conversation.
[ Suggest Edits](/edit/hitl-1)
Overview
[](#overview)
The Human-in-the-Loop (HITL) integration is designed to bring human oversight and intervention into AI-driven workflows. This integration allows human operators to step in and manage specific interactions, tasks, or decisions, enhancing your bot's ability to handle complex or sensitive scenarios.
Key Features
[](#key-features)
Real-Time Escalation
[](#real-time-escalation)
The HITL Agent can seamlessly transfer conversations to a human agent when predefined conditions are met. This allows for immediate intervention in cases where the AI model detects uncertainty, user frustration, or when a high-stakes decision is required.
Decision Gates
[](#decision-gates)
Incorporate human decision points into workflows, allowing for human review and approval of AI-generated outputs before final actions are taken. This ensures compliance with business rules and reduces the risk of errors in critical processes.
Audit Trail and Logging
[](#audit-trail-and-logging)
The HITL Agent maintains a detailed record of all human interventions, providing transparency and accountability. This feature is essential for industries requiring regulatory compliance or quality assurance, allowing teams to review the history of human interactions with the AI.
Customizable Triggers
[](#customizable-triggers)
Users can define specific triggers for human intervention based on various criteria, such as conversation sentiment, keyword detection, or task complexity. This ensures that human involvement is precisely targeted where it adds the most value.
HITL is a critical component of Botpress’s commitment to providing flexible, powerful, and safe AI solutions. It allows organizations to confidently deploy AI while maintaining the necessary level of human oversight and control.
Usage
[](#usage)
> ## 💼
>
> Note
>
> HITL through the Botpress dashboard is only available to Team and Enterprise subscribers.
To get started with HITL, enable the HITL integration from the integration hub. Make sure you've also enabled the HITL agent.
At this point, the 'Escalate to a Human' card will be available for use in the card tray.
Dragging this into a node will stop the flow of the conversation and escalate the conversation to the 'HITL' tab of the bot's dashboard.
Once the conversation appears in the HITL tab, it can be assigned to a user in the Workspace. You can also assign a conversation to yourself.
![](https://files.readme.io/5780659b5819fd48cc3558e93721c525bc256bb98b240055297c7ea1cf76d3a6-Screenshot_2024-09-11_at_2.21.21_PM.png)
From this tab, the agent can view the conversation history prior to the escalation, as well as participate in the conversation by using the 'Live Chat' tab.
When the conversation has been successfully resolved by the live agent, clicking 'End Conversation' will return control of the workflow over to the bot. From here, your bot can resume its flow, or end the conversation altogether.
Updated 20 days ago
---
* [Table of Contents](#)
* * [Overview](#overview)  
         * [Key Features](#key-features)  
   * [Usage](#usage)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Botpress Documentation
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Botpress Documentation
Botpress is a platform used to build LLM-powered AI agents and chatbots.
[ Suggest Edits](/edit/home)
Botpress enables teams of all sizes to build, deploy, and monitor AI-powered chatbots and agents. It allows you to reliably automate complex conversations, tasks, and workflows across a variety of communication channels.
The building process is split into three phases: Build, Deploy, and Monitor.
Build
[](#build)
Building on Botpress takes place primarily in the Studio, where you'll decide what kinds of conversations your bot will be able to handle, what information it knows, and what tools it has access to.
Deploy
[](#deploy)
When you've finished building and testing your bot, Botpress makes it easy to put your bot in front of customers or team members.
Monitor
[](#monitor)
Once your bot has been deployed, Botpress allows you to track its performance and understand if it's accomplishing its tasks correctly with a suite of analytics and logging tools.
Updated 6 days ago
---
What’s Next
* [Build](/docs/build)
* [Table of Contents](#)
* * [Build](#build)  
   * [Deploy](#deploy)  
   * [Monitor](#monitor)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Events
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Events
Custom actions based on different states and interactions in the conversation.
[ Suggest Edits](/edit/events-3)
The cards in the Events category allow you to interact with your bot based on different states and interactions within the chat platform.
What are Events?
[](#what-are-events)
Events represent interactions or changes of state within the chat platform. These might not directly involve a message exchange in a conversation, but they capture a variety of activities. For instance, it could be when a user opens the chat in WhatsApp, when a new issue is created in Linear, or a member joining a group in Telegram.
Fixed Schedule
[](#fixed-schedule)
Fixed Schedule is a feature that allows you to schedule events to occur at specific times. This can be useful for sending reminders, notifications, or other time-sensitive messages to users. Here's how you can use the Fixed Schedule feature:
Cron Expression
[](#cron-expression)
A cron expression is a string representing a schedule. It consists of five fields separated by spaces, each representing a different aspect of the schedule. The fields are as follows:
1. Minute (0 - 59)
2. Hour (0 - 23)
3. Day of the month (1 - 31)
4. Month (1 - 12)
5. Day of the week (0 - 7)
Here are some examples of cron expressions:
* `0 0 12 * * ?` \- This expression triggers an event every day at 12:00 PM.
* `0 0 12 ? * MON-FRI` \- This expression triggers an event every weekday at 12:00 PM.
* `0 0 12 1/1 * ? *` \- This expression triggers an event every minute.
Preview Run
[](#preview-run)
You can preview the next 10 runs of the cron expression by clicking on the "Preview Run" button. This will show you the next time the event will be triggered based on the cron expression.
You can use any website to visualize your cron expression. For example, check <https://crontab.guru/>
Webchat Triggers
[](#webchat-triggers)
When you enable the webchat, you can access Webchat Triggers. These are specific types of events that you can use for your benefit. Here are the types of Webchat Triggers:
* Trigger:
Activated when a custom event is sent from the user's browser.
* Conversation Started:
Activated when the user opens the bot, useful for showing a welcome message before the user sends a message.
* Message In Channel:
Used to start a conversation or listen to events on external systems. For example, if there's a new lead in Salesforce, you can send a message to the sales team in Slack, or start the webchat when a visitor is on Page X.
Using Triggers
[](#using-triggers)
To use a trigger, add it to the studio editor. Here's what you need to remember when using triggers:
* Conversation triggers can only be used once.
* You can add conditions for firing the trigger using the Edit Filter.
* To test your trigger, click 'Discover Events', choose the event you want to repeat, click 'save', then 'close'. Select it from the dropdown list named "Select an event to trigger". Now you can click "Trigger this event" to repeat the payload in the emulator.
> ## 🚧
>
> Using Filters
>
> Please note: filters are evaluated from the first trigger card created to the last one created. Make sure your conditions are written in consequence.
Advanced Options - Conversation ID
[](#advanced-options---conversation-id)
The conversation ID is a unique identifier for each conversation. It can be used to track the conversation history and context. You can use the conversation ID to send messages to a specific conversation or to store information about the conversation.
Welcome Message
[](#welcome-message)
To make the bot send a welcome message, add a trigger to your flow, then choose the "Conversation Started" type. This would make the bot send a message even if the user didn't.
> ## 🚧
>
> Welcome Message
>
> Welcome Messages can be tested only after publishing the chatbot and can be tested mainly from the web chat screen. Like in the shareable link, the chat from the chatbot dashboard or the embedded web chat component.
Sending Custom Information
[](#sending-custom-information)
To send custom information from your website to the bot using the "trigger" type, you can use a simple code snippet like the one provided here. For example you can execute this code when a button on the webpage is clicked, sending a custom payload to the bot:
JavaScript
`window.botpressWebChat.sendPayload({
type: 'trigger',
payload: {
myCustomProperty: 'hello',
},
})
`
Webchat Lifecycle and Events
[](#webchat-lifecycle-and-events)
Webchat lifecycle events are specific stages in the lifecycle of the bot's interaction with the user. These stages include when the bot is loaded, ready, when the UI is opened, closed, resized, or when the user is connected, among others.
These are specific stages in the lifecycle of the bot's interaction with the user:
| Event Name       | Description                                                          |
| ---------------- | -------------------------------------------------------------------- |
| LIFECYCLE.LOADED | Indicates the bot has been loaded.                                   |
| LIFECYCLE.READY  | Indicates the bot is ready for interaction.                          |
| UI.OPENED        | Indicates the chat user interface (UI) is opened.                    |
| UI.CLOSED        | Indicates the chat UI is closed.                                     |
| UI.RESIZE        | Triggered when the chat UI is resized. Useful in responsive designs. |
| UI.SET-CLASS     | Allows setting a specific class to the chat UI. Useful for styling.  |
| CONFIG.SET       | Triggered when a configuration setting is changed.                   |
| MESSAGE.SENT     | Indicates a message has been sent.                                   |
| MESSAGE.RECEIVED | Indicates a message has been received.                               |
| MESSAGE.SELECTED | Triggered when a message is selected.                                |
| USER.CONNECTED   | Indicates a user has connected.                                      |
> ## 👍
>
> Tip
>
> Whether 'UI.RESIZE' and 'UI.SET-CLASS' are necessary depends on the specific needs of your bot interface and how you want to handle different UI events.
Webchat Integration
[](#webchat-integration)
To integrate the webchat into your website, you can include the Botpress webchat script in your HTML code and use the provided functions to control the bot's behavior based on user interactions.
Here's an example:
HTML
`<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>Triggers</title>
</head>
<body>
<script src="https://cdn.botpress.cloud/webchat/v0/inject.js"></script>
<script src="https://mediafiles.botpress.cloud/{botId}/webchat/config.js" defer></script>
<button id="myButton">Click Me!</button>
<script>
function handleClick() {
console.log('Button clicked!')
window.botpressWebChat.sendPayload({
type: 'trigger',
payload: {
myCustomProperty: 'hello',
},
})
}
const button = document.getElementById('myButton')
button.addEventListener('click', handleClick)
window.botpressWebChat.onEvent(
function (event) {
if (event.type === 'LIFECYCLE.LOADED') {
window.botpressWebChat.sendEvent({ type: 'show' })
}
},
['LIFECYCLE.LOADED']
)
</script>
</body>
</html>
`
In this example, when the user clicks on the button, the bot opens up and then sends a payload to the bot. You can customize this code based on your needs to create interactive experiences for your users.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [What are Events?](#what-are-events)  
   * [Fixed Schedule](#fixed-schedule)  
         * [Cron Expression](#cron-expression)  
   * [Webchat Triggers](#webchat-triggers)  
         * [Using Triggers](#using-triggers)  
         * [Advanced Options - Conversation ID](#advanced-options---conversation-id)  
   * [Welcome Message](#welcome-message)  
         * [Sending Custom Information](#sending-custom-information)  
         * [Webchat Lifecycle and Events](#webchat-lifecycle-and-events)  
         * [Webchat Integration](#webchat-integration)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Events
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Events
Triggers that your bot recognizes and responds to.
[ Suggest Edits](/edit/events-2)
Events on Botpress are key triggers that the chatbot recognizes and reacts to during a conversation.
Botpress provides a comprehensive system for managing and inspecting events that occur within your bot. This system is essential for understanding how your bot interacts with users and for troubleshooting any issues that may arise.
**Events** represent anything that happens within the bot, such as messages from users, bot replies, and various system-level occurrences. By examining these events, builders can debug triggers, inspect payloads, and monitor the health and activity of their bot.
Filtering Events
[](#filtering-events)
The Events page allows you to filter events by the following criteria:
* **Event**: The type of event that occurred.
* **Conversation**: The conversation to which the event belongs. You can filter by conversation ID.
* **User**: The user who triggered the event. You can filter by user ID.
* **Message**: The message content. You can filter by message ID.
Each event in Botpress has a specific type and status. These characteristics provide detailed information about what the event represents and the state of its processing.
Types of Events
[](#types-of-events)
* `message_created`: Generated when a new message is created by a user.
* `state_expired`: Indicates that a conversation state has expired.
* `task_update`: Reflects changes in the status of a task.
* `webhook:event`: Triggered by a webhook event.
* `webchat:conversationStarted`: Marks the beginning of a new conversation.
* `webchat:trigger`: Indicates that a trigger has been activated.
* `botready`: Signifies that the bot is ready to receive messages.
* `botpublished`: Occurs when the bot is published.
Event Statuses
[](#event-statuses)
Events can have one of the following statuses:
* `Processed`: The event has been successfully handled by the bot.
* `Failed`: The bot encountered an error while processing the event.
* `Pending`: The event is in the queue, awaiting processing.
* `Ignored`: The event has been deliberately ignored, usually by design.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Filtering Events](#filtering-events)  
         * [Types of Events](#types-of-events)  
         * [Event Statuses](#event-statuses)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Debugger, Logs & JSON
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Debugger, Logs & JSON
[ Suggest Edits](/edit/debugger-logs-json)
![](https://files.readme.io/23ea724-image.png)
Event Debugger
[](#event-debugger)
The Event Debugger provides information on how your bot understood the user's message and why it made specific decisions. It also displays the complete event payload, including NLU metadata, state, and raw responses.
To open or close the Debugger, you can use the keyboard shortcut **cmd/ctrl + j**. This will toggle the Debugger on and off and allow you to access the information it provides.
Logs
[](#logs)
By using logs, you can see what happened step-by-step before an error occurred. This can help you understand what went wrong and how to fix it.
It's important to include enough logging in your bot to ensure that you have enough
information to find and fix issues. By analyzing the Botpress Logs, you can pinpoint
exactly where the problem occurred and take the necessary steps to resolve it.
How to log in Botpress
[](#how-to-log-in-botpress)
Logging in Botpress is similar to logging in JavaScript. You can use the `console.log()` function in the [Code Card](../docs/execute-code) to print messages to the Botpress Logs. This function takes a string as an argument and prints it to the Botpress Logs.
Logging User Information
[](#logging-user-information)
If you're interested in understanding what user data is being processed, you might want to log their first name. This could help you trace if the correct user data is being accessed and used in your workflow.
**Example use-case**: Understanding which user's data is being processed especially if your bot offers personalized experiences.
JavaScript
`console.log("User's First Name:", user.firstName);
`
Logging Workflow Data
[](#logging-workflow-data)
You might want to know which phone number is being used in a specific workflow. By logging this, you can ensure that the correct numbers are being pulled from your database or user input.
**Example use-case**: Debugging workflows that might involve sending SMS messages or making phone calls. Ensuring that the correct phone numbers are used can be critical.
JavaScript
`console.log("Workflow Phone Number:", workflow.phoneNumber);
`
Logging Environment Configurations
[](#logging-environment-configurations)
If your bot accesses external APIs or databases, the API key or endpoint might change depending on the environment (development, staging, production, etc.). Logging the env variables can help ensure that the bot is using the correct configurations.
**Example use-case**: Troubleshooting connectivity or access issues with external services. By logging the API key or endpoint, you can ensure you're using the correct configurations and not accidentally hitting a production database during development or vice versa.
JavaScript
`console.log("Current API Key:", env.apiKey);
`
Checking the Botpress Studio Logs
[](#checking-the-botpress-studio-logs)
To check the Botpress Studio Logs, open up the bottom panel and click on the **Logs** tab. This will display all the logs that have been generated by your bot.
> ## 📘
>
> Note
>
> The logs are displayed in reverse chronological order, with the most recent log at the top. You can click on a log to expand it and view its details.
Checking the Production Logs
[](#checking-the-production-logs)
To check the [Production Logs](../docs/admin-logs) (or logs from a deployed bot), go to the admin dashboard -> select your workspace and bot -> click on the **Logs** tab. This will display all the logs that have been generated by your deployed bot.
State
[](#state)
In a bot conversation, each session has an associated state which is created at the beginning of the conversation just before the Entry Node is processed. The state persists throughout the conversation and is used to keep track of information related to the ongoing interaction with the user.
The state is global to the conversation, which means that if the conversation spans multiple flows, all the flows will share the same state. This allows information to be passed between flows and ensures that the bot has a consistent view of the conversation history.
The state can be used to store variables, such as the user's name, preferences, or history of interactions, that are needed throughout the conversation. It can also be used to keep track of the bot's progress through the conversation, such as which questions have been asked and which tasks have been completed.
By using the state effectively, you can create more personalized and engaging bot experiences for your users.
JSON
[](#json)
This tab displays the raw information that is processed during each conversation exchange in the Botpress Emulator. The information can be accessed through **event.property**, where "property" refers to one of the properties listed in the table below.
Here is a table that describes each property in detail:
| Property       | Description                                                                                                                                                                      |
| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Type           | A string property that indicates the type of the message, e.g., text, audio, video, etc.                                                                                         |
| Channel        | A string property that specifies the channel or platform through which the message was received. For example, the channel can be an emulator, Facebook Messenger, WhatsApp, etc. |
| Direction      | A string property that specifies the direction of the message, i.e., whether the message is incoming or outgoing.                                                                |
| Payload        | A JSON object that encapsulates the message data. The structure of the payload object depends on the type of message.                                                            |
| UserId         | A string property that identifies the user who sent the message.                                                                                                                 |
| BotId          | A string property that identifies the bot or conversational AI system that received the message.                                                                                 |
| CreatedOn      | A timestamp that specifies the date and time when the message was received.                                                                                                      |
| ConversationId | A string property that identifies the conversation thread to which the message belongs.                                                                                          |
| Id             | A unique identifier for the message.                                                                                                                                             |
| Preview        | A preview or summary of the message.                                                                                                                                             |
| MessageId      | A string property that identifies the ID of the message.                                                                                                                         |
| Tags           | An object that contains tags associated with the message.                                                                                                                        |
| Flags          | An object that contains flags associated with the message.                                                                                                                       |
| State          | An object that contains the state of the conversation.                                                                                                                           |
| Suggestions    | An array of suggested responses or actions that the bot can take based on the message.                                                                                           |
| NLU            | An object that encapsulates the results of the natural language understanding (NLU) process for the message.                                                                     |
| Decision       | An object that encapsulates the decision-making process for the message.                                                                                                         |
Updated 4 months ago
---
* [Table of Contents](#)
* * [Event Debugger](#event-debugger)  
   * [Logs](#logs)  
         * [How to log in Botpress](#how-to-log-in-botpress)  
   * [State](#state)  
   * [JSON](#json)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Deploy
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Deploy
Sharing your bot with end users or internal team members across channels.
[ Suggest Edits](/edit/deploy)
Publishing your bot
[](#publishing-your-bot)
When you're ready to share your bot with end users, click on the **Publish** button located at the top of the Studio.
Your users will now be able to interact with the version of the bot you most recently published. Any changes you make before publishing again will not reflect in your bot until you publish again.
Ways to share your bot
[](#ways-to-share-your-bot)
Shareable link
[](#shareable-link)
The share button, located in the top menu bar in the Studio, generates a custom preview of your bot's interface. This is accessed by a unique URL that you can share with team members or use yourself for quick prototyping and testing.
You can also access this unique URL from the Webchat tab of your bot's admin dashboard.
Webchat
[](#webchat)
Webchat is a custom frontend for your bot, automatically generated by Botpress, that you can embed on any website or web page.
Learn more about Webchat [here](https://botpress.com/docs/embedded-webchat)
Integration
[](#integration)
Botpress offers a library of integrations that can deploy your bot to a third-party service. For example, your bot can be deployed on a messaging channel like WhatsApp, or to a customer support channel like ZenDesk.
Learn more about Integrations [here](https://botpress.com/docs/messaging-channels-overview).
Embed your bot within an app
[](#embed-your-bot-within-an-app)
Botpress bots can be embedded an application or other piece of software using the Botpress SDK.
Learn more about the Botpress SDK [here](https://botpress.com/docs/sdk).
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Publishing your bot](#publishing-your-bot)  
   * [Ways to share your bot](#ways-to-share-your-bot)  
         * [Shareable link](#shareable-link)  
         * [Webchat](#webchat)  
         * [Integration](#integration)  
         * [Embed your bot within an app](#embed-your-bot-within-an-app)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Emulator
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Emulator
[ Suggest Edits](/edit/emulator)
You can debug your bot conversation using the built-in Emulator in the right-side panel.
> ## 📘
>
> Note
>
> To visualize the actual user experience, use the Share button to have a hosted easily shareable version of the [Web Chat](..docs/webchat) (this is the production bot already, conversations will be saved) or ideally test the bot in the channel you intend to deploy it on. Conversations in the Emulator won't be saved and the [bot invocations](../docs/usage-1) won't be counted against your usage quota, but AI operations will.
Shortcuts
[](#shortcuts)
Accessing the Emulator
[](#accessing-the-emulator)
Press cmd/ctrl + e to toggle the Emulator open or closed.
Resend the Same Messages
[](#resend-the-same-messages)
Pressing ↑ or ↓ on your keyboard in the text input allows you to navigate and resend previously sent messages quickly.
> ## 📘
>
> Info
>
> The last 20 messages sent are persistently stored in your browser storage.
Options
[](#options)
New Conversation
[](#new-conversation)
The `New Conversation` button erases the history and state from the old conversation and start a new conversation with the same user information. It's available at the top right corner of the emulator.
Start as a new user
[](#start-as-a-new-user)
The `Start as new user` button erases the history and state from the old conversation and start a new conversation with different user information. It's available at the top right corner of the emulator behind the 3 dots.
Simulate timeout event
[](#simulate-timeout-event)
The `Simulate timeout event` button triggers the [Timeout flow](../docs/workflows#timeout) so you can check how the bot behaves when the conversation expires. It's available at the top right corner of the emulator behind the 3 dots.
In-line Logs
[](#in-line-logs)
The Emulator shows the status of the conversation and the different steps that are being or have been executed under the hood to get the bot's response. They are a simpler version of the [Event Debugger](../docs/debugger-logs-json)'s summary. Bot events, and card-processing results are shown this way, only in the emulator.
Bot-events
[](#bot-events)
* Conversation started: The user has started the conversation by sending a message or a [Trigger](../docs/events-1) Event has been triggered.
* Conversation ended: The conversation flowed to an End node and has gone through the [Conversation End workflow](../docs/workflows#conversation-end), or it has ended by not having possible transitions.
* Error ocurred: An irrecoverable error has ocurred and the conversation has flowed to the [Error](../docs/workflows#error) . The error message is visible by hovering the status.
* Waiting for user input: The bot is waiting for the user to send a message in order to proceed with the conversation flow.
Card-processing results
[](#card-processing-results)
Knowledge Base
[](#knowledge-base)
* Answer found in Knowledge Base: The bot has gone through the [Knowledge Bases](../docs/knowledge-base) and found an answer to the user's question. Clicking it will take you to the [Logs tab](../docs/debugger-logs-json) where you can see in details what was sent to the AI and the raw output.
* Knowledge disabled on that node: The bot won't try to find an answer in the Knowledge Base because this node doesn't expect or accept Knowledge questions.
* No content matched the query: There is no content in the Knowledge Base that matches the user message. May accompany the previous status.
* Knowledge Base answer: Text displayed automatically after a question without the need of a Text card. It will contain the citations to help you [debug the answers](../docs/knowledge-base#debugging).
Execute
[](#execute)
* Executing code: The bot is executing some custom code from an [Execute Code card](../docs/execute-code).
* Executed code: The bot has finished executing the code. It is mentioned how many milliseconds it took to run.
AI
[](#ai)
* AI Task Running: The bot is running an AI Task. This involves making a request to the selected LLM model, getting a response and then processing it.
* AI Task Completed: The bot has finished running the AI Task. It is mentioned how many milliseconds it took to run.
Flow Logic
[](#flow-logic)
* Entered Workflow - The conversation has flowed to a different workflow. The workflow name is mentioned.
* Transitioned: The conversation has flowed to another workflow or node. It is mentioned the name of the workflow and the node it transitioned to. Clicking it will lead you to the exact node.
* Restarting from node: The conversation is being restarted from a specific node by user request. It is mentioned the name of the node it is restarting from.
Capture Information
[](#capture-information)
* Capturing Variable: The bot is currently trying to extract information from the user message with a [Capture card](../docs/capture-information) to optionally save it in a [variable](../docs/variables).
* Captured variable: The bot has successfully extracted information from the user message and saved it in a variable.
* Capture variable failed: The bot wasn't able to extract information and has reached the limit of [retries](../docs/capture-information#retries).
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Shortcuts](#shortcuts)  
         * [Accessing the Emulator](#accessing-the-emulator)  
         * [Resend the Same Messages](#resend-the-same-messages)  
   * [Options](#options)  
         * [New Conversation](#new-conversation)  
         * [Start as a new user](#start-as-a-new-user)  
         * [Simulate timeout event](#simulate-timeout-event)  
   * [In-line Logs](#in-line-logs)  
         * [Bot-events](#bot-events)  
         * [Card-processing results](#card-processing-results)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Conversations
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Conversations
View and manage all interactions between users and your bot.
[ Suggest Edits](/edit/conversations)
The Conversations tab is a key feature in Botpress Cloud for tracking your bot's behavior and user interaction. Once you publish and share your chatbot you can use the Conversations tab to test its ensure that it is working as intended.
One of the benefits of using the Conversations tab is that you can see how your bot is performing in real-time. This means that you can see how users are interacting with your bot - the messages they send and the replies they get. This can help you identify any issues with your bot and fix them before they become a problem for other users. It's also very useful for looking for possible improvements to the user experience and constantly refining your bot's performance and functionality.
Features
[](#features)
Listing conversations
[](#listing-conversations)
This menu lists each conversation your bot has had, sorted by the conversation's most recent message. It provides the conversation ID, a unique identifier for each conversation, as well as an AI-generated summary of the conversation.
You can click the conversation ID to navigate to the specific conversation and view it in greater detail.
When viewing a conversation, you can click on any message to inspect its properties, like the time at which it was sent, a unique message ID, and the JSON for that specific message.
Filtering conversations
[](#filtering-conversations)
You can filter the conversations presented in this tab in a number of ways.
Conversation
[](#conversation)
Search for a conversation by entering a specific conversation ID.
Message
[](#message)
Search for a conversation by entering a specific message ID.
Participant
[](#participant)
Search for a conversation by entering a specific user ID.
Integration
[](#integration)
List all conversations taking place on a specific integration.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Features](#features)  
         * [Listing conversations](#listing-conversations)  
         * [Filtering conversations](#filtering-conversations)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Execute
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Execute
Executes a custom piece of code or tabular operation.
[ Suggest Edits](/edit/execute)
Execute Cards allow you to run custom JavaScript code within your bot’s workflow, providing a powerful way to extend the functionality of your bot beyond the built-in actions and logic. These Cards enable you to perform complex calculations, manipulate data, call external APIs, or execute any other custom logic directly within the bot flow.
> ## 🪄
>
> Generate code with AI
>
> The Execute Code card allows you to generate code using AI, so you don't have to write it all from scratch. At the top of the code editor, place the prompt for which you'd like to generate code, like fetching data from an API or manipulating a certain user input, and AI will generate code for you.
>
> You're then free to edit this code further, or ask AI to make revisions to it.
Execute Cards Overview
[](#execute-cards-overview)
Run Custom Logic
[](#run-custom-logic)
Execute Code Cards allow you to write JavaScript code to handle tasks that are not covered by standard Cards. This includes processing user input, transforming data, or implementing unique business logic.
Dynamic Interactions
[](#dynamic-interactions)
Use Execute Code Cards to make your bot’s behavior dynamic. For example, you can use them to adjust responses based on user data, perform calculations, or interact with external services in real-time.
API Integrations
[](#api-integrations)
These Cards can be used to call external APIs, handle responses, and process the data within your bot. This capability allows seamless integration with third-party services directly through JavaScript.
Access to Bot State
[](#access-to-bot-state)
You can interact with the bot’s state, modify variables, and store information that can be used later in the conversation flow. This allows your bot to maintain context and provide more personalized interactions.
Error Handling
[](#error-handling)
Implement custom error handling within your code to manage exceptions, ensure robust operations, and gracefully handle unexpected situations during execution.
Table Cards
[](#table-cards)
Execute cards also allow you to perform operations on the data you have stored in a Table.
> ## 📘
>
> Info
>
> Table cards do not directly display their result. You'll need to first save the data in variables to be able to use them in the conversation.
Get Record
[](#get-record)
To retrieve a specific record from a table, use the **Get Record** card. For example, you might use the Get Record operation to retrieve a user's profile information based on their unique user ID. Here's how to do it:
1. Add the `Get Record` card to the desired node
2. Select the table you want to get the record from.
3. Select the record ID you want to retrieve. You can either select a default ID or use variables. For example, if you want to get a user's profile information, you can specify their user ID as the unique identifier here.
4. Choose the result variable that will store the record data. (This variable needs to have the Object type since table records are objects.)
5. Now you use the variable in subsequent cards to access the record data.
Insert Record
[](#insert-record)
To create a new record in a table, use the **Insert Record** card. This operation can be particularly useful when you need to store new information, such as a new user's details or a newly completed transaction. Here's how to do it:
1. Add the `Insert Record` card to the desired node
2. Select the table where you want to insert the record.
3. Define a value for each field. You can either define a value manually or use variables.
4. You're done, once the conversation goes through this card, the record will be created in the table.
Update Record
[](#update-record)
To update a record in a table, use the **Update Record** card. For example, you might use this operation to update a user's profile information or to update the status of a transaction. Here's how to do it:
1. Add the `Update Record` card to the desired node
2. Select the table where you want to update the record in.
3. Select the record ID you want to update. You can either select a default ID or use variables. For example, if you want to update a user's profile information, you can specify their user ID as the unique identifier.
4. Click on "Add properties to update" and select the columns you want to change. For each column, you can define a value manually or use variables.
5. You're done, once the conversation goes through this card, the record will be updated in the table.
Delete Record
[](#delete-record)
The Delete Record operation enables you to remove a specific record from a table based on a unique identifier. For instance, you might use this operation to delete a user's data if they choose to deactivate their account. Here's how to do it:
1. Add the `Delete Record` card to the desired node
2. Select the table where you want to delete the record from.
3. Select the ID of the record you want to delete. You can either select a default ID or use variables.
4. You're done, once the conversation goes through this card, the record will be deleted from the table.
> ## 🚧
>
> Reminder
>
> Be careful when using this card. Ensure you are deleting the correct record and that you no longer need it. Deleted records cannot be recovered!
Find Records
[](#find-records)
The Find Records operation allows you to search for and fetch multiple records that match certain criteria. This operation is beneficial when you need to handle multiple related records at once, such as fetching all transactions made by a specific user. Here's how to do it:
1. Add the `Find Records` card to the desired node
2. Select the table where you want to find records.
3. Define your filter criteria in natural language. You can also use variables to make this query dynamic like: `Price is below ${workflow.maxPrice}`.
4. Choose the result variable that will store the records data. (This variable needs to have the Array type because multiple table records are stored in arrays)
5. Now you can use the variable in subsequent cards to access the records data.
> ## 👍
>
> Tip
>
> Tables provide a robust way to manage data within your chatbot, offering flexibility to handle a wide variety of scenarios that involve data persistence, retrieval, and manipulation.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Execute Cards Overview](#execute-cards-overview)  
         * [Run Custom Logic](#run-custom-logic)  
         * [Dynamic Interactions](#dynamic-interactions)  
         * [API Integrations](#api-integrations)  
         * [Access to Bot State](#access-to-bot-state)  
         * [Error Handling](#error-handling)  
   * [Table Cards](#table-cards)  
         * [Get Record](#get-record)  
         * [Insert Record](#insert-record)  
         * [Update Record](#update-record)  
         * [Delete Record](#delete-record)  
         * [Find Records](#find-records)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Embedded Webchat
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Embedded Webchat
[ Suggest Edits](/edit/embedded-webchat)
The Embedded Webchat allows you to integrate chatbot functionality directly into your web application. It supports message handling, event subscriptions, and customization, enabling a dynamic user experience within the browser.
Quickstart
[](#quickstart)
1\. Obtain the embedded code
[](#1-obtain-the-embedded-code)
1. Open your bot in the Botpress Workspace.
2. Go to the **Webchat** tab in your bot's dashboard.
3. Click **Advanced Settings** to expand the section.
4. Copy the provided **Embed Code**.
![The image shows the "Webchat" tab of the Botpress interface, highlighting the "General" and "Share" sections. It includes a shareable link for testing the bot and an embed code for adding the webchat to a webpage. The left-hand menu lists "General," "Share," "Advanced Settings," and "Styles."](https://files.readme.io/a1f223e-Screenshot_2024-08-16_at_3.08.38_PM.png)
2\. Add the code
[](#2-add-the-code)
Paste the copied code to your HTML.
index.html
`<!DOCTYPE html>
<html>
<head>
<title>My Webchat</title>
</head>
<body>
//...
<script src="https://cdn.botpress.cloud/webchat/v2/inject.js"></script>
<script src="https://mediafiles.botpress.cloud/52345432-5432543-5435-435545434/webchat/v2/config.js"></script>
</body>
</html>
`
---
Styling
[](#styling)
1. Open your bot in the Botpress Workspace.
2. Go to the Webchat Tab in your bot's dashboard.
3. Click **Styles** to expand the section.
4. Add your custom CSS. You can style the components using our pre-defined [CSS classes](https://botpress.com/docs/custom-css-reference)
![The image shows the "Styles" section of the Botpress web interface. Users can add custom CSS to style the webchat, with examples displayed for changing the title color to red and adding a green border to buttons. The left-hand menu includes "General," "Share," "Advanced Settings," and "Styles."](https://files.readme.io/673eb94-style.png)
---
Webchat controls
[](#webchat-controls)
When you embed Botpress Webchat into your website, a `botpress` object becomes available on the global window object. This object provides various methods and properties that allow you to interact with the webchat, customize its behavior, and manage the user experience.
Properties
[](#properties)
| Property      | Description                                                               |
| ------------- | ------------------------------------------------------------------------- |
| initialized   | Indicates whether the webchat has been initialized.                       |
| version       | The version of the Botpress Webchat.                                      |
| messagingUrl  | The URL used for messaging interactions with the bot.                     |
| clientId      | The unique client identifier for the webchat instance.                    |
| fabIframe     | The iframe element used for the floating action button (FAB).             |
| fabId         | The ID of the FAB element.                                                |
| state         | The current state of the webchat (e.g., "opened", "closed").              |
| webchatIframe | The iframe element used for the webchat interface.                        |
| webchatId     | The ID of the webchat element.                                            |
| style         | The URL of the stylesheet used by the webchat.                            |
| configuration | The configuration settings for the bot, such as bot name and description. |
| user          | Information about the current user interacting with the webchat.          |
Methods
[](#methods)
| Method      | Description                                                                                                                      |
| ----------- | -------------------------------------------------------------------------------------------------------------------------------- |
| open        | Opens the webchat interface.                                                                                                     |
| close       | Closes the webchat interface.                                                                                                    |
| toggle      | Toggles the webchat interface between opened and closed states.                                                                  |
| init        | Initializes the webchat with the specified properties.                                                                           |
| config      | Updates the webchat configuration.                                                                                               |
| sendEvent   | Sends a custom event to the bot.                                                                                                 |
| sendMessage | Sends a message to the bot.                                                                                                      |
| getUser     | Retrieves the current user's information.                                                                                        |
| updateUser  | Updates the current user's information.                                                                                          |
| on          | Listens for specific events emitted by the webchat (e.g., message received). Full list of events can be found in the demo below. |
Listen to events
[](#listen-to-events)
The `on` method on the `botpress` object is used to register event listeners for various webchat events, allowing you to execute custom JavaScript code in response to those events. It takes two arguments: the event name (as a string) and a callback function that gets executed when the specified event occurs.
[iframe](https://stackblitz.com/github/botpress/documentation-examples/tree/master/examples/webchat-embed-event?embed=1&hideNavigation=1&view=both&file=index.html "stackblitz.com")
---
Live Demo
[](#live-demo)
[iframe](https://stackblitz.com/github/botpress/documentation-examples/tree/master/examples/webchat-embed-controls?embed=1&hideNavigation=1&view=both&file=index.html&ajs%5Faid=%24device%3A190bbf803c1598-009fa1707e1dbe8-42272e3d-384000-190bbf803c1598 "stackblitz.com")
Markdown support
[](#markdown-support)
We use the react-markdown to display markdown in the front-end. You can find their documentation [here](https://github.com/remarkjs/react-markdown).
Updated 18 days ago
---
* [Table of Contents](#)
* * [Quickstart](#quickstart)  
         * [1\. Obtain the embedded code](#1-obtain-the-embedded-code)  
         * [2\. Add the code](#2-add-the-code)  
   * [Styling](#styling)  
   * [Webchat controls](#webchat-controls)  
         * [Listen to events](#listen-to-events)  
   * [Live Demo](#live-demo)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Compiled Bot Analytics
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Compiled Bot Analytics
[ Suggest Edits](/edit/exporting-compiled-bot-analytics-with-the-botpress-api)
The Botpress Cloud dashboard provides you with an Analytics page with counters for the total number of users, new users, returning users, sessions and messages. It also shows a chart with the data and allows you to filter by date range.
While this interface is great for understanding reach and engagement in a glance, you may need the data in a third-party service. Luckily, you can use the Botpress API to export the analytics data to your own database or system. Let's see how to do it.
Making a request to the API
[](#making-a-request-to-the-api)
Send a `GET` request to `https://api.botpress.cloud/v1/admin/bots/<your-bot-id>/analytics` adding the following header: `Authorization: Bearer <your-personal-access-token>`.
> ## 📘
>
> Note
>
> You can find your personal access token in your [Botpress Dashboard](https://app.botpress.cloud/). Click your avatar and select "Personal Access Tokens". Generate a new one and copy it.
This is how the request would look like using Axios in a Javascript application:
JavaScript
`` const requestConfig = {
headers: {
Authorization: `Bearer ${process.env.BOTPRESS_PERSONAL_ACCESS_TOKEN}`,
},
}
const getAnalytics = await axios.get(`https://api.botpress.cloud/v1/admin/${botId}/analytics`, requestConfig)
``
If you were to print the analytics (available at `getAnalytics.data.records`), the result would look like this:
JSON
`[
{
"startDateTimeUtc": "2023-10-18T00:00:00.000Z",
"endDateTimeUtc": "2023-10-30T20:00:00.000Z",
"returningUsers": 14,
"newUsers": 4,
"sessions": 4,
"messages": 146
},
{
"startDateTimeUtc": "2023-09-01T03:00:00.000Z",
"endDateTimeUtc": "2023-09-31T19:00:00.000Z",
"returningUsers": 38,
"newUsers": 16,
"sessions": 25,
"messages": 1943
}
]
`
> ## 📘
>
> Note
>
> It's a list of records containing the start and end date of the period, the number of returning users, new users, sessions and messages. With this information you can create your own charts and dashboards in your internal systems or favorite BI tool.
If you need advanced analytics about user behavior and the paths they take when interacting with the bot, you can use the [Hooks method](../docs/hooks) to export the data in real-time to a third-party service like Mixpanel, Hotjar, Segment or Amplitude.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Making a request to the API](#making-a-request-to-the-api)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Exporting Data
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Exporting Data
Export data from your chatbot using the Botpress API by requesting the relevant endpoint.
[ Suggest Edits](/edit/exporting-data)
Botpress Cloud allows you to create, manage, and deploy chatbots with little to no coding or infrastructure. In the natural course of maintaining a bot you may want to access its data outside of Botpress for various purposes, such as reporting, analysis, backup, or integration.
This section covers some of the most important use cases for extracting bot data to third-parties software.
| **Action**              | **Methods**                                                                                                            | **Use Cases**                                                                                       |
| ----------------------- | ---------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |
| Exporting conversations | [Using the Botpress API](./exporting-conversations/with-the-api) [Using Hooks](./exporting-conversations/from-the-bot) | Data AnalysisCompliance and AuditingBackup and Historical RecordDebugging                           |
| Exporting analytics     | [Using Hooks](./exporting-analytics/from-the-bot)[Using the Botpress API](./exporting-analytics/with-the-api)          | Performance Monitoring and EvaluationUser Tracking and Behavior AnalysisProduct ManagementDebugging |
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Building
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Building
Documentation and resources for building your own integration with Botpress.
[ Suggest Edits](/edit/building-integrations)
This section provides a resources for building your own integration with Botpress and a third-party service.
Before building your own integration, make sure to check our available integrations in the Botpress Hub to see if the integration already exists.
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Configuration variables
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Configuration variables
Store essential information like API keys and database credentials.
[ Suggest Edits](/edit/configuration-variables-1)
Configuration Variables are containers that store essential information such as API keys and database credentials, and allow chatbot developers to easily access and modify them as needed. They provide a central location for configuration settings, which helps developers ensure that the chatbot functions correctly and stays up-to-date. Configuration variables also provide a level of security by keeping sensitive information separate from the codebase, reducing the risk of data exposure.
> ## 📘
>
> Development vs. production
>
> Configuration values set in the Botpress Studio are strictly for testing your bot in the emulator. They do not apply to any production deployments of your bot.
>
> To set configuration variables for a production bot in deployment, use the configuration variables tab in the dashboard.
Using Configuration Variables
[](#using-configuration-variables)
In the Studio, navigate to the Variables menu in Chatbot settings. Here, you can add configuration variables.
You can create a new key and add the value you'd like to use in yoru development environment. This value should only be used for testing purposes in the emulator.
Save and publish your chatbot to enable these changes.
Development
[](#development)
Usage
[](#usage)
You can use **`{{env.key}}`** to retrieve the value of a Configuration Variable Key that you created.
You can use **`env.key`** to access its value in an Execute Code card, when writing custom code.
Production
[](#production)
Usage
[](#usage-1)
In the Configuration Variables tab of your bot's dashboard, you can set key values.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Using Configuration Variables](#using-configuration-variables)  
         * [Development](#development)  
         * [Production](#production)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Controlling Web Chat using JavaScript
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Controlling Web Chat using JavaScript
[ Suggest Edits](/edit/controlling-web-chat-using-javascript)
Controlling the Webchat Widget
[](#controlling-the-webchat-widget)
This library is a toolkit that provides various tools (or functions) to interact with the Botpress Webchat.
JavaScript
`window.botpressWebChat = {
init,
mergeConfig,
onEvent,
sendPayload,
sendEvent,
}
`
---
Initializing the Widget
[](#initializing-the-widget)
This function initializes the webchat and connects it to your bot. You must do this before anything else.
JavaScript
`window.botpressWebChat.init({
botId: '<botID>',
hostUrl: 'https://cdn.botpress.cloud/webchat/v1',
messagingUrl: 'https://messaging.botpress.cloud',
clientId: '<clientID>',
})
`
You can find information on the configuration parameters [here](#configurable-script-parameters).
---
Changing the Widget's Configuration
[](#changing-the-widgets-configuration)
After initializing the widget, if you want to update it, send a configuration object for the changes you want. You don't need to re-include everything else.
JavaScript
`window.botpressWebChat.mergeConfig({ showTimestamp: false })
`
You can find information on the configuration parameters [here](#configurable-script-parameters).
---
Send user data from your website to Botpress
[](#send-user-data-from-your-website-to-botpress)
You can send data from your website to the webchat using the `init` function. Important : the `mergeConfig` doesn't allow you to pass user data.
To send information, submit a flat (without nested objects) object to the `userData` property.
JavaScript
`window.botpressWebChat.init({
userData: {
name: 'Jack Black',
},
})
`
All the parameters sent to the userData object should be string typed.
You can receive data from the webchat in Botpress by using `Get User Data` Card in the flow. In the User ID field, add `{{event.userId}}`.
---
Trigger Widget Actions
[](#trigger-widget-actions)
This function allows you to send a custom event to the chat. Think of it as sending a signal to the chat for it to do something specific.
JavaScript
`// Show the chat
window.botpressWebChat.sendEvent({ type: 'show' })
// Hide the chat
window.botpressWebChat.sendEvent({ type: 'hide' })
// Toggle the chat
window.botpressWebChat.sendEvent({ type: 'toggle' })
// Toggle the bot info page
window.botpressWebChat.sendEvent({ type: 'toggleBotInfo' })
// Create a new conversation
window.botpressWebChat.sendEvent({ type: 'createConversation' })
// Load a conversation by ID
window.botpressWebChat.sendEvent({ type: 'loadConversation', conversationId: '6ffe8622-49fd-4de9-81e5-412ba2296913' })
`
To load a conversation, you must provide the conversation ID. You can get the conversation ID from the event payload of a `MESSAGE.SENT` event.
---
Sending messages or instructions from your website
[](#sending-messages-or-instructions-from-your-website)
You can use the `sendPayload` function to send a specific message (or instruction) to the chatbot. For sending instructions, please refer to [Triggers](../docs/events-1#webchat-triggers).
JavaScript
`window.botpressWebChat.sendPayload({ type: 'text', text: 'I am a message sent through code' })
`
You can see examples of all of the message types you can send to the chatbot [here](https://github.com/botpress/messaging/blob/master/packages/channels/example/payloads.json).
---
Listening to Widget Events
[](#listening-to-widget-events)
This function lets you listen for certain events happening in the chat and then do something when they happen. It's like setting up a watch for specific actions.
You can find the list of events [here](../docs/events-1#webchat-lifecycle-and-events).
JavaScript
`window.botpressWebChat.onEvent(
(event) => {
if (event.type === 'MESSAGE.RECEIVED') {
console.log('A new message was received!')
}
},
['MESSAGE.RECEIVED']
)
`
Next Steps
[](#next-steps)
* [Styling your Webchat](https://styler.botpress.app)
* [Embedding your Webchat on React App](../docs/react-app)
* [Embedding your Webchat on Webflow Site](../docs/webflow)
Updated 4 months ago
---
* [Table of Contents](#)
* * [Controlling the Webchat Widget](#controlling-the-webchat-widget)  
   * [Initializing the Widget](#initializing-the-widget)  
   * [Changing the Widget's Configuration](#changing-the-widgets-configuration)  
   * [Send user data from your website to Botpress](#send-user-data-from-your-website-to-botpress)  
   * [Trigger Widget Actions](#trigger-widget-actions)  
   * [Sending messages or instructions from your website](#sending-messages-or-instructions-from-your-website)  
   * [Listening to Widget Events](#listening-to-widget-events)  
   * [Next Steps](#next-steps)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Capture Information
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Capture Information
Cards that stop the bot's workflow and waits for a user's response to capture specific pieces of information.
[ Suggest Edits](/edit/capture-information)
**Capture Information** cards instruct the bot to stop processing and wait for the user's response while capturing a specific piece of information from the user's input.
This could include details like the user's name, full address, or raw input.
To collect multiple pieces of information, multiple prompt fields can be added to a single prompt node. Once the information is collected, a flow variable should be created to store the extracted information for later use in the conversation or to be passed on to other systems. This allows for a more personalized and efficient experience for the user, as well as providing valuable data for the chatbot's developers.
Prompt Field Types
[](#prompt-field-types)
A Prompt Field is a type of input field that is used to capture information from a user in a structured and organized manner. It can include various types of input fields such as Single Choice, Multiple Choice, Number, Email Address, Phone Number, and more.
The Prompt Field also includes validation messages and code validation, which helps ensure that the user inputs the correct type of information. This means that if the user inputs an invalid value, they will be notified with an error message and prompted to re-enter the correct information.
| **Prompt Fields**                                                             | **Description & Extracted Information**                                                                                                       |
| ----------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| [SingleChoice](../docs/capture-information#single-choice)                     | Extracts a Single Choice from a finite list of possible ValuesVariable Type: String                                                           |
| [MultipleChoice](../docs/capture-information#multi-choice)                    | Extracts one or multiple choices from a finite list of possible ValuesVariable Type: String                                                   |
| [Boolean](../docs/capture-information#boolean)                                | Extract a Boolean (On/Off) from the QueryVariable Type: Boolean                                                                               |
| [Confirmation](../docs/capture-information#confirmation)                      | Confirm a Yes/No question with a Boolean from the QueryVariable Type: Boolean                                                                 |
| [Number](../docs/capture-information#number)                                  | Extracts a Number from the QueryVariable Type: Number                                                                                         |
| [EmailAddress](../docs/capture-information#email-address)                     | Extracts a full Email Address from the QueryVariable Type: String                                                                             |
| [PhoneNumber](../docs/capture-information#phone-number)                       | Extracts a Telephone Number and optionally the Country Code from the QueryVariable Type: String                                               |
| [FullAddress](../docs/capture-information#fulladdress)                        | Extract the Full Address from the QueryVariable Type: Object                                                                                  |
| [Price](https://botpress.com/docs/cloud/toolbox/capture-information/#price)   | Extracts a Price from the QueryVariable Type: Number                                                                                          |
| [RawInput](../docs/capture-information#raw-input)                             | Extract the Input provided by the User, without any processingVariable Type: String                                                           |
| [Percentage](../docs/capture-information#percentage)                          | Extracts a Percentage from the QueryVariable Type: Number                                                                                     |
| [Quantity](../docs/capture-information#quantity)                              | Extract a Quantity from a QueryVariable Type: Number                                                                                          |
| [Color](../docs/capture-information#color)                                    | Extracts a Color as both HEX and RGB codes from the QueryVariable Type: Object                                                                |
| [TimeMeasurement](../docs/capture-information#time-measurement)               | Extracts a time measurement as (ns, mu, ms, s, min, h, d, week, month, year) UnitsVariable Type: Number                                       |
| [WeightMeasurement](../docs/capture-information#weight-measurement)           | Extracts a Weight Measurement as (mcg, mg, g, kg, oz, lb, mt, t) UnitsVariable Type: Number                                                   |
| [CronSchedule](../docs/capture-information#cron-schedule)                     | Extracts a one-time or recurring schedule as a CRON Expression from the QueryVariable Type: Object                                            |
| [OperatingSystem](../docs/capture-information#operating-system)               | Extracts the name of an Operating System (Windows, OSX, IOS, Android, Linux)Variable Type: Object                                             |
| [QuantityofPeople](../docs/capture-information#quantity-of-people)            | Extracts the Number of People in a QueryVariable Type: Number                                                                                 |
| [VolumeMeasurement](../docs/capture-information#volume-measurement)           | Extracts a volume measurement as (mm3, cm3, ml, l, kl, m3, km3, tsp, Tbs, in3, fl-oz, cup, pnt, qt, gal, ft3, yd3) UnitsVariable Type: Number |
| [TemperatureMeasurement](../docs/capture-information#temperature-measurement) | Extracts a Temperature Measurement as (C, K, F) UnitsVariable Type: Number                                                                    |
| [Person](../docs/capture-information#person)                                  | Extracts the name of a person(first and last names)Variable Type: Object                                                                      |
| [DateTime](../docs/capture-information#datetime)                              | Extracts date and time relative to the current dateVariable Type: Date                                                                        |
Single Choice
[](#single-choice)
The **Single Choice** is a type of input field that presents the user with a list of options to choose from. The user can only select **one** option from the list, and their choice is then stored as a value in a variable. This variable can be used later in your workflow for further processing.
> ## 👍
>
> Tip
>
> If the user enters text instead of clicking a button, the AI will search their text for any of the button options, and, if there is an option the user's text will be treated as if they clicked the button.
An example of Single Choice would be a survey question with multiple options, where the user selects one answer from the list.
**Steps to use Single Choice Field**
1. Create a new capture information card.
2. Set the Type property to **Single Choice**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the selected option.
4. Set the **Prompt message** property to a message that lists the available options for the user to choose from.
5. Click on the **Advanced Configuration** to add Choices.
Once the card is used, it will present the available options to the user and allow them to select only one. The selected option will be saved in the workflow variable you specified, and you can use it in other parts of your workflow to make decisions or take actions based on the user's choice.
**Example**
Let's say you want to ask the user about their preferred mode of transportation, and you have three options: car, bus, and bike. You can create a new capture information card with the following properties:
`Type: Single Choice
Variable name: preferredTransportation
Prompt message: What is your preferred mode of transportation? Choose one from the following: car, bus, bike.
`
When the user selects their preferred mode of transportation, the Single Choice card will save the value in the **preferredTransportation** workflow variable. You can then use this variable to tailor the conversation based on the user's choice.
For example, if they choose bike, you can ask follow-up questions related to biking or suggest some scenic bike routes.
You can also use the value of the **preferredTransportation** variable in transitions. For example, if the user selects car, you can move them to a node related to car-related services or if they choose bus, you can move them to a node related to public transportation schedules.
Multi Choice
[](#multi-choice)
The **Multi Choice** type is a way to gather information from users by presenting them with a list of options to choose from. Users can select one or more options from the list.
This type of capture information is useful in scenarios where you want to give users a set of choices to pick from, like selecting the toppings for a pizza or the colors for a shirt. It's a quick and easy way to collect information from users without having to ask them to type out their answers.
**Steps to use Multi Choice Field**
1. Create a new capture information card.
2. Set the Type property to **Multi Choice**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted values.
4. Set the **Prompt message** property to a message that provides a list of choices for the user to select from.
5. Click on the **Advanced Configuration** to add Choices.
Once the card is used, it will extract the selected options from the user's input and save them in the workflow variable you specified. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response.
**Example**
Let's say you want to ask the user what toppings they want on their pizza. You can create a new capture information card with the following properties:
`Type: Multi Choice
Variable name: pizzaToppings
Prompt message: What toppings would you like on your pizza? Please select all that apply: pepperoni, mushrooms, onions, olives, sausage.
`
When the user enters their response, the Multi Choice card will extract the selected options and save them in the **pizzaToppings** workflow variable. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response.
For example, if the user selects **pepperoni** and **mushrooms,** you can use the **pizzaToppings** variable to customise their order and display a message like **Your pizza with pepperoni and mushrooms is on the way!**
Boolean
[](#boolean)
**Boolean** type extracts a binary value from the user's input and saves it in a variable of type boolean. The extracted information can include values like true and false, agree and disagree, accept and decline, or any other binary values.
**Steps to use Boolean Field**
1. Create a new capture information card.
2. Set the Type property to **Boolean**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted boolean value.
4. Set the **Prompt message** property to a message that prompts the user to enter a binary value.
5. Optionally, you can edit the Choices property if you want to customize the binary values that the user can select. By default, the choices are **Yes** and **No**. When the user provides an input, the system will extract either a **true** or **false** value based on whether the user selects **Yes** or **No**.
**Example**
Let's say you want to ask the user if they agree to the terms and conditions of service. You can create a new capture information card with the following properties:
`Type: Boolean
Variable name: agreeToTerms
Prompt message: Do you agree to the terms and conditions of our service? Please enter 'yes' or 'no'.
`
When the user enters their response, the Boolean card will extract the binary value and save it in the **agreeToTerms** workflow variable as either true or false. You can then use this variable in other parts of your workflow to decide whether to proceed with the service or not.
If the user agrees to the terms and conditions, you can submit their request or move them to the next node, but if they disagree, you can say something like 'Sorry to hear that' and end the conversation. This will display a message based on the user's response and whether they agreed to the terms and conditions or not.
Confirmation
[](#confirmation)
The **Confirmation** type is a way to ask the user to confirm or agree to something. For example, you might use this type to confirm a user's purchase, agreement to terms and conditions, or confirmation of an appointment. When the user responds, the Confirmation type extracts a binary value (either true or false) and saves it in a variable. This allows you to use the user's confirmation or agreement later in your bot's logic.
**Steps to use Confirmation Field**
1. Create a new capture information card.
2. Set the Type property to **Confirmation**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted boolean value.
4. Set the **Prompt message** property to a message that prompts the user to confirm or agree to something.
5. Optionally, you can edit the Choices property if you want to customize the binary values that the user can select. By default, the choices are **Accept** and **Decline**. When the user provides an input, the system will extract either a **true** or **false** value based on whether the user selects **Accept** or **Decline**.
Once the card is used, it will automatically extract the confirmation from the user's input and save it in the workflow variable you specified as a boolean value (true or false). You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's confirmation.
**Example**
Let's say you want to ask the user if they want to proceed with a purchase. You can create a new capture information card with the following properties:
`Type: Confirmation
Variable name: proceedWithPurchase
Prompt message: Are you sure you want to proceed with the purchase? Please enter 'Accept' or 'Decline'.
`
When the user enters their response, the Confirmation card will extract the confirmation and save it in the **proceedWithPurchase** workflow variable as either true or false. You can then use this variable in other parts of your workflow to decide whether to proceed with the purchase or not.
If the user confirms they want to proceed with the purchase, you can move them to the payment process node, but if they decline, you can say something like 'No problem, maybe next time!' and end the conversation. This will display a message based on the user's response and whether they confirmed to proceed with the purchase or not.
Number
[](#number)
The**Number** type extracts a numerical value from the user's input and saves it in a variable of type number.
The user can enter any numerical value, like a whole number or a decimal, and the bot will recognize and store it as a number. This can be used for calculations or any other purpose where a numerical value is needed.
**Steps to use Number Field**
1. Create a new capture information card.
2. Set the Type property to **Number**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted numerical value.
4. Set the **Prompt message** property to a message that prompts the user to enter a numerical value.
Once the card is used, it will automatically extract the numerical value from the user's input and save it in the workflow variable you specified as a numerical value (integer or decimal). You can then use this variable in other parts of your workflow to perform calculations or take actions based on the user's response.
**Example**
Imagine you are creating an online store that sells products to customers. You want to ask the user to enter the quantity of a certain product they want to purchase. To do this, you can create a form with a field that uses the Number type to capture the user's input.
For example, you can create a field with the following details:
`Type: Number
Variable name: productQuantity
Prompt message: How many units of this product would you like to purchase?
`
When the user enters their response, the Number field will extract the numerical value and save it in the productQuantity variable as either an integer or decimal value. You can then use this variable in other parts of your workflow to calculate the total cost of the purchase.
For instance, if the product costs $10 per unit and the user entered **3** as the product quantity, you can calculate the total cost in an [Execute Code Card](../execute-code/) as follows:
`workflow.totalCost = workflow.productQuantity * $10
`
This will enable you to calculate the total cost of the purchase based on the user's input and display it to the user before they confirm their order.
Email Address
[](#email-address)
The **EmailAddress** type is used to extract an email address value from the user's input and save it in a variable of type string. This allows you to use the extracted email address in other parts of your bot's logic, such as sending an email confirmation or storing the email address for future use. The email address can be in any valid email address format, including with special characters such as dots, hyphens, and underscores.
**Steps to use Email Address Field**
1. Create a new capture information card.
2. Set the Type property to **EmailAddress**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted email address value.
4. Set the **Prompt message** property to a message that prompts the user to enter an email address.
Once the card is used, it will automatically extract the email address value from the user's input and save it in the workflow variable you specified as a string value. You can then use this variable in other parts of your workflow to send emails or perform other actions based on the user's response.
**Example**
Let's say you want to ask the user for their email address so that you can send them a newsletter. You can create a new capture information card with the following properties:
`Type: EmailAddress
Variable name: userEmail
Prompt message: Please enter your email address to subscribe to our newsletter.
`
When the user enters their email address, the EmailAddress card will extract the value and save it in the **userEmail** workflow variable as a string. You can then use this variable in other parts of your workflow to add the user to your newsletter subscription list or perform other actions based on the user's response.
Phone Number
[](#phone-number)
In this section, we'll discuss the **PhoneNumber** capture information type in Botpress. This type of capture information extracts only the phone number representing the user's input, excluding the country code, and saves it in a variable of type string.
**Steps to use Phone Number Field**
1. Create a new capture information card.
2. Set the Type property to **PhoneNumber**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted phone number value.
4. Set the **Prompt message** property to a message that prompts the user to enter a phone number.
Once the card is used, it will automatically extract the phone number from the user's input and save it in the workflow variable you specified as a string value. The extracted information will not include the country code, only the digits representing the phone number. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's phone number.
**Example**
Let's say you want to ask the user for their phone number to schedule a call with them. You can create a new capture information card with the following properties:
`Type: PhoneNumber
Variable name: userPhoneNumber
Prompt message: Please enter your phone number so we can schedule a call with you.
`
When the user enters their response, the PhoneNumber card will extract the digits representing the phone number and save it in the userPhoneNumber workflow variable as a string. You can then use this variable in other parts of your workflow to schedule a call with the user.
FullAddress
[](#fulladdress)
**FullAddress** extracts the full address information from the user's input and saves it in a variable of type object. The extracted information contains the country, city, street, zip code, and house number.
**Steps to use Full Address Field**
1. Create a new capture information card.
2. Set the Type property to **FullAddress**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted address information.
4. Optionally, set the **Prompt message** property to a message that prompts the user to enter their address.
5. Save the card.
Once the card is saved, it will automatically extract the full address information from the user's input and save it in the workflow variable you specified. You can then use this variable in other parts of your workflow by referencing the specific fields in the address object using the following syntax: **`{{workflow.variableName.country}}`**, **`{{workflow.variableName.city}}`**, **`{{workflow.variableName.street}}`**, **`{{workflow.variableName.zip}}`**, and **`{{workflow.variableName.number}}`**.
**Example**
Let's say you want to capture the user's full address to use in a shipping process. You can create a new capture information card with the following properties:
`Type: FullAddress
Variable name: shippingAddress
Prompt message: **Please enter your full shipping address:**
`
When the user enters their address, the FullAddress card will extract the information and save it in the **shippingAddress** workflow variable. You can then use this variable in other parts of your workflow to complete the shipping process, such as sending an email confirmation to the user with their shipping details.
Here's an example of how you can use the extracted information in a message:
`Thank you for your order! Your shipping address is: {{workflow.shippingAddress.number}}
{{workflow.shippingAddress.street}}, {{workflow.shippingAddress.city}}, {{workflow.shippingAddress.country}},
{{workflow.shippingAddress.zip}}
`
This will display the user's full address in a clear and easy-to-read format for both the user and the bot.
Price
[](#price)
**Price** extracts the price information from the user's input and saves it in a variable of type number. The extracted information contains the amount of money, regardless of the currency.
**Steps to use Price Field**
1. Create a new capture information card.
2. Set the Type property to **Price**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted price information.
4. Set the **Prompt message** property to a message that prompts the user to enter the price.
5. Optionally, set the **Default value** property to a default price to be used if the user doesn't provide one.
6. Save the card.
Once the card is saved, it will automatically extract the price information from the user's input and save it in the workflow variable you specified. You can then use this variable in other parts of your workflow to perform calculations or other operations that require the price information.
**Example**
Let's say you want to capture the user's price information to process a payment. You can create a new capture information card with the following properties:
`Type: Price
Variable name: paymentAmount
Prompt message: Please enter the payment amount:
Default value: 0.00
`
When the user enters the price, the Price card will extract and save the information in the **paymentAmount** workflow variable. You can then use this variable in other parts of your workflow to process the payment, such as sending the payment information to a payment gateway.
Here's an example of how you can use the extracted information in a message:
Text
`Your payment amount is {{workflow.paymentAmount}}. Thank you for your payment!
`
This will display the user's payment amount in a clear and easy-to-read format for both the user and the bot.
Raw Input
[](#raw-input)
The **RawInput** extracts the user's input as it is and saves it in a variable of type string. The extracted information can include any type of user input, including text, numbers, and special characters.
**Steps to use Raw Input Field**
1. Create a new capture information card.
2. Set the Type property to **Raw Input**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted user input.
4. Set the **Prompt message** property to a message that prompts the user to enter their input.
Once the card is used, it will automatically extract the user's input and save it in the workflow variable you specified as a string value. You can then use this variable in other parts of your workflow to process the user's input or display it back to them.
**Example**
Let's say you want your users to submit an issue for your product. You can create a new capture information card with the following properties:
`Type: Raw Input
Variable name: issueDescription
Prompt message: Please describe the issue you are experiencing.
`
When the user enters the issue description, the Raw Input card will extract the user's input and save it in the **issueDescription** workflow variable as a string value. You can then use this variable in other parts of your workflow to log the issue or escalate it to the relevant team for resolution.
You can create a message node with the following text:
Text
`Thank you for reporting the issue: {{issueDescription}}. Our team will investigate the issue and get back to you with an
update as soon as possible.
`
This will acknowledge the issue and provide the user with an estimated time frame for resolution.
Answer from a Knowledge Base
[](#answer-from-a-knowledge-base)
The Raw Input card can also be used to search for answers in a Knowledge Base (KB) and answer the user's question directly. You can have it search across all available KBs or limit the search to a specific KB.
**Searching All Knowledge Bases**
To enable the search across all available Knowledge Bases when the user asks a question:
1. Create a new capture information card with the Type set to **Raw Input**.
2. Make sure the "Search in all KBs" option is selected.
3. In the **Prompt message** property, enter a message that encourages the user to input their question (e.g., “What would you like to know?”).
4. Store the user's input in a variable by setting the **Variable name** property (e.g., `userQuery`) if you want to use it later.
Once set up, the chatbot will automatically search all configured Knowledge Bases for the user's inputted question and display the answer, provided that the Knowledge Agent's manual answering feature is not enabled.
**Searching a Particular Knowledge Base**
For more targeted information retrieval, you may want to search within a specific KB:
1. Create a new capture information card with the Type set to **Raw Input**.
2. Deselect the "Search in all KBs" option.
3. Provide the name of the KB you wish to search in the "KBs to search in" input field.
4. In the **Prompt message** property, enter a prompt directing the user to ask their question.
5. Set the **Variable name** property to save the user's query (e.g., `userQuerySpecific`) if you want to use it later.
After the user submits their question, the chatbot will automatically conduct a search within the specified Knowledge Base and display the relevant answer. This happens seamlessly without the need for an action card to trigger the search, assuming that manual answering is turned off for the Knowledge Agent.
Percentage
[](#percentage)
The **Percentage** extracts the decimal representing the percentage the user is using from the user's input and saves it in a variable of type number. The extracted information can include values like 50%, 75%, or any other percentage.
**Steps to use Percentage Field**
1. Create a new capture information card.
2. Set the Type property to **Percentage**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted percentage value.
4. Set the **Prompt message** property to a message that prompts the user to enter a percentage.
Once the card is used, it will automatically extract the decimal value representing the percentage from the user's input and save it in the workflow variable you specified as a number value. You can then use this variable in other parts of your workflow to make calculations or take actions based on the user's response.
**Example**
Let's say you want to ask the user what percentage discount they would like to apply to their purchase. You can create a new capture information card with the following properties:
`Type: Percentage
Variable name: discountPercentage
Prompt message: **Please enter the percentage discount you would like to apply to your purchase.**
`
When the user enters their response, the Percentage card will extract the decimal value representing the percentage and save it in the **discountPercentage** workflow variable as a number. You can then use this variable in other parts of your workflow to calculate the discount or take actions based on the user's desired discount.
For example, if the user entered 50%, you could calculate the discount amount as follows:
HTML
`discountAmount = totalPrice * (discountPercentage / 100)
`
This will calculate the discount amount based on the user's desired discount percentage and the total price of the purchase.
Quantity
[](#quantity)
The **Quantity** extracts the quantity information from the user's input and saves it in a variable of type number. For example, if the user inputs "I want to buy 5 apples" or "Give me 5 kilograms of apples", the function will extract the number 5 and store it as a numerical value, without regard to the different units of measurement used. This allows you to work with the quantity of the item, regardless of how the user expressed it.
**Steps to use Quantity Field**
1. Create a new capture information card.
2. Set the Type property to **Quantity**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted quantity information.
4. Set the **Prompt message** property to a message that prompts the user to enter the quantity.
Once the card is saved, it will automatically extract the quantity information from the user's input and save it in the workflow variable you specified. You can then use this variable in other parts of your workflow by referencing it using the following syntax: \* **\*`{{workflow.variableName}}`\*\***.
**Example**
Let's say you want to capture the user's desired quantity of a product. You can create a new capture information card with the following properties:
`Type: Quantity
Variable name: productQuantity
Prompt message: **How many units of the product do you want?**
`
When the user enters a valid quantity, the Quantity card will extract and save the information in the **productQuantity** workflow variable as a number. You can then use this variable in other parts of your workflow to calculate the total price or to check the stock availability.
Here's an example of how you can use the extracted information in a message:
html
`Thank you for your order! Your total price is {{workflow.productQuantity * productPrice}}.
`
This will display the total price to the user based on the quantity they entered and the price of the product.
Color
[](#color)
The **Color** type extracts the color information from the user's input and saves it in a variable of type object. The extracted information contains the colour name, hexadecimal code, and RGB values.
**Steps to use Color Field**
1. Create a new capture information card.
2. Set the Type property to **Color**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted colour information.
4. Set the **Prompt message** property to a message that prompts the user to enter a colour.
Once the card is called will automatically extract the colour information from the user's input and save it in the workflow variable you specified. You can then use this variable in other parts of your workflow by referencing the specific fields in the colour object using the following syntax: **`{{workflow.variableName.colorName}}`**, **`{{workflow.variableName.hexCode}}`**, and **`{{workflow.variableName.rgb}}`**.
**Example**
Let's say you want to capture the user's favourite colour to use in a marketing campaign. You can create a new capture information card with the following properties:
`Type: Color
Variable name: favoriteColor
Prompt message: Please enter your favourite colour:
`
When the user enters their favourite colour, the Color card will extract the information and save it in the **favoriteColor** workflow variable. You can then use this variable in other parts of your workflow to customise your marketing campaigns, such as using the colour in promotional materials or emails.
Here's an example of how you can use the extracted information in a message:
HTML
`Thank you for telling us your favourite colour! We love {{workflow.favoriteColor.colorName}} too. The hexadecimal code
for {{workflow.favoriteColor.colorName}} is {{workflow.favoriteColor.hexCode}} and the RGB values are
{{workflow.favoriteColor.rgb}}.
`
This will display the user's favourite colour and its associated information in a personalised message, making the interaction with the bot more engaging and memorable.
Time Measurement
[](#time-measurement)
The **TimeMeasurement** type extracts date/duration values from the user's input and save it in a variable of type **Number** after converting it to the chosen format. The extracted information can include values like next week, in a month, after two months, in 15 days, in 2 working days, etc. This information can be useful for scheduling appointments, setting reminders, and much more.
**Steps to use Time Measurement Field**
1. Create a new capture information card.
2. Set the Type property to **Time Measurement**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted time measurement value.
4. Set the **Prompt message** property to a message that prompts the user to enter a date/duration value.
Once the card is used, it will automatically extract the date/duration value from the user's input and save it in the workflow variable you specified as a number value. The time measurement value will be converted to the chosen format (nanoseconds, microseconds, milliseconds, seconds, minutes, hours, days, weeks, months, or years). You can then use this variable in other parts of your workflow to schedule appointments or set reminders.
**Available Formats**
The following formats are available for the extracted time measurement value:
ns (nanoseconds)
mu (microseconds)
ms (milliseconds)
s (seconds)
min (minutes)
h (hours)
d (days)
week (weeks)
month (months)
year (years)
You can choose any of these formats based on your requirement.
**Example**
Let's say you want to schedule a meeting with a user based on their availability. You can create a new capture information card with the following properties:
Text
`Type: Time Measurement
Variable name: meetingTime
Prompt message: When are you available for a meeting? Please enter a date or duration (e.g. next week, in 2 days, in 30 minutes).
`
When the user enters their response, the Time Measurement card will extract the time measurement value and save it in the **meetingTime** workflow variable as a number value in the chosen format. You can then use this variable in other parts of your workflow to schedule the meeting accordingly.
If the user is available at the specified time, you can schedule the meeting and confirm the details with the user. If not, you can ask for their availability again.
This will allow you to schedule meetings with users based on their availability and improve their experience with your service.
Weight Measurement
[](#weight-measurement)
The **WeightMeasurement** extracts weight information from the user's input and saves it in a variable of type number after converting it to the chosen format. The available formats are mcg, mg, g, kg, mt, oz, lb, t.
**Steps to use Weight Measurement Field**
1. Create a new capture information card.
2. Set the Type property to **Weight Measurement**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted weight value.
4. Set the **Prompt message** property to a message that prompts the user to enter a weight.
Once the card is used, it will automatically extract the weight information from the user's input and save it in the workflow variable you specified as a number value. The value is converted to the chosen format which is selected during the configuration of the card. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response.
**Available Formats**
The available weight measurement formats are:
| mcg (microgram) | mg (milligram) | g (gram)   | kg (kilogram) |
| --------------- | -------------- | ---------- | ------------- |
| mt (metric ton) | oz (ounce)     | lb (pound) | t (ton)       |
**Example**
Let's say you want to ask the user for their weight in kilograms. You can create a new capture information card with the following properties:
`Type: Weight Measurement
Variable name: userWeight
Prompt message: Please enter your weight in kilograms.
`
When the user enters their response, the Weight Measurement card will extract the weight information and convert it to kilograms, saving it in the **userWeight** workflow variable as a number value. You can then use this variable in other parts of your workflow to decide what to do based on the user's response.
You can ask the user if they want to proceed if their weight is over a certain limit or if it falls under a certain range. You can also display the weight measurement in different formats by using a formatted node.
This will display the user's weight in the desired format and provide relevant information based on their response.
Cron Schedule
[](#cron-schedule)
The **CronSchedule** type takes a specific interval of time that a user inputs and convert it into a format that a computer program can understand. This interval can be things like **every 5 minutes** or **once a day at 3pm.**
The Cron Schedule then saves this interval in two ways: first, in a format that follows the **Cron** convention (which is a standard way of representing time intervals in programming); and second, as a boolean value that indicates whether the interval should be repeated or not (for example, if the interval is "every 5 minutes," the Cron Schedule would set the repeatable property to true, whereas if the interval is "once a day at 3pm," the Cron Schedule would set the repeatable property to false).
This makes it easier for developers to program applications that need to run certain tasks at specific intervals of time.
**Steps to use Cron Schedule Field**
1. Create a new capture information card.
2. Set the Type property to **Cron Schedule**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted cron interval.
4. Set the **Prompt message** property to a message that prompts the user to enter the desired interval value.
Once the card is used, it will automatically extract the interval value from the user's input and save it in the workflow variable you specified as an object containing the cron interval and the **repeatable** boolean value.
**Example**
Let's say you want to ask the user for a cron schedule to trigger a certain event. You can create a new capture information card with the following properties:
`Type: Cron Schedule
Variable name: cronSchedule
Prompt message: Please enter the interval in cron format, e.g. '0 \* \* \* \*' for every hour, and indicate whether this should be repeated or not with 'true' or 'false'.
`
When the user enters their response, the Cron Schedule card will extract the interval value and save it in the **cronSchedule** workflow variable as an object with two properties: the **cron** value, which represents the extracted interval in a cron format, and the **repeatable** boolean value, which indicates whether the interval should be repeated or not.
You can then use this variable in other parts of your workflow to set up the event trigger according to the user's input.
Operating System
[](#operating-system)
The **OperatingSystem** type extracts the operating system the user is using from their input and saves it in a variable of type object. This information can be useful for troubleshooting issues specific to certain operating systems or for tailoring responses based on the user's operating system.
**Steps to use Operating System Field**
1. Create a new capture information card.
2. Set the Type property to **Operating System**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted operating system.
4. Set the **Prompt message** property to a message that prompts the user to enter their operating system.
Once the card is used, it will automatically extract the operating system from the user's input and save it in the workflow variable you specified as an object. The extracted information can include the name and version of the operating system.
**Example**
Let's say you want to ask the user about the operating system they are using to access your website. You can create a new capture information card with the following properties:
`Type: OperatingSystem
Variable name: userOS
Prompt message: **What operating system are you using to access our website?
`
When the user enters their response, the Operating System card will extract the information and save it in the **userOS** workflow variable as an object that includes the name and version of their operating system.
You can then use this variable in other parts of your workflow to tailor responses or troubleshoot issues specific to their operating system.
Quantity of People
[](#quantity-of-people)
The **QuantityofPeople** type extracts a number representing the quantity of people from the user's input and saves it in a variable of type **Number**. The extracted information can include values like 1, 2, 3, and so on.
For example, if you are building a reservation system for a restaurant, you can use the QuantityofPeople type to ask the user how many people will be dining, and then save that number as a variable. This variable can then be used to ensure that the restaurant has enough seats available for the group, or to calculate the total cost of the meal based on the number of people.
**Steps to use Quantity of People Field**
1. Create a new capture information card.
2. Set the Type property to **QuantityofPeople**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted number value.
4. Set the **Prompt message** property to a message that prompts the user to enter a number representing the quantity of people.
Once the card is used, it will automatically extract the number value from the user's input and save it in the workflow variable you specified as a number. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response.
**Example**
Let's say you want to ask the user how many people will be attending an event. You can create a new capture information card with the following properties:
`Type: Quantity Of People
Variable name: numberOfAttendees
Prompt message: How many people will be attending the event?
`
When the user enters their response, the Quantity Of People card will extract the number value and save it in the **numberOfAttendees** workflow variable. You can then use this variable in other parts of your workflow to decide how many seats to reserve or how much food to order.
If the user enters a number greater than the available seats or food quantity, you can respond with something like 'Sorry, we don't have enough seats/food for that many people' and ask the user to enter a smaller number.
This will display a message based on the user's response and the availability of seats or food.
Volume Measurement
[](#volume-measurement)
The **VolumeMeasurement** extracts a volume value from the user's input and saves it in a variable of type number. The extracted value can be converted to one of the several available formats based on the user's choice.
**Steps to use Volume Measurement Field**
1. Create a new capture information card.
2. Set the Type property to **VolumeMeasurement**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted volume value.
4. Set the **Prompt message** property to a message that prompts the user to enter a volume value.
Once the card is used, it will automatically extract the volume value from the user's input and save it in the workflow variable you specified as a number value. You can then use this variable in other parts of your workflow to perform calculations or use the value in responses to the user.
**Available Formats**
The following volume formats are available for conversion:
| Cubic millimeters (mm3) | Cubic centimeters (cm3) | Milliliters (ml)  | Centiliters (cl)   |
| ----------------------- | ----------------------- | ----------------- | ------------------ |
| Deciliters (dl)         | Liters (l)              | Kiloliters (kl)   | Cubic meters (m3)  |
| Cubic kilometers (km3)  | Teaspoons (tsp)         | Tablespoons (Tbs) | Cubic inches (in3) |
| Fluid ounces (fl-oz)    | Cups (cup)              | Pints (pnt)       | Quarts (qt)        |
| Gallons (gal)           | Cubic feet (ft3)        | Cubic yards (yd3) |                    |
**Example**
Let's say you want to ask the user about the volume of a liquid they want to order. You can create a new capture information card with the following properties:
`Type: VolumMeasurement
Variable name: liquidVolume
Prompt message: What is the volume of liquid you want to order? Please enter a number and choose a volume format from the following list: mm3, cm3, ml, cl, dl, l, kl, m3, km3, tsp, Tbs, in3, fl-oz, cup, pnt, qt, gal, ft3, yd3.
`
The **Volume Measurement** type extracts the volume value and save it in the **liquidVolume** workflow variable as a number value. The value will be converted to the format specified by the user. You can then use this variable in other parts of your workflow to perform calculations or use the value in responses to the user.
For example, you could use the **liquidVolume** variable to calculate the price of the liquid based on the volume and price per unit of volume, or you could use it in response to the user like **Thank you for ordering** `{{workflow.liquidVolume}}` **ml of liquid.** Your order will be delivered soon.
Temperature Measurement
[](#temperature-measurement)
The **TemperatureMeasurement** type extracts a temperature value from the user's input and saves it in a variable of type **Number**. The extracted temperature can be in any of the available formats: Celsius, Kelvin, or Fahrenheit.
**Steps to use Temperature Measurement Field**
1. Create a new capture information card.
2. Set the Type property to **Temperature Measurement**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted temperature value.
4. Set the **Prompt message** property to a message that prompts the user to enter a temperature value in any of the available formats.
Once the card is used, it will automatically extract the temperature value from the user's input, convert it to the chosen format, and save it in the workflow variable you specified as a number. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response.
**Available Formats**
There are three temperature formats available in the **TemperatureMeasurement** capture information type. These are: Celsius (°C), Kelvin (K) & Fahrenheit (°F)
You can choose the format you want to use in the prompt message property of the capture information card.
**Example**
Let's say you want to ask the user for their body temperature. You can create a new capture information card with the following properties:
`Type: TemperatureMeasurement
Variable name: bodyTemperature
Prompt message: Please enter your body temperature in Celsius (°C), Kelvin (K), or Fahrenheit (°F)
`
When the user enters their response, the Temperature Measurement card will extract the temperature value, convert it to the specified format, and save it in the **bodyTemperature** workflow variable as a **Number**. You can then use this variable in other parts of your workflow to decide what action to take based on the user's body temperature.
If the user's body temperature is higher than the normal range, you can send them to a doctor's appointment node. If not, you can proceed with the conversation as usual.
This will display a message based on the user's response and the action you decide to take based on their body temperature.
Person
[](#person)
The **Person** type is used to extract the name of a person from the user's input, such as when you ask the user for the name of a contact or a customer. Once the user enters the name, the Person type extracts the first and last names and saves them in a variable of type **Object**.
This extracted information can be used in other parts of your workflow to personalize messages or perform actions specific to that person, such as sending them an email or adding them to a mailing list.
**Steps to use Person Field**
1. Create a new capture information card.
2. Set the Type property to **Person**.
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted name information.
4. Optionally, set the **Prompt message** property to a message that prompts the user to enter their name.
5. Save the card.
Once the card is saved, it will automatically extract the person's name information from the user's input and save it in the workflow variable you specified.
You can then use this variable in other parts of your workflow by referencing the specific fields in the name object using the following syntax:
TypeScript
`{{workflow.variableName.first}} and {{workflow.variableName.last}}
`
**Example**
Let's say you want to capture the user's name to personalise a message. You can create a new capture information card with the following properties:
`Type: Person
Variable name: userName
Prompt message: What's your name?
`
When the user enters their name, the Person card will extract and save the information in the **userName** workflow variable. You can then use this variable in other parts of your workflow to personalise your messages, such as greeting the user by name.
Here's an example of how you can use the extracted information in a message:
Text
`Hello {{workflow.userName.first}}, welcome to our website!
`
This will display a personalised greeting to the user with their first name.
DateTime
[](#datetime)
The **DateTime** capture information type in Botpress. This type of capture information extracts a date or duration value from the user's input and saves it in a variable of type **Object**. The extracted information can include values like **next week,** **in a month,** **after two months,** **in 15 days,** **2 working days,** or any other date or duration value.
**Steps to use DateTime Field**
1. Pick the **DateTime** Capture Information Card from the Cards.
2. (Optional) - Add a question to ask. (e.g. when would you like to book an appointment?)
3. Store the output in a variable.
Once the card is used, it will automatically extract the date or duration value from the user's input and save it in the workflow variable you specified as an object. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response.
**Example**
Let's say you want to ask the user for their preferred date of booking a hotel room. You can create a new capture information card with the following properties:
`Type: Datetime
Variable name: bookingDate
Prompt message: When would you like to book the room? Please enter a date or duration (e.g., next week, in a month, after two months, in 15 days, 2 working days).
`
When the user enters their response, the Datetime card will extract the date or duration value and save it in the **bookingDate** workflow variable as an object. You can then use this variable in other parts of your workflow to decide when to book the room or provide available dates for the user to choose from.
You can check the user's preferred booking date against your available dates to ensure the room is available for booking on that day. If the room is not available, you can offer other available dates or suggest another hotel that is available on the preferred date.
Formatting Date
[](#formatting-date)
JavaScript
`` const date = luxon.DateTime.fromJSDate(workflow.date)
// Default format of date is 2023-09-27T00:00:00.000Z
// Example 1: Display a Friendly, Human-readable Date Format
const friendlyFormat = date.toFormat('LLLL dd, yyyy')
console.log(`📅 Your requested date is: ${friendlyFormat}.`)
// Output: 📅 Your requested date is: September 27, 2023.
// Example 2: Display the Day of the Week
const dayOfWeek = date.toFormat('EEEE')
console.log(`📆 It falls on a: ${dayOfWeek}.`)
// Output: 📆 It falls on a: Wednesday.
// Example 3: Display the Date in Numeric Format
const numericDateFormat = date.toFormat('dd-MM-yyyy')
console.log(`🗓 Numeric Format: ${numericDateFormat}.`)
// Output: 🗓 Numeric Format: 27-09-2023.
// Example 4: Display the Date with Slashes
const slashDateFormat = date.toFormat('yyyy/MM/dd')
console.log(`📌 Slash Format: ${slashDateFormat}.`)
// Output: 📌 Slash Format: 2023/09/27.
// Example 5: Display the Date with Day and Month Name
const dayMonthNameFormat = date.toFormat('EEEE, dd of LLLL')
console.log(`🌟 Day and Month Name Format: ${dayMonthNameFormat}.`)
// Output: 🌟 Day and Month Name Format: Wednesday, 27 of September.
``
Wait for User Input
[](#wait-for-user-input)
The **Wait for User Input** type is used to pause the flow of a conversation until the user enters a specific input. This can be useful when you want to wait for the user to enter a specific input before proceeding with the conversation.
**Steps to use Wait for User Input Field**
1. Drag and drop the **Wait for User Input** card into your node.
2. You can use `{{event.preview}}` to display the fetched user's response after the user enters the input.
Custom Prompt Fields
[](#custom-prompt-fields)
Entity - Regex
[](#entity---regex)
The **Entity - Regex** type of capture information uses regular expressions to extract specific patterns of information from the user's input and saves it in a variable of type **String**. It's particularly useful for capturing sensitive information like credit card numbers, which have distinct patterns.
**Steps to use Regex Field**
1. Create a new entity in the **Entities** section of your Botpress instance with a custom regular expression that matches the pattern of the information you want to capture.
2. Create a new capture information card.
3. Set the Type property to **Entity Regex**.
4. Select the entity you created in Step 1 from the **Entity** dropdown.
5. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted information.
6. Set the **Prompt message** property to a message that prompts the user to enter the information you want to capture.
Once the card is used, it will automatically extract the information that matches the regular expression pattern from the user's input and save it in the workflow variable you specified as a string. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's input.
**Example**
Let's say you want to ask the user for their credit card number. You can create a new entity with a regular expression that matches the pattern of a credit card number, such as **/(\\d{4}-){3}\\d{4}/** for a 16-digit credit card number in the format **XXXX-XXXX-XXXX-XXXX**. You can then create a new capture information card with the following properties:
`Type: Entity Regex
Entity: Credit Card Number (the entity you created in step 1)
Variable name: creditCardNumber
Prompt message: Please enter your credit card number in the format XXXX-XXXX-XXXX-XXXX.
`
When the user enters their credit card number, the Entity Regex card will extract the credit card number that matches the regular expression pattern and save it in the **creditCardNumber** workflow variable as a string. You can then use this variable in other parts of your workflow to perform actions like validating the credit card number or sending it to a payment gateway.
It's important to note that the **Contains sensitive data** property is available for Entity Regex type, which will mask the data by \* before saving it in the database, making it more secure.
Entity - List
[](#entity---list)
In this section, we'll discuss the **Entity - List** capture information type in Botpress. This type of capture information extracts specific pieces of information from the user's input based on matching it with entries (or synonyms) in a custom entity list. This can be useful when you want to capture specific information like a person's name, location, or product name.
**Steps to use List Field**
1. Create a new entity list under the library -> entities section.
2. Add entries to the entity list and their synonyms.
3. Create a new capture information card.
4. Set the Type property to **Entity List**.
5. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted information.
6. Set the **Prompt message** property to a message that prompts the user to enter information that matches the entity list.
Once the card is used, it will automatically extract the information that matches an entry (or one of its synonyms) in the custom entity list from the user's input and save it in the workflow variable you specified. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response.
**Fuzzy matching options**
Botpress offers three options for fuzzy matching:
* **Strict**: No errors allowed.
* **Medium**: Tolerates up to one error in words of four characters or more.
* **Loose**: Tolerates up to two errors in words of four characters or more.
This means that even if the user makes a typo or a slight error, the system can still match the input with an entry in the entity list.
**Example**
Let's say you want to ask the user for their favorite type of pizza. You can create a new entity list with entries like **Pepperoni,** **Hawaiian,** **Margherita,** and **Vegetarian.** Then, create a new capture information card with the following properties:
`Type: Entity List
Variable name: favoritePizza
Prompt message: **What's your favorite type of pizza? Please enter the name of one of our popular pizza types.
`
When the user enters their response, the Entity List card will extract the information that matches an entry (or synonym) in the custom entity list and save it in the **favoritePizza** workflow variable. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's favorite pizza type.
For example, you could use this variable to direct the user to the pizza ordering process, or to suggest additional toppings based on their selection.
Advanced Configuration
[](#advanced-configuration)
Retries
[](#retries)
The **Retries** setting helps the bot handle situations when it doesn't understand what the user is saying. It allows the bot to ask the user to provide the information again in a different way. This can improve the user's experience with the bot, increase engagement, and help the bot handle more conversations before giving up.
**Number of retries**
This is the maximum number of times the bot will ask the user to provide the information again before giving up and moving to the next card in the conversation or triggering the failure transition if enabled.
**Retry message**
This is the message that the bot will show to the user each time they fail to answer the question. It will ask the user to provide the information again in a different way. If the capture has predefined choices the retry message will contain the buttons again.
You can also add variables to this message using the following syntax:
`Hello @workflow.userName.first, we did not get your number right, please enter it again!
`
**Pro Tip**
To give your users the best experience, you can combine the **Retries** option with the **Add transition to handle failure** flag. This will help the bot gracefully handle situations when it can't understand the user's input.
**Example 1:**
Let's say you have a card that asks the user to choose between **Food** and **Drinks**. If you set the **Number of retries** to 0 and the **Add transition to handle failure** flag is turned on, then if the user says **I want Cars**, the bot will redirect the user directly to the failure transition, where you can show a message like **Sorry, I didn't understand that**.
**Example 2:**
Now, let's change the example to have the **Number of retries** set to 2 and the **Retry message** set to **Sorry, I didn't understand that, try to choose from the choices**, and the **Add transition to handle failure** flag turned on. If the user says, **I want Cars**, the bot will respond with **Sorry, I didn't understand that. Try to choose from the choices**, and show the choices again.
If the user provides another message that is not related to the choices, the bot will retry again, up to a maximum of 2 retries. If the user still fails to provide the required information after the maximum retries, the bot will redirect the user directly to the failure transition, where you can have a message like **Sorry, I didn't understand that**.
Validation
[](#validation)
The **Validation** setting allows you to verify that the user's input meets certain criteria before proceeding with the conversation. This can help ensure that the information collected is accurate and relevant to the conversation.
**Properties**
**1\. Label**
The label property allows you to generate validation code based on plain natural language instructions. This can make it easier to set up the validation rules without needing to write code.
**2\. Code**
If you prefer to write your own validation code, you can use the code property. This property allows you to write code to evaluate the user's input and determine whether it meets the validation criteria.
**3\. Validation failed message**
If the user's input fails validation, you can customise the message that the bot sends to inform the user of the validation failure.
**Steps to use Validation**
To use the validation feature, you can add the validation properties to the Capture Information card in the Botpress interface. You can choose to use the Label or Code property to set up the validation rules.
Once the validation rules are set up, the user's input will be evaluated before proceeding with the conversation. If the input meets the validation criteria, the conversation will continue normally. If the input fails validation, the bot will send a message with the validation failed message you have specified.
**Example 1:**
Suppose you have a Capture Information card that asks the user for their age. You want to ensure that the user enters a number between 18 and 100\. You can use the following validation code in the **Validation** section of the card:
CoffeeScript
`function validate(input: string): boolean
{
const age = parseInt(input) if (isNaN(age))
{ return false }
return age >= 18 && age <= 100
}
`
This code first tries to parse the user's input as a number. If the input is not a valid number, the code returns **false**. Otherwise, it checks if the age is between 18 and 100 and returns **true** if it is.
**Example 2:**
Suppose you have a Capture Information card that asks the user for their email address. You want to ensure that the user enters a valid email address format. You can use the following validation code in the **Validation** section of the card:
CoffeeScript
`function validate(input: string): boolean {
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
return emailRegex.test(input)
}
`
This code uses a regular expression to check if the user's input matches the format of a valid email address. If the input matches the format, the code returns `true`. Otherwise, it returns `false`.
Extract from History
[](#extract-from-history)
The **Extract from History** setting allows the bot to extract values from previous messages in the conversation history. This can help the bot better understand the user's input and provide more accurate responses.
**Property**
**Number of messages from history to extract from**
This property determines how many messages in the conversation history the bot will try to extract the value from. A value of **0** means that the bot will not look back in the conversation history and will only use the user's most recent message. A value of **1** means that the bot will extract the value from the user's previous message, and so on.
**Example:**
Let's say you have a Capture Information card that asks the user for their favorite color. If the user has already mentioned their favorite color earlier in the conversation, you can use the **Extract from History** feature to extract the value from their previous message.
If you set the **Number of messages from history to extract from** to **1**, the bot will extract the value from the user's previous message. If you set it to **2**, the bot will extract the value from the message before that, and so on.
For example, if the user said **My favorite color is blue** earlier in the conversation and you set the **Number of messages from history to extract from** to **1**, the bot will extract **blue** as the user's favorite color without asking the user again. This can save time and improve the user experience by avoiding repetitive questions.
Cancellation
[](#cancellation)
The **Cancellation** setting can be used to break out of the conversation and cancel the Capture Information card. This can enhance the user's experience with the bot, making the conversation feel more natural and increasing engagement.
**Properties**
**User can cancel the capture**
With this option turned on, users can cancel the Capture Information card at any time during the conversation.
**Confirm before cancelling**
If you turn on this option, users will be asked to confirm whether they want to cancel the Capture Information card before it is cancelled.
**Confirm cancel message**
This option allows you to customise the message that the bot sends to confirm the user's decision to cancel the Capture Information card.
**Example 1:**
Suppose you have a Capture Information card that asks the user for their name and email address. If the user decides to cancel the conversation, the **User can cancel the capture** option will allow them to do so easily.
**Example 2:**
If you turn on the **Confirm before cancelling** option, the bot will ask the user if they are sure they want to cancel the Capture Information card before it is cancelled. If the user confirms the cancellation, the bot will send a message that you can customise using the **Confirm cancel message** option.
Choices
[](#choices)
The **Choices** setting is used to offer a list of options to the user as a response to a Capture Information card. This can be useful when you want to restrict the user's input to a specific set of values or provide them with a list of options to choose from quickly.
You could add fixed options or add variables to each choice to make them dynamic. You can also render the list of choices dynamically by toggling the SuperText input and adding an array variable with the following format:
JavaScript
`;[
{
label: 'French',
value: 'fr',
},
{
label: 'English',
value: 'en',
},
]
`
> ## 🚧
>
> Limit
>
> If you add more than 5 choices, they will be rendered as a Dropdown/List instead of buttons. This number may vary by channel.{' '} The choices labels should not be longer than 20 characters otherwise they will get cut in some channels.
> ## 📘
>
> Note
>
> Choices are only available for **Single Choice**, **Multiple Choice**, **Boolean**, **Confirmation** and **Raw Input**Capture cards.
**Example**
Suppose you have a Capture Information card that asks the user to select their preferred mode of transportation - Car, Bus or Train. If you turn on the Choices option and specify these three options, the user will be presented with these options to choose from.
Advanced
[](#advanced)
\*\*1\. Add transition to handle failure
This is a yes/no flag that determines whether a transition should be added to handle cases where the Capture Information card fails to retrieve information from the user.
**Example**
If this flag is set to **Yes** and the Capture Information card fails to capture the required information, it will transition to the failure transition where a message can be displayed to the user, such as **Sorry, I didn't understand that. Please try again**.
\*\*2\. Skip if variable is already filled
This is a flag that determines whether the Capture Information card should be skipped if the variable assigned to it already has a value.
**Example**
If this flag is set to **Yes** and the variable already has a value, the Capture Information card will be skipped entirely, and the conversation will proceed to the next node.
This flag can be useful in scenarios where a user may have already provided the required information in a previous conversation with the bot.
Combining these two flags can help improve the user experience with the bot by allowing for smoother conversation flows and avoiding unnecessary repetition.
Prompt Chaining
[](#prompt-chaining)
Prompt Chaining allows you to extract multiple values from a single user message using multiple Capture Information cards in sequence. If a value was not found, the respective Capture Information card will ask for its value.
**Chaining Multiple Prompts**
To chain multiple Capture Information cards together, you need to follow these steps:
1. Add the first Capture Information card to the flow.
2. Set the Type property to the type of information you want to capture (e.g., Fullname).
3. Set the **Variable name** property to the name of the workflow variable you want to use to store the extracted information (e.g., fullname).
4. Set the **Prompt message** property to a message that prompts the user to enter the information (e.g., **Please enter your full name**).
5. Set the **Extract from history** property to **1**.
6. Add the next Capture Information card to the flow.
7. Repeat steps 1-6 for each additional Capture Information card you want to add, making sure to use a different variable name for each one.
Once the user enters a value, it will automatically extract the requested information from the user's message using each Capture Information card in sequence. If a value is not found for a particular Capture Information card, it will ask the user for the value before proceeding to the next node/card.
You can then use the extracted variables in other parts of your flow by referencing the specific variable names using the following syntax: **`{{workflow.variableName}}`**.
**Example**
Let's say you want to capture a user's full name, email address, and phone number. You can create a new flow with the following steps:
1. Add a Capture Information card to the flow with the following properties:
`Type: Fullname
Variable name: fullname
Prompt message: Please enter your full name
Extract from history: 1
`
1. Add a second Capture Information card to the flow with the following properties:
`Type: Email
Variable name: email
Prompt message: Please enter your email address
Extract from history: 1
`
1. Add a third Capture Information card to the flow with the following properties:
`Type: PhoneNumber
Variable name: phone
Prompt message: Please enter your phone number
Extract from history: 1
`
When the user sends a message, the flow will begin extracting the requested information from the user's message using each Capture Information card in sequence. If a value is not found for a particular Capture Information card, it will ask the user for the value before proceeding to the next card.
You can then use the extracted variables in other parts of your flow, such as sending a confirmation message to the user with their captured information:
`Thank you for submitting your information!
We have your full name as {{workflow.fullname.first}} {{workflow.fullname.last}}, your email address as {{workflow.email}}, and your phone number as {{workflow.phone}}.
We'll be in touch soon!
`
This will display the user's captured information in a clear and easy-to-read format for both the user and the bot.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Prompt Field Types](#prompt-field-types)  
         * [Single Choice](#single-choice)  
         * [Multi Choice](#multi-choice)  
         * [Boolean](#boolean)  
         * [Confirmation](#confirmation)  
         * [Number](#number)  
         * [Email Address](#email-address)  
         * [Phone Number](#phone-number)  
         * [FullAddress](#fulladdress)  
         * [Price](#price)  
         * [Raw Input](#raw-input)  
         * [Percentage](#percentage)  
         * [Quantity](#quantity)  
         * [Color](#color)  
         * [Time Measurement](#time-measurement)  
         * [Weight Measurement](#weight-measurement)  
         * [Cron Schedule](#cron-schedule)  
         * [Operating System](#operating-system)  
         * [Quantity of People](#quantity-of-people)  
         * [Volume Measurement](#volume-measurement)  
         * [Temperature Measurement](#temperature-measurement)  
         * [Person](#person)  
         * [DateTime](#datetime)  
         * [Wait for User Input](#wait-for-user-input)  
   * [Custom Prompt Fields](#custom-prompt-fields)  
         * [Entity - Regex](#entity---regex)  
         * [Entity - List](#entity---list)  
   * [Advanced Configuration](#advanced-configuration)  
         * [Retries](#retries)  
         * [Validation](#validation)  
         * [Extract from History](#extract-from-history)  
         * [Cancellation](#cancellation)  
         * [Choices](#choices)  
         * [Advanced](#ad
* [Cancellation](#cancellation)  
         * [Choices](#choices)  
         * [Advanced](#advanced)  
   * [Prompt Chaining](#prompt-chaining)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
CLI
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# CLI
[ Suggest Edits](/edit/cli)
Introduction
[](#introduction)
The Botpress Command Line Interface (CLI) is a powerful tool for developers to manage their Botpress projects efficiently. From your command line, you can handle various tasks such as bot creation, integration management, project initialization, and deployment to the Botpress Cloud.
The CLI is distributed as an npm package, meaning it can easily be integrated into your Node.js environment, with support for yarn and pnpm package managers.
This guide will help you install and utilize the Botpress CLI, demonstrating its extensive range of commands and how it can simplify your bot development process.
Installation
[](#installation)
The CLI is available as an npm package. It can be installed globally or locally.
`npm install -g @botpress/cli # for npm
yarn global add @botpress/cli # for yarn
pnpm install -g @botpress/cli # for pnpm
`
Usage
[](#usage)
Here's the result of running `bp --help`:
`bp <command>
Commands:
bp login                 Login to Botpress Cloud
bp logout                Logout of Botpress Cloud
bp bots                  Bot related commands
bp integrations          Integration related commands
bp init                  Initialize a new project
bp generate              Generate typings for intellisense      [aliases: gen]
bp bundle                Bundle a botpress project
bp build                 Generate typings and bundle a botpress project
bp serve                 Serve your project locally
bp deploy                Deploy your project to the cloud
bp add <integrationRef>  Install an integration in your bot
Options:
--help  Show help                                                    [boolean]
`
Since the `bp bots` and `bp integrations` commands are nested, you can run `bp bots --help` and `bp integrations --help` to see their respective subcommands.
This is the result of running `bp bots --help`:
`Bot related commands
Commands:
bp bots create           Create new bot                         [aliases: new]
bp bots get <botRef>     Get bot
bp bots delete <botRef>  Delete bot
bp bots list             List bots                               [aliases: ls]
Options:
--help  Show help                                                    [boolean]
`
This is the result of running `bp integrations --help`:
`bp integrations
Integration related commands
Commands:
bp integrations get <integrationRef>     Get integration
bp integrations delete <integrationRef>  Delete integration
bp integrations list                     List integrations       [aliases: ls]
Options:
--help  Show help                                                    [boolean]
`
Updated 4 months ago
---
* [Table of Contents](#)
* * [Introduction](#introduction)  
   * [Installation](#installation)  
   * [Usage](#usage)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Cards
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Cards
Drag-and-drop elements representing actions your bot can take.
[ Suggest Edits](/edit/cards)
Cards are prebuilt, reusable workflows and drag-and-drop elements in Botpress that represent individual actions your bot can take. They simplify and accelerate the creation of AI-driven chatbots and agents by providing modular building blocks for various functions and interactions.
This section outlines the different Card categories made available to you through the Card Tray.
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Chat API
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Chat API
[ Suggest Edits](/edit/chat-api)
Introduction
[](#introduction)
The Chat API is an HTTP-based API that allows you to interact with a Botpress bot through a backend. It is similar to the Webchat API, but it is designed to be used by backend services.
Setup and Configuration
[](#setup-and-configuration)
To use the Chat API, you must install the `@botpress/chat` package. You can do this by running the following command:
npmyarnpnpm
`npm install @botpress/chat
`
`yarn add @botpress/chat
`
`pnpm install @botpress/chat
`
You'll need to provide the `Webhook URL` in the integration configuration where the Chat API will send the messages and events. This URL must be a public URL accessible from the internet.
You can also configure the `Webhook Secret` to secure the communication between your backend and the Chat API. This secret will be used to make API requests to the Chat API.
Demo
[](#demo)
You can take a look at the following demo to see how the Chat API works:
[Demo Example](https://stackblitz.com/github/botpress/documentation-examples/tree/master/examples/chat-client?embed=1&hideNavigation=1&view=both&file=src%2Fmain.ts)
Also, the [NPM Package](https://www.npmjs.com/package/@botpress/chat) has a few examples on how to use the Chat API.
Updated 4 months ago
---
* [Table of Contents](#)
* * [Introduction](#introduction)  
   * [Setup and Configuration](#setup-and-configuration)  
   * [Demo](#demo)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Card Tray
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Card Tray
Find and drag actions into your bot's workflows.
[ Suggest Edits](/edit/card-tray)
The **Card Tray** provides a convenient space for accessing and managing different Cards while building your workflows. It acts as a toolbox where you can easily drag and drop Cards into your bot’s flows, enabling you to quickly design complex interactions without starting from scratch.
Accessing the Card Tray
[](#accessing-the-card-tray)
1. **Access to Installed Cards:** The Card Tray displays all the Cards that are installed in your current project, allowing you to quickly find and use them in your workflows.
2. **Drag-and-Drop Functionality:** You can simply drag Cards from the tray and drop them into the desired position within your flow, making the bot-building process intuitive and efficient.
3. **Card Organization:** Cards in the tray are often organized by category or type, helping you easily locate the specific functions or actions you need for your bot.
4. **Customization and Configuration:** After placing a Card from the tray into your flow, you can configure its settings directly within the workflow, allowing you to tailor its behavior to your needs.
5. **Quick Access to Common Functions:** The Card Tray often includes common or frequently used Cards, making it easy to implement standard functionalities such as user authentication, data collection, or conditional logic.
Using the Card Tray
[](#using-the-card-tray)
1. **Open Botpress Studio** and start editing a flow.
2. **Locate the Card Tray,** usually found on the right-hand side or as a collapsible panel within the workflow editor.
3. **Browse through the available Cards,** either by scrolling or using the search bar to find the specific Card you need.
4. **Drag the desired Card** from the tray and drop it into your workflow at the appropriate location.
5. **Configure the Card’s settings** as needed to ensure it performs the intended function within your bot.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Accessing the Card Tray](#accessing-the-card-tray)  
   * [Using the Card Tray](#using-the-card-tray)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Chatbot Settings
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Chatbot Settings
An overview of general settings that apply to your bot.
[ Suggest Edits](/edit/chatbot-settings-1)
In the Chatbot Settings menu, accessible through the left-hand menu of the Studio, you can adjust general settings that apply to your bot's flows and functions.
Inactivity Timeout
[](#inactivity-timeout)
This is the amount of time, in minutes, that your bot will wait for a response before ending the session. When the session ends, your bot will automatically trigger the Timeout flow.
When the Timeout is triggered, your user's position in the workflow along with any workflow variables are cleared.
You can set this to '0' to prevent the bot from ever timing out.
The maximum value is 1440 minutes, or 24 hours.
Node Repetition Limit
[](#node-repetition-limit)
This is the maximum amount of times a conversation can go through any specific node. When the user repeats a node the number of times indicated by this limit, an error will be triggered.
The maximum value is 10.
Use the Botpress Client
[](#use-the-botpress-client)
This option allows the 'client' object to be used in the code editor to access to Botpress client.
Default LLMs
[](#default-llms)
In these sections, you identify which Large Language Model (LLM) you'd like to use for various purposes. These are generally identified as Fast, Best, or per-use through individual cards.
Fast
[](#fast)
This model should be used for quick and easy tasks, prioritizing speed and cost over performance.
Best
[](#best)
This model should be used for complex tasks, prioritizing performance over speed or cost.
Autonomous Language Model
[](#autonomous-language-model)
This is the model that powers LLMz and generates responses, including all of your Autonomous Nodes.
LLMz Version
[](#llmz-version)
The version of LLMz that your bot uses. We recommend staying updated to the latest version, but you may find that a bot built on previous versions of LLMz function best on those versions.
Variables
[](#variables)
In these sections, you can identify variables that exist above the scope of workflow variables, like user and bot variables.
You can learn more about variables [here](https://botpress.com/docs/variables).
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Inactivity Timeout](#inactivity-timeout)  
   * [Node Repetition Limit](#node-repetition-limit)  
   * [Use the Botpress Client](#use-the-botpress-client)  
   * [Default LLMs](#default-llms)  
         * [Fast](#fast)  
         * [Best](#best)  
         * [Autonomous Language Model](#autonomous-language-model)  
   * [LLMz Version](#llmz-version)  
   * [Variables](#variables)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Card Hub
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Card Hub
Download and install premade workflows from across the web.
[ Suggest Edits](/edit/card-hub)
From the Card Hub, you can download and install prebuilt workflows for use within your bots. The workflows available through the Card Hub are designed to save you time and enhance your development by leveraging workflows created by Botpress, your team, or other bot builders from our community.
Cards are accessible via the Card Hub, a centralized library where you can browse and select Cards to add directly to your projects. Whether you're looking to integrate a common function such as user authentication, or a complex interaction like a multi-step booking flow, Cards make it easy to find and implement what you need.
Accessing the Card Hub
[](#accessing-the-card-hub)
The Card Hub is accessible via the left-hand menu, with an icon in the shape of a globe.
Installing and using a Card
[](#installing-and-using-a-card)
Use the search bar to search for a specific function, like 'message delay' or 'NPS survey'.
When you've found a Card you want to install, click on the 'Install Workflow' button. This will add the Card to your card tray.
You can use the card by dragging it from the card tray into a node. When the workflow reaches this card, your bot will execute the prebuilt workflow, along with any options you were prompted to configure upon install.
Customizing a Card
[](#customizing-a-card)
Right-clicking on a card once you've added it to your workflow, or revisiting the installation menu from the Card Hub, will allow you to make a copy of the card and modify its contents.
This will create a version of the installed Card available as a workflow directly in your bot, so you can make any custom changes to it as needed.
The changes you make here will not affect the public listing of the Card.
Sharing Cards
[](#sharing-cards)
To share your own workflow as a card available on the Card Hub, follow these steps:
1. Navigate to the workflow you'd like to share
2. On the right-side panel, click 'Share Workflow'
3. Follow the steps in this menu to make the card public.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Accessing the Card Hub](#accessing-the-card-hub)  
   * [Installing and using a Card](#installing-and-using-a-card)  
   * [Customizing a Card](#customizing-a-card)  
   * [Sharing Cards](#sharing-cards)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Brand Safety Framework
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Brand Safety Framework
Control AI responses, enforce brand-aligned messaging, and prevent harmful outputs.
[ Suggest Edits](/edit/brand-safety-framework)
Brand Safety Framework
[](#brand-safety-framework)
The Brand Safety Framework in Botpress is a comprehensive suite of features designed to provide transparency and control over AI-driven decisions, ensuring brand safety across all interactions. Similar to a car's safety features—such as airbags and crash collision ratings—the framework is not a single toggle but a holistic approach that includes several powerful tools designed to give you visibility into and control over an LLM's actions. Botpress empowers you with unparalleled insight into the logic of LLMs and equips you with the controls to adjust and refine decision-making processes, securing brand integrity in every interaction.
LLM Transparency
[](#llm-transparency)
Traditional LLMs and providers often operate as opaque blackboxes, making it challenging to understand the reasoning behind their decisions. Botpress’s BSF addresses this challenge by exposing the decision-making pathways of LLMs, allowing users to see why certain outputs were generated and how they align with brand standards. The core principle is simple: when you can understand and influence an LLM’s decisions, you can protect your brand.
Key Features
[](#key-features)
Policy Agent
[](#policy-agent)
![](https://files.readme.io/4e9755928c4d174923e870eeaf145e1b2bae61bc63a2bf0b0cf30b064964f6e6-Untitled_1000_x_700_px_1.png)
The Policy Agent is a rules-based mechanism that controls the outputs of LLMs by enforcing constraints and guardrails. By configuring policies, users can dictate acceptable response behaviors, prevent harmful outputs, and ensure that AI actions align with brand values.
Usage
[](#usage)
* Define constraints, including YAML or JSON configurations.
* Set gates to filter out undesirable responses based on specific keywords, patterns, or context cues.
* Identify policies or behaviors your agent should adhere to during conversations.
RAG Safety
[](#rag-safety)
![](https://files.readme.io/e5422a82827bc4727753de64c120204a1d0634406c2c2d2c27fda537eab476bc-Untitled_design_23.png)
Retrieval-Augmented Generation (RAG) Safety provides transparency over the data selection process used by LLMs. It reveals which data chunks were identified as relevant to a query and which were ultimately submitted to the LLM. Users have the ability to review, approve, or modify these selections, ensuring that only the most appropriate data informs the AI's output.
Usage
[](#usage-1)
* Access a visual interface that displays selected chunks with contextual relevance scores.
* Modify data chunk selections manually or set up automated rules to refine data retrieval criteria.
* Log and audit the data flow to track the decisions made during the query process.
LLM Inspector
[](#llm-inspector)
![](https://files.readme.io/ee9e9beff9e6614143d5e9de9f3be45e3b70ae4b362db350779c57ff21bca0ff-Untitled_design_24.png)
The LLM Inspector is a tool that breaks down the decision-making process of the LLM, showing why it selected certain actions or responses. By dissecting the LLM’s internal logic, users can gain insights into the decision pathways and make informed adjustments to align AI behavior with brand standards.
Usage
[](#usage-2)
* Inspect decision trees that outline response logic and action selection.
* View confidence scores, logic paths, and influence factors contributing to specific outputs.
* Adjust weighting and influence factors to steer future decision-making processes
HITL
[](#hitl)
![](https://files.readme.io/e989ed8ff32691aff919eea6111a02caebc43550c5de9a8353d29c0595d39e1a-Screenshot_2024-09-19_at_10.53.07_AM.png)
HITL, or Human-in-the-Loop, allows you to participate in an AI agent's conversation directly from the Botpress dashboard. This feature offers a critical layer of oversight and control when using LLMs in customer- or user-facing interactions. It was designed to ensure that sensitive or high-risk conversations can be escalated to human agents, helping maintain brand integrity, mitigate potential issues, and protect user privacy.
Usage
[](#usage-3)
You can use HITL to define rules or "gates" within a conversation flow that determine when a human agent should intervene. For example, if the conversation involves sensitive personal data, triggers specific legal language, or moves into territory that may require human expertise, the conversation is automatically handed off to a human agent for further handling.
You can configure the system to identify specific keywords, scenarios, or actions that require human oversight. This level of customizability ensures that only relevant conversations are escalated, preserving efficiency while safeguarding privacy.
By integrating HITL into your LLM-driven solutions, you ensure your brand remains compliant with privacy standards, while retaining the flexibility and efficiency of AI-driven interactions.
This feature allows businesses to have the best of both worlds: leveraging cutting-edge AI to handle the bulk of interactions, while having the safety net of human oversight in sensitive situations. HITL enhances trust by allowing businesses to demonstrate that they are taking proactive steps to ensure conversations are handled responsibly. This creates confidence in the platform's ability to handle customer interactions without compromising privacy or brand safety.
Updated 18 days ago
---
* [Table of Contents](#)
* * [Brand Safety Framework](#brand-safety-framework)  
   * [LLM Transparency](#llm-transparency)  
   * [Key Features](#key-features)  
         * [Policy Agent](#policy-agent)  
         * [RAG Safety](#rag-safety)  
         * [LLM Inspector](#llm-inspector)  
         * [HITL](#hitl)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Agents
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Agents
Specialized components that extend the capabilities of a bot.
[ Suggest Edits](/edit/agents)
Agents are specialized modules or components that extend the capabilities of a bot beyond its basic functions. These agents are designed to perform specific tasks or processes that enhance the bot's ability to interact with users, retrieve information, or manage conversations more effectively.
Botpress offers a variety of specialized Agents to enhance your bot's capabilities and functions. These Agents are designed to perform specific tasks, each contributing to the overall performance of your chatbot. Here, we introduce five of our agents: HITL, Summary, Personality, Knowledge, and Translator Agents.
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Agents
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Agents
Cards that interact with specific Agent functionalities.
[ Suggest Edits](/edit/agents-2)
The cards in the Agents category allow you to perform actions that integrate with your agent's functionalities in some way.
Knowledge Agent
[](#knowledge-agent)
The Query Knowledge Bases card allows you to programatically query Knowledge Bases from within your bot. This card is useful when you want to retrieve information from your Knowledge Bases and display it to the user during the conversation.
This supports variables and expressions. and will not send the answer directly to the user.
Query
[](#query)
The question you want to ask to the Knowledge Base. You can type the question direcly or use variables. e.g. `{{event.preview}}` or `{{workflow.question}}`
Included Knowledge Bases
[](#included-knowledge-bases)
Select in which Knowledge Bases to answer questions from. By default, it uses all the Knowledge Bases.
The result will be stored in `{{turn.KnowledgeAgent.answer}}` and `{{turn.KnowledgeAgent.citations}}`. You can also store the answer in workflow variables.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Knowledge Agent](#knowledge-agent)  
         * [Query](#query)  
         * [Included Knowledge Bases](#included-knowledge-bases)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
AI
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# AI
These cards use AI by default to power their actions.
[ Suggest Edits](/edit/ai)
Overview
[](#overview)
The cards in the AI section of the card tray are specialized tools that leverage advanced AI capabilities, including natural language processing, data analysis, and machine learning, to enhance your bot's functionality. These cards allow your bot to perform complex tasks, such as summarizing content, translating languages, analyzing user input, and more, adding intelligence and adaptability to your conversational flows.
> ## 📘
>
> AI is everywhere!
>
> In addition to these dedicated, AI-powered cards, you'll find that LLMs power almost every aspect of the Botpress conversational experience.
>
> These cards provide you direct, task-based access to LLMs, giving you more control over their inputs and outputs.
There are three types of cards made available to you in the AI section of the card tray:
AI Task
AI Transition
AI Generate Text
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Overview](#overview)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Audits
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Audits
A log of changes made to the Workspace and bots it contains.
[ Suggest Edits](/edit/audits)
This tab contains a list of recent changes and edits made to the Workspace and any bots it contains.
Audit logs are particularly useful in collaborative environments where multiple team members work in the same Workspace.
Ordered chronologically, the Audit log lists the Workspace member, the action they took, and on what time and date this action was taken.
Updated about 1 month ago
---[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Botpress Documentation
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Botpress Documentation
Botpress is a platform used to build LLM-powered AI agents and chatbots.
[ Suggest Edits](/edit/home)
Botpress enables teams of all sizes to build, deploy, and monitor AI-powered chatbots and agents. It allows you to reliably automate complex conversations, tasks, and workflows across a variety of communication channels.
The building process is split into three phases: Build, Deploy, and Monitor.
Build
[](#build)
Building on Botpress takes place primarily in the Studio, where you'll decide what kinds of conversations your bot will be able to handle, what information it knows, and what tools it has access to.
Deploy
[](#deploy)
When you've finished building and testing your bot, Botpress makes it easy to put your bot in front of customers or team members.
Monitor
[](#monitor)
Once your bot has been deployed, Botpress allows you to track its performance and understand if it's accomplishing its tasks correctly with a suite of analytics and logging tools.
Updated 6 days ago
---
What’s Next
* [Build](/docs/build)
* [Table of Contents](#)
* * [Build](#build)  
   * [Deploy](#deploy)  
   * [Monitor](#monitor)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Build
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Build
Planning your bot project, setting goals, and testing your conversations.
[ Suggest Edits](/edit/build)
Creating a chatbot with Botpress is a simple and intuitive process that can be accomplished by both technical and non-technical users. With a few straightforward steps, you can quickly set up an AI agent or chatbot.
Creating a bot
[](#creating-a-bot)
1. Log in to [Botpress Cloud](https://app.botpress.cloud)
2. Click **\+ New bot** and enter the Studio
3. Get creative!
In Botpress, each bot belongs to a Workspace. When you connect to Botpress Cloud for the first time, a default Workspace will be automatically created for you.
Bot templates
[](#bot-templates)
Templates are pre-configured projects that contain predefined conversational flows, Knowledge Bases, and responses.
They serve as a starting point for building bots and can be customized to suit specific use cases. Botpress provides a collection of built-in templates that cover various scenarios and use cases, like customer support, sales, or an easy setup wizard.
These templates can be used as-is or modified according to the specific requirements of your chatbot.
Using bot templates
[](#using-bot-templates)
When you enter Botpress Studio after creating a new bot, you'll be prompted to select from a Template or start building from scratch.
To access templates on an existing bot:
* In Botpress Studio, click on the Botpress icon located at the top-left corner, and select **Explore Bot Templates**.
* Choose the template you would like to use.
> ## 🚧
>
> Warning: Overriding Template
>
> If you override an existing bot with a bot template, all the previous content and configurations of your bot will be erased and replaced with the new template.
Testing your bot
[](#testing-your-bot)
Regularly testing the kinds of conversations end users will have with your bot is a crucial part of the building process.
There is a chat emulator built in the studio with which you can test your bot. It represents what your visitors will experience when they speak with your bot. You can reset the conversation by clicking the three dots at the top and selecting **New conversation** or **start as a new user**. **New conversation** will only remove temporary variables and start a new conversation while **start as a new user** will remove any variable saved with the user, starting the entire conversation from scratch.
You can get additional information from the Event Debugger to understand why your bot generated a specific answer or took a certain action.
The Event Debugger includes all sorts of useful information: the dialogue engine's elected suggestion, nodes flowed through, and natural language intents or questions. You can also view the raw JSON Payload that contains all details if you need further data. Additionally, your bot's logs record all events in the **Logs** tab of the bottom panel.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Creating a bot](#creating-a-bot)  
   * [Bot templates](#bot-templates)  
         * [Using bot templates](#using-bot-templates)  
   * [Testing your bot](#testing-your-bot)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Asana
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Asana
[ Suggest Edits](/edit/asana-integration)
Asana Integration allows you to seamlessly connect your Botpress and Asana, a well-established project management platform. This integration equips your chatbot with the ability to manage projects and tasks right from its interface. After the setup, you will be able to perform actions such as task creation, task updates, task comment addition, and more.
Prerequisites
[](#prerequisites)
* An [Asana account](https://asana.com/)
* Access to an existing Asana workspace.
Setting up the Asana integration in Botpress
[](#setting-up-the-asana-integration-in-botpress)
1. Go to the [Integration Hub](https://app.botpress.cloud/hub) in Botpress Cloud (if you don't have the integration installed yet).
2. Find and open the Asana integration then click on the "Install to Bot" button, now go back to your bot settings.
The Asana integration has the following settings:
* **Enabled**: Whether Botpress will communicate with Asana
* **Webhook URL**: The URL for receiving data in Botpress. (You shall not be using it)
* **API Token**: The API token generated from Asana
* **Workspace Gid**: The workspace ID obtained from Asana
Setting up Asana
[](#setting-up-asana)
1. Generate a Personal Access Token on Asana. Follow [these instructions](https://developers.asana.com/docs/personal-access-token) to get your token. Once you have it, paste it in the API Token input in Botpress.
2. Get the workspace ID. You can obtain your workspace ID by visiting [this link](https://app.asana.com/api/1.0/workspaces) while logged in to your Asana account. The workspace ID corresponds to the `gid` parameter of the workspace you want to use. Paste it in the Workspace Gid input in Botpress.
That's it! Now the Asana integration is operational and ready for use within your bot.
> ## 🚧
>
> Note
>
> The Asana API rate limits are applicable. Also, note that certain advanced Asana features tied to paid plans may not be accessible.
Capabilities
[](#capabilities)
With the Asana Integration, you can interact with Asana directly from your Botpress chatbot. The integration introduces various actions, including task creation, task updates, task comment addition, and more, making the task and user management processes more efficient.
Cards
[](#cards)
Here's a breakdown of the Cards / functions provided by Asana Integration and their input fields. You need to make sure the integration is enabled before being able to add them.
Create task
[](#create-task)
This function is used to create a new task in Asana. The input fields include:
* **name**: The name of the task.
* **notes**: The description of the task (optional).
* **assignee**: The ID of the user who will be assigned to the task or "me" to assign to the current user (optional).
* **projects**: The project IDs should be strings separated by commas (optional).
* **parent**: The ID of the parent task (optional).
* **start\_on**: The start date of the task in `YYYY-MM-DD` format (optional).
* **due\_on**: The due date of the task without a specific time in `YYYY-MM-DD` format (optional).
You can store the output of this to a variable to access the permalink.
Update task
[](#update-task)
This function is used to update an existing task in Asana. The input fields include:
* **taskId**: The ID of the task to update.
* **name**: The name of the task (optional).
* **assignee**: The ID of the user who will be assigned to the task or "me" to assign to the current user (optional).
* **completed**: If the task is completed, enter "true" (without quotes), otherwise, it will keep its previous status (optional).
Find user
[](#find-user)
This function is used to find a user, and all their associated metadata in Asana. The input field is:
* **userId**: The email of the user.
Add comment to task
[](#add-comment-to-task)
This function is used to add a comment to a task in Asana. The input fields include:
* **taskId**: The ID of the task to comment.
* **comment**: The content of the comment to be added.
---
With Asana Integration, your Botpress chatbot becomes a powerful project management tool that can interact with Asana directly. This facilitates efficient task and user management processes, saving you time and improving your productivity. Whether you're creating a task, updating an existing one, finding a user, or adding a comment to a task, Botpress Asana Integration makes it all possible right from your chatbot interface.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Prerequisites](#prerequisites)  
   * [Setting up the Asana integration in Botpress](#setting-up-the-asana-integration-in-botpress)  
   * [Setting up Asana](#setting-up-asana)  
   * [Capabilities](#capabilities)  
         * [Cards](#cards)[Jump to Content](#content)
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
---
[![Botpress](https://files.readme.io/c8cb63b6d586cd66085b4c960570959a424c7050c5ffeb0aeaf31711e2e1b2ac-small-BPLOGO_new_dark_1.png)](https://botpress.com)
Guides
Moon (Dark Mode)Sun (Light Mode)
[Guides](/docs)[API Reference](/reference)[Changelog](/changelog)
Analytics
Search
## Home
* [Botpress Documentation](/docs/home)
## Getting Started
* [Build](/docs/build)
* [Deploy](/docs/deploy)
* [Monitor](/docs/monitor)
## DASHBOARD
* [Workspace](/docs/workspace)  
   * [Home](/docs/home-1)  
   * [Members](/docs/members)  
   * [Audits](/docs/audits)  
   * [Your integrations](/docs/your-integrations)  
   * [Usage](/docs/usage-2)  
   * [Settings](/docs/settings)  
   * [Profile Setting](/docs/user-profile)
* [Bot](/docs/bot)  
   * [Overview](/docs/overview-1)  
   * [Integrations](/docs/integrations-1)  
   * [Webchat](/docs/webchat-1)  
   * [Logs](/docs/logs)  
   * [Conversations](/docs/conversations)  
   * [Analytics](/docs/analytics-1)  
   * [Events](/docs/events-2)  
   * [Issues](/docs/issues)  
   * [Configuration variables](/docs/configuration-variables-1)
## STUDIO
* [Interface](/docs/interface)  
   * [Nodes](/docs/nodes)  
   * [Home](/docs/home-2)  
   * [Flows](/docs/studio-interface-flows)  
   * [Knowledge Base](/docs/knowledge-base)  
   * [Tables](/docs/tables)  
   * [Agents](/docs/agents)  
         * [Summary Agent](/docs/summary-agent)  
         * [Personality Agent](/docs/personality-agent)  
         * [Policy Agent](/docs/policy-agent)  
         * [Translator Agent](/docs/translator-agent)  
         * [Knowledge Agent](/docs/knowledge-agent)  
         * [HITL Agent](/docs/hitl-agent)  
         * [Vision Agent](/docs/vision-agent)  
         * [Analytics Agent](/docs/analytics-agent)  
   * [Library](/docs/library)  
   * [Hooks](/docs/hooks)  
   * [Integrations](/docs/integrations-3)  
   * [Schemas](/docs/schemas)  
   * [Card Hub](/docs/card-hub)  
   * [Versions](/docs/versions-1)  
   * [Chatbot Settings](/docs/chatbot-settings-1)  
   * [Find](/docs/find)  
   * [Variables](/docs/variables)  
   * [Card Tray](/docs/card-tray)  
   * [Debugger, Logs & JSON](/docs/debugger-logs-json)  
   * [Emulator](/docs/emulator)  
   * [Keyboard Shortcuts](/docs/keyboard-shortcuts)  
   * [Commands](/docs/studio-commands)  
   * [Studio Preferences](/docs/studio-preferences)  
   * [Import & Export](/docs/import-export-bots)
* [Cards](/docs/cards)  
   * [Send Messages](/docs/send-messages)  
   * [Execute](/docs/execute)  
   * [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
        
* [Webchat](/docs/webchat-2)  
   * [Flow Logic](/docs/flow-logic)  
   * [AI](/docs/ai)  
         * [AI Task](/docs/ai-task-1)  
         * [AI Transition](/docs/ai-transition)  
         * [AI Generate Text](/docs/ai-generate-text)  
   * [Capture Information](/docs/capture-information)  
   * [Events](/docs/events-3)  
   * [Agents](/docs/agents-2)  
   * [Utilities](/docs/utilities)
## integrations
* [Usage](/docs/using-integrations)  
   * [Asana](/docs/asana-integration)  
   * [HITL](/docs/hitl-1)  
   * [Instagram](/docs/instagram)  
   * [Intercom](/docs/intercom)  
   * [Line](/docs/line)  
   * [Messenger](/docs/messenger)  
   * [Microsoft Teams](/docs/microsoft-teams)  
   * [Notion](/docs/notion)  
   * [Slack](/docs/slack)  
   * [Sunshine Conversations](/docs/sunshine-conversations)  
   * [Telegram](/docs/telegram)  
   * [Trello](/docs/trello)  
   * [Twilio](/docs/twilio)  
   * [Viber](/docs/viber)  
   * [Vonage](/docs/vonage)  
   * [Webhook](/docs/webhook)  
   * [WhatsApp](/docs/whatsapp)  
         * [Manual Configuration](/docs/manual-configuration)  
   * [Zapier](/docs/zapier)  
   * [Zendesk](/docs/zendesk)
* [Building](/docs/building-integrations)  
   * [Getting Started](/docs/getting-started-1)  
         * [Getting Started](/docs/getting-started-1)  
         * [Adding Messaging Channel Capabilities](/docs/adding-messaging-channel-capabilities)  
         * [Adding Actions & Triggers to Botpress Studio](/docs/adding-actions-triggers-to-botpress-studio)  
         * [Publish your integration on Botpress Hub](/docs/publish-your-integration-on-botpress-hub)  
   * [Use Your Own LLM](/docs/llm-interfaces)  
   * [Connect a live agent platform with Botpress](/docs/hitl)  
   * [Moving Parts](/docs/moving-parts)  
   * [CLI](/docs/cli)  
   * [SDK](/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)
/docs/sdk)  
   * [Key Concepts](/docs/key-concepts)  
         * [Architecture](/docs/architecture)  
         * [Tags](/docs/tags)  
         * [Channels](/docs/channels)  
         * [Configuration](/docs/configuration)  
         * [User](/docs/user)  
         * [Conversations](/docs/conversations-1)  
         * [Messages](/docs/messages)  
         * [Event](/docs/event)  
         * [States](/docs/states-1)  
         * [Actions](/docs/actions)  
         * [Definitions](/docs/definitions)  
         * [Secrets](/docs/secrets)  
         * [ZUI - Zod schema UI components in Botpress \[BETA\]](/docs/zui-zod-schema-ui-components-in-botpress)  
   * [How to](/docs/states)  
         * [States](/docs/states)  
         * [Register & Unregister](/docs/register-unregister)  
         * [Integrations Actions](/docs/integrations)  
         * [Integration Events](/docs/integration-events)  
         * [Handler](/docs/handler)  
         * [Logging](/docs/logging)  
         * [Building a Custom Integration](/docs/building-a-custom-integration)
## Webchat
* [Webchat](/docs/webchat)  
   * [Webflow](/docs/webflow)  
   * [Wix](/docs/wix)  
   * [Wordpress](/docs/wordpress)
* [Webchat v1 (deprecated)](/docs/web-chat-v1old)  
   * [Controlling Web Chat using JavaScript](/docs/controlling-web-chat-using-javascript)  
   * [Styling your webchat](/docs/chatbot-button)  
         * [Chatbot Button](/docs/chatbot-button)  
         * [Chat Header](/docs/chat-header)  
         * [User Input Area](/docs/user-input-area)  
         * [Show Bot Info](/docs/show-bot-info)  
   * [Embedding Webchat](/docs/react-app)  
         * [React App](/docs/react-app)  
         * [React Native App](/docs/react-native-app)  
         * [Web Chat Iframe](/docs/web-chat-iframe)  
         * [Full Screen Chatbot](/docs/full-screen-chatbot)
* [Webchat v2](/docs/embedded-webchat)  
   * [Embedded Webchat](/docs/embedded-webchat)  
         * [Custom CSS Reference](/docs/custom-css-reference)  
   * [React Components](/docs/react-js)  
   * [Webchat Client](/docs/webchat-client)
## Botpress APIs
* [Files API](/docs/files-api)
* [Chat API](/docs/chat-api)
## Appendix
* [Safety](/docs/safety)  
   * [Preventing Abuse](/docs/preventing-abuse)  
   * [Brand Safety Framework](/docs/brand-safety-framework)
* [Exporting Data](/docs/exporting-data)  
   * [Raw Conversations](/docs/exporting-raw-conversations-with-the-botpress-api)  
   * [Conversation History](/docs/getting-the-conversation-history-from-within-your-bot)  
   * [Streaming Analytics](/docs/streaming-analytics-from-within-your-bot-with-hooks)  
   * [Compiled Bot Analytics](/docs/exporting-compiled-bot-analytics-with-the-botpress-api)
Powered by
# Analytics
Insights into chatbot performance, user engagement, and conversation effectiveness.
[ Suggest Edits](/edit/analytics-1)
Using the Analytics tab in your bot's dashboard, you can visualize your bot's recent activity as well as monitor the health of your bot project.
> ## 📘
>
> Note
>
> Some features in the Analytics tab, like selecting custom time periods or creating and saving additional custom displays, are only available to Team plan subscribers. [Learn more](https://botpress.com/pricing)
Default Layout
[](#default-layout)
By default, each bot in your Workspace comes with pre-configured analytics charts. These cover last month's users, new or returning users, how many messages users send per session, how many sessions your bot had over the last month, how many messages were sent to your bot over the last month, and a general overview of the previous 3 months.
Custom Boards
[](#custom-boards)
You can create custom boards, which visualize data related to your bot, by either editing an existing board from your default layout or creating a new chart altogether.
Time Period
[](#time-period)
When customizing a board, you can select from a list of pre-configured time periods to determine which time period's data gets visualized in your Analytics tab. Each of the boards in this tab can display information from different time periods.
Event Types
[](#event-types)
When choosing what data your Analytics tab will display, you can choose from a list of conversation-related events. These include:
* total, new, and returning users
* sessions
* bot, user, and total messages
* average messages sent by your bot per session
* average messages sent by users per session
* average number of sessions per user
* the custom botready, botpulished, state\_expired, and conversationStarted events.
Chart Types
[](#chart-types)
You can visualize data in the analytics tab with the following charts: area, donut, bar, pie, metric, spark bar, and spark area.
Analytics Agent
[](#analytics-agent)
> ## 📘
>
> Note
>
> The Analytics Agent is only available to Team Plan subscribers.
Once you've enabled the Analytics Agent from your bot's Agents menu, you can designate custom events that your bot will track. These events can be selected from the list of trackable events, or "Event Types."
Tracking custom events
[](#tracking-custom-events)
Follow these steps to track custom events:
1. Place the "Track Event" card found in the "Agents" section of the card tray into a node
2. Using the details panel, give the event a descriptive name that will allow you to keep track of them later. For example, you might track "Successful resolution" or "Unanswered question."
Once you've successfully created a custom event, your bot will track each event as the card is executed in a given node. For example, your bot can track how many times a conversation successfully reaches a specific node, or how often users flow through a certain node.
> ## 🚧
>
> Warning
>
> After creating a custom event, it can take up to an hour before the data is available to be visualized in your Analytics tab.
Updated about 1 month ago
---
* [Table of Contents](#)
* * [Default Layout](#default-layout)  
         * [Custom Boards](#custom-boards)  
   * [Time Period](#time-period)  
   * [Event Types](#event-types)  
   * [Chart Types](#chart-types)  
   * [Analytics Agent](#analytics-agent)  
   * [Tracking custom events](#tracking-custom-events)[ ](/)
Platform
Features
[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/65df5ba5ae204cf115231bd5_Icon_1.svg)Agent StudioBuild and customize your chatbot rapidly](/features/ai-agent-studio)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/65df5d22f040ffe5e0cbceb2_Sparkles_2.svg)Autonomous EngineUse LLMs to guide conversations and tasks](/features/autonomous)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/65df5e403ae794e8bac5d2da_book-open.svg)Knowledge BasesTrain your bot with custom knowledge sources](/features/knowledge-bases)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/65df5e04e8f1b3079e9ea83a_table.svg)TablesStore and manage conversation data](/features/tables)
[HubConnect your bot to your favorite tools or start building from a pre-built template.![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/65df60114b355d9731379cf5_Frame%201383.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/665e2d05b9bea79722631a9e_hub-colores.svg)](/hub)
[Explore Integrations](https://botpress.com/hub?type=Integration)[Explore LLMs](https://botpress.com/hub?type=LLM)
Solutions
For
[EnterpriseAutomate complex conversations and workflows](/enterprise)[Freelancers & AgenciesProvide sophisticated chatbot services for clients](/agency)[DevelopersExplore a robust API for chatbot development](/developers)
By Industry
[SaaS](/industries/software)
[Legal Services](/industries/legal-services)
[Manufacturing](/industries/manufacturing)
[Real Estate](/industries/real-estate)
[Hospitality](/industries/hospitality)
[Education](/industries/education)
[Telecom](/industries/telecommunications)
[Ecommerce](/industries/ecommerce)
[Finance](/industries/finance)
[Customer StoriesDiscover from successful customers how Botpress is transforming business worldwide.![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/665e5100a28a12e7fbcad591_customerStory_noColor.jpg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/665e456a7a50709959766e1f_image%20(16).webp)View all customer stories![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/65df6d9fae01773a7eac0d8a_cheveron-down.svg)](/customers)
Resources
Bot Builders
[Getting StartedBegin your chatbot journey quickly and easily](https://botpress.com/docs/build)
[GuidesExplore our library of guides and tutorials](https://botpress.com/docs/)
[VideosFollow along with our video resources](https://youtube.com/botpress)
Developers
[API ReferenceAccess references and guides](https://botpress.com/docs/api-documentation/)
[SDKTools for developers](https://www.npmjs.com/package/@botpress/sdk)
[CLIReference CLI commands](https://botpress.com/docs/developers/cli/)
Partners
[Become a PartnerJoin our network of certified experts](/become-a-partner)
[Find an ExpertConnect with partners and consultants](https://botpress.com/experts)
Essential Resources
[Academy](https://academy.botpress.com/)[Video Guides](https://www.youtube.com/playlist?list=PLlJHGGklthGlUVZlNhG5I0ZK8u1h6UfZ9)
[Community Support](https://discord.gg/botpress)[Blog](/blog)
Events
[![Botpress Discord Daily AMA](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66968f8fda109072834cace4_Website.webp)](https://discord.gg/botpress)
[Docs](https://botpress.com/docs/)
[Pricing](/pricing)
[Log in](https://sso.botpress.cloud/login)[Sign up](https://sso.botpress.cloud/registration)
[Community support, daily live office hours, and thousands of bot builders - all on our Discord!](https://discord.gg/botpress)
# The Complete
AI Agent Platform
The all-in-one platform for delivering chatbots powered by the latest LLMs.
[Get started for free Join 500,000+ builders![Icon of an arrow](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/661476c04ad6c4be4e8d63aa_external-link.svg)](https://sso.botpress.cloud/registration)[Contact Sales](/contact-us)
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664626b01887330307e50488_kia.svg)
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664e76ba9afbe789c2f1e4bc_eagle.svg)
![Windsteam Logo](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/667e00bcf1e64ca4d0fced38_windstream_logo.png)
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664626ad0429139c408c6d90_ae.svg)
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664626ae5e59ac14d6e5b6f9_shell.svg)
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664626adcc722d37f5b7e5d9_ea.svg)
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664cdfadb7f0f8dc2ecaf828_studio-cards%201.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664cd956522c7a8c5de43fec_studioDark.svg)
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/6644e1110c6e04692c1b69d9_award-03.svg)
## Trending on Botpress
The largest ecosystem to build production-ready AI agents.
[Go to Hub ](/hub)
#### Top Integrations
[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66450cf0c1eb89c318f020b0_whatsapp.png)WhatsApp ](https://app.botpress.cloud/hub/integrations/intver%5F01HYE8RZX72BG2PXEPRGGDQV03)[![Telegram logo](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/637bccb2241f010d200fa2f9_telegram-1.svg)Telegram ](https://app.botpress.cloud/hub/integrations/intver%5F01HYE8QRBH08EQ42RPVFJCV0DP)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/665e3dd01750ee488ee79b1b_make.webp)Make.com ](https://app.botpress.cloud/hub/integrations/intver%5F01HXA4418H5ANXPRVQZE62FPN4)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664516e61198b2e1e7ff600c_calendly.png)Calendly ](https://app.botpress.cloud/hub/integrations/intver%5F01HXJ521GW7QGMHAKW9CM18R2S)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66d233ebf529a2d3a5cc9a39_hugging-face.svg)Hugging Face ](https://app.botpress.cloud/hub/integrations/intver%5F01J6FP62B7KEHH4NC4R7NBBTW5)
#### Top LLM Providers
[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66ff09d9b12536d694885aea_openai.png)OpenAI ](https://botpress.com/integrations/openai)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66ff09d98cb30a06844e4e56_3.png)Anthropic ](https://botpress.com/integrations/anthropic)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66ff096c43ddee6d69ec96e0_meta.png)Meta ](https://botpress.com/integrations/plus-huggingface)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66ff09d9ecadda2e7594b153_groq.png)Groq ](https://botpress.com/integrations/groq)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66ff09d9669b22cf52a3dded_cerebras.png)Cerebras ](https://botpress.com/integrations/cerebras)
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66452c747575efb2a1b1fa39_compass.svg)
## Everything you need to build the agents of the Future
Greet user in a friendly and professional tone.
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/6649727304406ce187f158f0_star.svg) ![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/6649727304406ce187f158f0_star.svg)
Leverage the latest LLMs
Incorporate LLMs into your agent to power your bot’s conversations to deliver natural and engaging responses.
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce5a626197649220cc_Search.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce411f9f0d5591cf3b_Web.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbcd44508f599018a6_RTF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbfa8da671badafe13_PDF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cafa8da671badafd49_Doc.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ca5c58c69bf7debf1c_Text.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbfa8da671badafe13_PDF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cafa8da671badafd49_Doc.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ca5c58c69bf7debf1c_Text.svg)!
[](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce5a626197649220cc_Search.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce411f9f0d5591cf3b_Web.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbcd44508f599018a6_RTF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce5a626197649220cc_Search.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce411f9f0d5591cf3b_Web.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbcd44508f599018a6_RTF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbfa8da671badafe13_PDF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cafa8da671badafd49_Doc.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ca5c58c69bf7debf1c_Text.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce5a626197649220cc_Search.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce411f9f0d5591cf3b_Web.svg)!
[](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbcd44508f599018a6_RTF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbfa8da671badafe13_PDF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cafa8da671badafd49_Doc.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ca5c58c69bf7debf1c_Text.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbfa8da671badafe13_PDF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce5a626197649220cc_Search.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce411f9f0d5591cf3b_Web.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbcd44508f599018a6_RTF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbfa8da671badafe13_PDF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cafa8da671badafd49_Doc.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ca5c58c69bf7debf1c_Text.svg)!
[](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbfa8da671badafe13_PDF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce5a626197649220cc_Search.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce411f9f0d5591cf3b_Web.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbcd44508f599018a6_RTF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbfa8da671badafe13_PDF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cafa8da671badafd49_Doc.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ca5c58c69bf7debf1c_Text.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbfa8da671badafe13_PDF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cafa8da671badafd49_Doc.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ca5c58c69bf7debf1c_Text.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce5a626197649220cc_Search.svg)!
[](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce411f9f0d5591cf3b_Web.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbcd44508f599018a6_RTF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce5a626197649220cc_Search.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538ce411f9f0d5591cf3b_Web.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbcd44508f599018a6_RTF.svg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664538cbfa8da671badafe13_PDF.svg)
Import all your knowledge sources
Import knowledge from custom data sources like websites, docs or PDFs.
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66462feb831c546a99c9aaff_profilePicture.png)
David Rubies
davidrr1
I have a passion.
Hub Contributions
Build your AI development portfolio
Position yourself at the forefront of artificial intelligence with the Botpress Hub.
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664d964d574cd5f442ffa1ac_arti_chat.svg)
Automatically sync with your databases & systems
Capture user inputs in a vectorized DB and sync with 3rd party systems to deliver personalized chatbot experiences.
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66454159aab4cd4f4228d644_code-square-02.svg)
## An API for everything
Extend your agents’ functionality with our easy-to-use API and SDK.
[Read docs ](https://botpress.com/docs/developers/)
```js
import { Integration } from "@Botpress/sdk";
import protonMailChannel from "./protonMailChannel";

export default new Integration({
  channels: {
    protonMailChannel: protonMailChannel,
  },
  actions: {
    sendEmail: ({ ctx }) => {
      console.info(`sending email for bot${ctx.botId}`);
    },
  },
  register: async ({ ctx }) => {
    console.info(`integration installed in bot ${ctx.botId}`);
  },
  handler: async ({ req }) => {
    console.info("received request from protonMail", req);
  },
});
```
1,040,032,064
messages processed
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664558eb5b5fb150bb7a11eb_rocket-02.svg)
## Botpress Enterprise
Build, deploy, and manage AI bots at an enterprise scale.
[Get started ](/enterprise)
Security
Secure your data with enterprise-grade security features.
Scalability
Scale your chatbots to meet the demands of your business.
Support
Get dedicated support from our team of experts.
Activity
Monitor and analyze chatbot activity in real-time.
Uptime
Ensure your chatbots are always online and available.
Compliance
Ensure your chatbots are compliant with GDPR and SOC 2.
The best companies use the best tools
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/667dfe47899a9b8f59401061_windsteam_cover.jpg)![Windsteam Logo](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/667e00bcf1e64ca4d0fced38_windstream_logo.png)
Windstream
Massively scale customer support response capacity
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664e72cf5685a883f92d393e_americanEagle.jpg)![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664e76ba9afbe789c2f1e4bc_eagle.svg)
American Eagle
Automatically scale customer support to millions of shoppers
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66455a62a180d38c7797b070_globe-01.svg)
## Join the largest bot building community
A supportive network of bot builders that share ideas, troubleshoot issues, and foster collaboration.
[Join our Discord ](https://discord.gg/botpress)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e378856190e41ef411297_BogdanA.webp)@BogdanAThe unlimited number of integrations it has! It's perfect for any type of workflow you'd like to perform: Cancellations, refunds, authentications and many more!](https://www.g2.com/products/botpress/reviews/botpress-review-9051332)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e3b8ebdfb853c1ac1a874_CarolynM.webp)@CarolynMBotpress is a great platform with a strong community of developers around the world that are welcoming and open to sharing their time, resources, and elevating best practices among bot builders.](https://www.capterra.ca/reviews/199292/botpress)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e386bd87b060c0c13fd3e_DilanR.webp)@DilanROne of the most important things is how intuitive the tool is, and the free tier is very generous, the number of possible integrations is also one of my favorite things because of how versatile it can be.](https://www.g2.com/products/botpress/reviews/botpress-review-9465641)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e359c7e01cd02fa2e8705_JDC.webp)@JD\_CThe botpress discord is hands down the best discord experience I have had. From troubleshooting to keeping up with changing trends it's a one stop shop for reaching your full Botpress potential.](https://www.g2.com/products/botpress/reviews/botpress-review-9683460)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e59173810453fd8c6592a_Screenshot%202024-06-03%20at%2019.56.57.webp)@JoeKBotpress makes it very easy to host bots on their cloud servers and they have a lot of integrations with platforms such as Whatsapp, Telegram, Zapier, Zendesk and much more. The Botpress studio is very user friendly and easy to use and scale up with for larger bots.](https://www.g2.com/products/botpress/reviews/botpress-review-9103990)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e360e14d04ef64a845577_JulioA.webp)@JulioABotpress stands out for its user-friendly interface, making it accessible for users of all skill levels. Whether you're a seasoned developer or new to the world of chatbots, navigating through its features and tools is straightforward and efficient, enabling quick learning and mastery of its functionalities.](https://www.g2.com/products/botpress/reviews/botpress-review-9480158)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e380dfadca872cff49780_KontoT.webp)@KontoTI'm a little bit control freak, so I like to know what is under the hood. Botpress is ideal for me because I can control all the aspects of my bot](https://www.g2.com/products/botpress/reviews/botpress-review-8977491)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e3ad4be00dd2544679b5e_MaxH.webp)@MaxHBotpress frees up time for our support staff to focus on other tasks since FAQs are answered by the bot.](https://www.g2.com/products/botpress/reviews/botpress-review-9447732)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/66719141fb72f3cbdf1a7eda_ML.webp)@MichaelLBotpress manages to make the platform both accessible for beginners and powerful enough for those who want to tackle advanced use cases.](https://www.g2.com/products/botpress/reviews/botpress-review-9464459)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e38993615177b5d6c0bd8_Oliver.webp)@OliverMIt's so simple to use, anything that is not immediately obvious, is supported by excellent video tutorials and a super supportive Discord community. The majority of useful integrations and essential features are ready to go, and easy to implement.](https://www.g2.com/products/botpress/reviews/botpress-review-8760692)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e38c832e5d1075ae1bdc3_RajaVigneshT.webp)@RajaVigneshTGame Changer for Chatbot Community. It is very helpful and makes the tasks easier to work with. Also it is user-friendly, and the AI agents feature attracts me more.](https://www.g2.com/products/botpress/reviews/botpress-review-9504042)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e36cb666d23e3ef47adfa_RemusP.webp)@RemusPBeing a no-coder, Botpress is wonderful tool to discover and learn. Helping loads this two key factors, is the awesome team behind the platform, which provides easy to follow Youtube tutorials and host weekly streams for developers or no-coders like me.](https://www.g2.com/products/botpress/reviews/botpress-review-8762007)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/65d6183bd38ca4d512e8016f_REP.webp)@RodolfoEstebanPBotpress is a game changer for me in managing customer query related tasks and handling them preciously.](https://www.g2.com/products/botpress/reviews/botpress-review-9307365)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/65d618cb28f4130973920c53_SMAH.webp)@SMAshikuzzamanHDeployment efficiency is one aspect where Botpress really shines. The ability to have a bot up and running in about 10 minutes highlights the optimization and effectiveness of the platform.](https://www.g2.com/products/botpress/reviews/botpress-review-9238613)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e3f7533cb791763a03ee3_TariqB.webp)@TariqBBotpress cloud has pushed boundaries more than any other platform I have used. The features that are available to me are excellent. The way they have incorporated GenAI to support in both generative outputs but also in a co-pilot way to create and execute code is just awesome.](https://www.g2.com/products/botpress/reviews/botpress-review-8966699)
[![](https://cdn.prod.website-files.com/637e5037f3ef83b76dcfc8f9/665e394a471b02122f1234bc_TiagoP.webp)@TiagoPHonestly the sky is the limit. It is suitable for small projects up to big projects that require a lot of integrations. The pricing model is what I would say unbeatable.](https://www.g2.com/products/botpress/reviews/botpress-review-9542820)
## Build Better with Botpress
Craft amazing conversational experiences.
[Get started - it's free![Icon of an arrow](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/661476c04ad6c4be4e8d63aa_external-link.svg)](https://sso.botpress.cloud/registration)
[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66459367a68df2a660f7e3f2_gradHat.svg)Learn more at Botpress Academy![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/6645941d86f168de06a2383f_arrowTopRight.svg)Become a master bot builder with our curated collection of courses, guides, and tutorials.](https://academy.botpress.com/pages/learn)[![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/664595fe8284d6e8557cd21e_message-chat-circle.svg)Find an Expert![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/6645941d86f168de06a2383f_arrowTopRight.svg)Connect with our certified developers to find an expert builder that suits your needs.](https://botpress.com/experts/projects/create)
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/665a0d85cd9f5a40e38923c0_cta_img-bottom.svg)
All Systems Operational
SOC 2
Certified
GDPR
Compliant
[ ](#)
© 2024
[ ](https://github.com/botpress)[ ](https://www.youtube.com/botpress)[ ](https://twitter.com/getbotpress/)[ ](https://www.linkedin.com/company/botpress/)[ ](https://discord.gg/botpress)
![](https://cdn.prod.website-files.com/635c4eeb78332f7971255095/66187999a9a30ff89e4be8c8_footer_award.svg)
Platform
[Pricing](/pricing)[Studio](/features/ai-agent-studio)[Tables](/features/tables)[Autonomous Agents](/features/autonomous)[Knowledge Bases](/features/knowledge-bases)
Hub
[Integrations](https://botpress.com/hub?type=Integration)[Channels](https://botpress.com/hub?type=Channel)[LLMs](https://botpress.com/hub?type=LLM)
Resources
[Talk to Sales](/contact-us)[Documentation](https://botpress.com/docs/)[Find an Expert](http://botpress.com/experts)[Videos](https://www.youtube.com/botpress)[Customer Stories](/customers)[API Reference](https://botpress.com/docs/api-documentation/)[Blog](/blog)[Status](https://status.botpress.com/)[v12 Resources](https://v12.botpress.com/)
Community
[Community Support](https://discord.gg/botpress)[Become a Partner](/become-a-partner)[Become an Ambassador](/ambassador-program)[Become an Affiliate](/affiliates)[Events](/events)
Company
[About](/company/about)[Careers](/careers)[News & Press](/news)[Legal](/legal)
© Botpress 2024
